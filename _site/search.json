[
  {
    "objectID": "temp/average_uz.html",
    "href": "temp/average_uz.html",
    "title": "mean or median\n in Uzbek",
    "section": "",
    "text": "Bu galgi mavzuda o’rta qiymatlar haqida gap boradi\n\n\n\nTez kunda…\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "projects/uzbinde.html",
    "href": "projects/uzbinde.html",
    "title": "Dashboard with Shiny in Quarto",
    "section": "",
    "text": "In this project, a dashboard was created using Quarto. It shows the number of Uzbeks in Germany, according to their residence status and comparison over the years.\n\n\n\n  Data Source: ©Statistisches Bundesamt (Destatis), 2025 | Stand: 31.07.2025   Code Source: GitHub   Published on: shinyapps.io   Link to dashboard: sultanov.shinyapps.io/uzbinde\n\n\n\n\n Back to top"
  },
  {
    "objectID": "projects/create_cv/create_cv.html#intro",
    "href": "projects/create_cv/create_cv.html#intro",
    "title": "Create Curriculum Vitae with {datadrivencv} in \n in Uzbek",
    "section": "1 Intro",
    "text": "1 Intro\nResume - lotinchadagi Currilicum Vitae bilan ham aytiladigan, qisqacha CV, ya’ni tarjimai hol, bu ishga ariza topshirishdagi hujjatlardan eng muhimi hisoblanadi. Rimga olib boradiga yo’llar kop bolgani kabi, CV ni ham har xil usullarda yaratish mumkin. Man o’zimni resume -imni shu paket yordamida yaratdim. Bu yerda Shu proyektchadan, R-dagi datadrivencv yordamida CV yaratishni qisqacha yoritib berishga qilaman. Paket muallifi Nick Strayer va paket haqida batafsil ma’lumotni GitHub saytidan olish mumkin.\nDastlab datadrivencv paketi haqida qisqacha. Bu R-dagi library ya’ni kutubxonalaridan biri. R dasturida bu package deyiladi. Buni Pythondagi modul-larga taqqoslash mumkin. Biror bir funksiyani ishlatish imkoniyatiga ega bolish uchun masalan, Paython-da olaylik, pandas mudulini avval installing qilib, ya’ni tushirib olib keyin (import) yuklashimiz kerak bolgani kabi, R-da ham avval paket tushirib olinadi va keyin (library) yuklanadi. Quyida misol tariqasida R-dagi dplyr paketi va Pythondagi pandas modulini tushirib olish va yuklash kursatilgan:\n\n\n\n\nIntall Package dplyr\n```{r}\ninstall.packages(\"dplyr\")\n```\nLibrary Package dplyr\n```{r}\nlibrary(\"dplyr\")\n```\n\n\nInstall modul pandas (via Prompt)\n```{python}\npip install pandas\n```\nImport modul pandas\n```{python}\nimport pandas as pd\n```"
  },
  {
    "objectID": "projects/create_cv/create_cv.html#set-up",
    "href": "projects/create_cv/create_cv.html#set-up",
    "title": "Create Curriculum Vitae with {datadrivencv} in \n in Uzbek",
    "section": "2 Set Up",
    "text": "2 Set Up\nBirinchi bo’lib man datadrivencv paketini tushirib olishim kerak. Bundan tashqari resume yaraishimga kerak bo’ladigan manbaa ya’ni inputni yaratishim kerak. Kerakli ma’lumotlar CSV-faylga (agar komputerda lokal saqlanmoqchi bolsa yok kimgadir Excelda ishlash qulay bolsa) yoki Google Sheets-ga jadval sifatida kiritiladi. Quyida bularni alohida qadam tarzda yoritilgan.\n\n2.1 Download datadrivencv\nR-dapopular yoki asosiy librarylar asosan CRAN (Comprehensive R Archive Network) dan yuklanadi. Bunda bizga ma’lum bolgan oddiy install.pakages() funksiyasi yordamida tushirib olishimiz mumkin. Keyingi R-Paketlari uchun manbaalar bu GitHub hisoblanadi. GitHub development versiyasini tushirib olish uchun devtools yoki remotes paketi kerak boladi. Bu paketlarni CRAN-dan tushirib olsa boladi. Keyin esa remotes::install_github(\"Pakage\") orqali tushirib olinadi.\ndatadrivencv-Paketini tushirib olishda remotes yoki devtools paketlaridan foydalaniladi. Man remotes paketidan foydalandim. Paketni tushirishda R-Console-ga quyidagi buyruq beriladi:\n\n# install.packages(\"remotes\") # if not yet installed\nremotes::install_github(\"nstrayer/datadrivencv\")\n\n\n\n2.2 Prepare data\nResumega kerak boladiga asosiy manba bu Input, ya’ni jadval sifatida kiritilgan ma’lumotlar. Bular resumida turishi kerak bolgan asosiy bolimlar, yani kontakt, o’zi haqida qisqacha ma’lumot, kasbiy va akademik yo’llar va hokozo. Man input sifatida Google Sheet-ni tanladim. Jadvalni noldan boshlab yangi yaratish va to’ldirib chiqish o’rniga, documentation-da avtor tomonidan aytilganidek, ushbu jadval nusxasini olish va uni ehtiyojga qarab o’zgartirish mumkin.\n\n\n\n\n\n\nChapdagi rasmda kurinib turgandek, avtorni faylidan nusxa ko’chirib olish mumkin. Men nusxa kochirib, o’zimni ma’lumotlarimni berdim. Bu yerda e’tibor berilishi kerak bolgan narsa, jadval nomlari o’zgarmasligi kerak, agar yangi bo’lim, ya’ni section yaratilsihi kerak bolsa, u holda biz keyinchalik Section 3.3 da ko’radigan R-Skrip da ham kodni/funksiyani moslashtirish kerak.\n\n\n\nGoogle Sheet yaratganda, sozlamasidan uni hamma kurishiga ruxsat qilib o’zgartirib quyish kerak. Sozlamada faqat ko’rish uchun ruxsat qilib, o’zgartirishni boshqala uchun cheklab qo’ysa boladi\nGoogle Sheet dagi o’zimga moslashtirilgan jadval final holatda quyidagi ko’rinishda:\n\n\n\nInput for resume: Google Sheet\n\n\nRasmda ko’ringanidek, fayldagi har bir jadval resumedagi bir bo’lim yoki section hisoblanadi. Masalan hozirgacha ishlagan joylarimizni har birini alohida qatorga kiritamiz. Bunda birinchi section ustuniga Work Experience sectioni uchun kalit so’zi sifatida “work” so’zidan foydalandim, (kalit so’zini ixtiyori o’zgartirisch mumkin). Shun narsani akademik va maktab ta’limi uchun ham takrorlaymiz, faqat har bir section uchun alohida kalit so’zi bolishi kerak, manda maktab ta’limi uchun “school” va akademik ta’lim uchun “education” qilib o’zgartirilgan. Boshqa jadvallarda ham shunday moslashtirishni qilamiz. Quyidagi rasmda inputdagi qaysi jadval resumini qayeriga joylashishi korsatilgan.\n\n\n\nSections in resume\n\n\nJadvallar haqida, ularning formatlari, ustunlari va ularning vazifalari haqida bu yerda batafsil ma’lumot keltirilgan."
  },
  {
    "objectID": "projects/create_cv/create_cv.html#go-to-work",
    "href": "projects/create_cv/create_cv.html#go-to-work",
    "title": "Create Curriculum Vitae with {datadrivencv} in \n in Uzbek",
    "section": "3 Go to work",
    "text": "3 Go to work\nSection 2.1 da aytib o’tilganidek datadrivencv-Paketini tushirib olib va Section 2.2 da korsatilgandek inputni tayyorlab bolgandan keyin asosiy qism, ya’ni R da resumeni yaratishni boshlasak boladi.\n\n3.1 Create a new project\nR-Project lari har xil loihalarda ishlanganda ma’lumotlarni oson o’qishga imkoniyat yaratadi. Har bir loiha ya’ni proyekt uchun R-Project yaratilsa, R shu projektga tegishli bolgan o’qiladigan va yaratiladigan yangi ma’lumotlar, fayllarni shu proyekt joylashgan papkaga joylaydi va shu yerdan o’qiydi. R ma’lumotlarni asosan fayllar joylashgan papka qayer qilingan bolsa shu yerdan uqiydi (agar ma’lumot joylashgan papkaning to’liq adresi berilmasa). Bu R da Working Directory (WD) deyiladi. Yangi R-Project yaratilganda, R asosiy WD ni shu proyekt joylashgan joy qilib belgilaydi. R da hozirgi aktual WD ni Console ga getwd() funksiyasin berish orqali bilib olsa boladi. Agar ma’lum bir adres asosiy WD qilinmoqchi bolsa setwd(\"adres/papka/file\") funksiyasi orqali istalgan ma’lumotlar joylashgan joyni asosiy WD qilib o’zgartirsa boladi.\n\n\n\nCreate a new R-Project\n\n\n\n\n3.2 Use use_data_driven_cv() function\nYuqorida kursatilganidek, CV uchun R-Project yaratib olganimizdan keyin, birinchi bolib use_data_driven_cv() funksiyasini ishlatishimiz kerak boladi. Funksiya quyidagi ko’rinischda (argumentlar avtorniki, shularni o’zimiznikiga moslashtirishimiz kerak boladi):\n\n\n\nuse_data_driven_cv()-funksiyasi\n\n\nFunksiya quyidagi parametr va argumentlarni o’z ichiga oladi:\n\n\n\n\n\n\n\nfull_name\nSarlavha, ya’ni resumeda eng tepada turadigan title, odatda ism-sharif\n\n\ndata_location\nBarcha ma’lumotlarni o’z ichiga olgan jadvallar joylashgan joy. Bu ma’lumot turlarini o’z ichiga olgan jadvallar joylashgan Google Shett faylining URL manzili yoki yoki shu ma’lumotlar kiritilgan csv-fyallar joylashgan mazil bolishi mumkin\n\n\npdf_location\nYaratiladigan resumening PDF shakli saqlanishi kerak bolgan joy\n\n\nhtml_location\nYaratiladigan resumening HTML shakli saqlanishi kerak bolgan joy\n\n\nsource_location\nResume yaratish kodi joylashgan manzil\n\n\n\nFunksiyani ishlatish uchun, uni o’zimini argumentlar bilan o’zlashtirib R-Consolega beramiz.\n\ndatadrivencv::use_datadriven_cv(\n    full_name = \"Fazliddin Sultanov\",\n    data_location = \"https://docs.google.com/spreadsheets/d/XXXXXX\",\n    pdf_location = here::here(\"my-cv.pdf\"),\n    html_location = here::here(),\n    source_location = here::here()\n)\n\nYuqorida man here paketidagi here() funksiyasidan foydalandim. Yaratiladigan fayllar man yuqorida resume uchun yaratgan yangi my-cv loiha joylashgan my-cv papkasiga avtomatik tarzda joylanadi.\n\n\n\n\n\n\nExpand for more about here::here()\n\n\n\n\n\nhere()-funksiyasi here paketi ichida bolib, asosan fayllar joylashgan manzillarni boshqarishni osonlashtiruvchi vazifasini o’taydi. Masalan agar biz R da qandaydir ma’lumotni yuklamoqchi bolsak, bu ma’lumot R-fayli (Misol uchun ma’lumotni yuklash va qayta ishglash yozilgan R-Skript) joylashgan joyda ya’ni papkada bolishi kerak, aks holda biz R-ga ma’lumot joylashgan papkani toliq manzilini berishimiz kerak boladi (Bu esa hatoliklar ehtimolini oshiradi). Aytaylik, man R-da yange R-Project yaratdim va bu loihani myproject deb nomladim. Shu loyiha ichida yana ma’lumotlar uchun mydada nomli quyi papka ayaratdim va bu papka ichida bir nechta excel va csv fayllar joyladim. Agar shu papka ichidan file.csv faylini yuklamoqchi bolsam quyidagicha amallarni bajarishim kerak:\n\nsetwd(\"C/users/Documents/myproject/\")\ndf &lt;- read_csv(\"mydata/file.csv\")\n# yoki\ndf &lt;- read_csv(\"C/users/Documents/myproject/mydata/file.csv\")\n\nhere() funksiyasi orqali quyidagicha boladi:\n\nlibrary(here)  # you may need to install the here package first\ndf &lt;- read_csv(here::here(\"mydata\", \"file.csv\"))\n\n\n\n\nYuqoridagi use_datadriven_cv() funksiya ishga tushirilgandan keyin (yuqoridagi ammallar to’g’ri bajarilgan bolsa), bizda my-cv papkasida to’rta yangi fayllar yaratiladi. Buni Plots and Files bo’limida, ya’ni RStudioda bu panel deyiladi) ko’rishimiz mumkin.\n Yaratilgan fayllardan muhimi ya’ni uzgartirish yoki moslashtirilishi kerak bolganlari, bular cv.rmd, cv_printing_functions.r va render_cv.r.\n\n\n\n\n\n\n\ncv.rmd\nBu turli bo’limlari to’ldirilgan va resume tarkibini o’qiydigan RMarkdown fayl. Buni kerakli joyda uzgartirsa boladi. Masalan manda Upskllls bolimi yangi, bundan tashqari maktab ta’limi uchun ham alohda bo’lim School Eductaion qilingan.\n\n\ndd_cv.css\nBu CSS-fayl, resumega shakl beruvchi (harflar kattaligi, turi, ranglar, va hokozo) qo’shimcha fayl.\n\n\nrender_cv.r\nUshbu fayl ishga tushirilganda rezyumening ham HTL ham PDF shakli yaratiladi\n\n\ncv_printing_functions.r\nBu rezyumeni yaratish kodini o’z ichiga olgan fayl. Bu kod bir qancha funksiyalardan tashkil topgan. Bu funksiyalar jadvaldagi ma’lumotlarni Markdown/HTML ga o’tkazadi, va ularni PDF ga chop etischni ta’minlaydi. Odaytda fu faylda kop o’zgartirish qilinmaydi.\n\n\n\n\n\n3.3 Customize the RMarkdown file\nBiz boshida paket yuklab oldik, o’zimizni ma’lumotlarni ichiga olgan jadvallarga ega Google Shett ya’ni inputni yaratdik va use_datadriven_cv() funksiyasini ishga tushirish bilan yuqoridagi fayllarga ega boldik. Qolgan asosiy ish, fayllarni o’zgartirish va rendering ya’ni rezyumeni yaratish qoldi. Asosiy o’zgartirilishi kerak bolgan fayl bu cv.rmd-faylidir. Man yuqorida Google Sheet da yangi bo’lim IT-Skills ham qushgandim. Shuning uchun bu bo’lim uchun ham kodni/funksiyani qo’shishim kerak. Buni cv_printing_functions.r faylida qilamiz. Buni man Language Skill funksiyasidan kopiya olib, o’zgartirib, IT Skills uchun yangi funksiya sifatida qo’shib qoydim. Renedring paytda cv_printing_functions.R faylida hatolik yuz berishi mumkin (manda shunday boldi). Chunki bu faylda haliyam googlesheets4 paketidagi eski funksiya sheets_deauth() qollanilganidan ekan. Yangi funksiya gs4_deauth() ko’rinishda. Demak faylning 32-qatoridagi googlesheets4::sheets_deauth() ni o’rniga googlesheets4::gs4_deauth() qilib o’zgartirish kerak.\n\n\n\nYangi bo’lim/section\n\n\nBiz o’zgartirishimiz kerak bolgan asosiy fay bu cv.rmd. Section 2.2 da ko’rsatilganidek, Google Sheetdagi contact_info, language_skills va it_skills jadvallari va ulardagi ma’lumotlar rezyumeni o’ng tomonida joylashadi, cv.rmd-faylda Aside qismi. entries jadvali va undagi bo’limlar (work, school, va hokozo) rezyumening asosiy qismi hisoblanib, chap va o’rta qismni egallaydi, cv.rmd-faylda bu Main qismida. text_blocks jadvaldagi ma’lumot manda razyumening yuqorida joylashgan. Bu jadvalda bo’lim nomi manda intro deb o’zgartirilgan va Markdownda bu ham Main qismida joylashgan\n\n\n\n\n\n\nAsosy qism\n\n\n\n\n\n\n\nO’ng tomonda turadigan ma’lumotlar\n\n\n\n\n\nRezyumeni bo’limlariga mos ravishda icon joylashtirisch uchun, Font Awesome dan foydalaniladi. mAsalan manda Academic Education bo’limida graduate iconidan foydalanilgan, buni ham cv.rmd-faylida o’zgartirish kerak.\nAcademic Education {data-icon=user-graduate data-concise=true} &gt; ====================================================\n\nCV %&lt;&gt;% print_section('adv_educ')\n\nGoogle Sheetda entries jadvalida, section ustunida manda akademik ta’lim uchun kalit sozi adv_educ qilib o’zgartirilgan. BU cv.rmd-faylida ham print_section() funksiyasida shunday berilgan. Qolgan o’zgartirishlar ham shunday amalga oshiriladi."
  },
  {
    "objectID": "projects/create_cv/create_cv.html#rendering-the-resume",
    "href": "projects/create_cv/create_cv.html#rendering-the-resume",
    "title": "Create Curriculum Vitae with {datadrivencv} in \n in Uzbek",
    "section": "4 Rendering the resume",
    "text": "4 Rendering the resume\nNihoyat yuqoridagi kursatilgan qadamlar togri bajarilgandan keyin, rezyumeni rendering ya’ni R-ga rezyumeni yaratishinga buyruq bersak boladi. Agar biz faqat HTML shaklini o’zini yaratmoqchi bolsak, buning uchun cv.rmd faylini ochib, RStudioda tepada Knit tugmasini bosish kifoya.\n\n\n\nRender the cv.rmd file\n\n\nrender_cv.r fayldagi kodni bajarsak (RStudioda STRG+ENTER orqali kodni bajarsa ham boladi yoki yuqorida Run tugmasini bosish orqali), rezyume ham HTML, ham PDF shaklida yaratiladi."
  },
  {
    "objectID": "projects/create_cv/create_cv.html#update-the-resume",
    "href": "projects/create_cv/create_cv.html#update-the-resume",
    "title": "Create Curriculum Vitae with {datadrivencv} in \n in Uzbek",
    "section": "5 Update the resume",
    "text": "5 Update the resume\nQachondir rezyumeni yana o’zgartirishga to’ri keladi, masalan boshqa ishga o’tilsa, yoki hayotimizda kasbiy tomondan nimadir o’zgarish ro’y bersa, yanga sertifikat, yangi kusr va hokozo. Bunda rezyumeni yangilash uchun\n\nInput (manda Google Sheet) o’zgartiriladi\ncv.rmd fayli o’zgartiriladi (qachon yangi section qo’shilsa, agar mavjud ma’lumotlar o’zgartirilishi kerak bolsa, bu bosqich shart emas)\nVa render_cv.R faylidagi kodni boshqatdan run qilish"
  },
  {
    "objectID": "posts/mean/average_de.html",
    "href": "posts/mean/average_de.html",
    "title": "Estimates of Location\n in German",
    "section": "",
    "text": "Bei der deskriptiven Statistik werden die Daten zusammenfassend dargestellt und beschrieben, so dass mann den Wald statt viele Bäume sieht (Sauer 2019). Die Daten werden also explorativ untersucht, um den ersten Eindruck von ihnen zu bekommen. Dies würde man im Bereich Machine Learning als Feature Engineering bezeichnen (Alby 2022). Die deskriptive Statistik wird auch als beschreibende Statistik oder deskriptive Datenanalyse bezeichnet und hat das Ziel einen Überblick über die Verteilung der Daten anhand Kennzahlen, Tabellen und Grafik zu verschaffen.\nLagemaße (engl. Estimates of Location), auch Maße der zentralen Tendenz genannt, gibt Auskunft darüber, wo die Mitte der Verteilung liegt. Anders gesagt, man reduziert mehrere Werte auf einen Wert (Kennzahl), der alle Werte repräsentiert (viele einzelne Bäume -&gt; Wald). Mittelwert, Median und Modalwert gehört dazu."
  },
  {
    "objectID": "posts/mean/average_de.html#mean",
    "href": "posts/mean/average_de.html#mean",
    "title": "Estimates of Location\n in German",
    "section": "Mean",
    "text": "Mean\nDas arithmetisches Mittel (engl. mean) häufig als Mittelwert bezeichnet, wird am häufigsten benutzt. Mittelwert wird berechnet, indem man alle Werte addiert \\((x_1, x_2, ..., x_n)\\) und die Summe durch die Anzahl der Werte (n) dividiert: \\[\n\\bar{x} = \\frac{x_1+x_2+x_3+...+x_n}{n}  = \\frac{1}{n}\\sum_{i = 1}^{n}{x_i}\n\\] Man möge sich vorstellen, man würde eine Straßenumfrage machen und die Menschen nach ihrem Beruf, Alter und Einkommen fragen.\n\n\nshow the code\ninterview &lt;- list(\n  profession = c(\"Doctor\", \"Teacher\", \"Doctor\", \"Pensioner\", \"Professor\", \"Pensioner\", \"Student\", \"Student\", \"Pensioner\"),\n  age = c(47, 39, 55, 68, 51, 71, 21, 25, 82),\n  tall = c(1.75, 1.72, 1.73, 1.68, 1.75, 1.70, 1.78, 1.77, 1.73),\n  income = c(3500,  2200, 3400, 2050, 2600, 1400, 1050, 950, 1100)\n)\ndf &lt;- data.frame(interview)\nas_tibble(df)\n\n\n#&gt; # A tibble: 9 × 4\n#&gt;   profession   age  tall income\n#&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 Doctor        47  1.75   3500\n#&gt; 2 Teacher       39  1.72   2200\n#&gt; 3 Doctor        55  1.73   3400\n#&gt; 4 Pensioner     68  1.68   2050\n#&gt; 5 Professor     51  1.75   2600\n#&gt; 6 Pensioner     71  1.7    1400\n#&gt; 7 Student       21  1.78   1050\n#&gt; 8 Student       25  1.77    950\n#&gt; 9 Pensioner     82  1.73   1100\n\n\nUm den Mittelwert zu berechnen gibt es in R und Python die Funktion mean(). Zu beachten bei der Berechnung von mean ist, dass der Mittelwert metrische Daten voraussetzt. Mean vom Einkommen und Alter ist wie folgt berechnet:\n\n\n\nm_age &lt;- mean(df$age); m_inc &lt;- mean(df$income)\nglue::glue(\"mean of age: {m_age}\\nmean of income: {round(m_inc, 2)}\")\n#&gt; mean of age: 51\n#&gt; mean of income: 2027.78\n\n\n\n\n\nage_m = r.df.age.mean(); inc_m = r.df[\"income\"].mean()\nprint(f\"mean of age: {age_m}\\nmean of income: {round(inc_m, 2)}\")\n#&gt; mean of age: 51.0\n#&gt; mean of income: 2027.78\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nVon neun Befragten ist das arithmetisches Mittel fürs Alter: 51 und fürs Einkommen: 2.161. Also, man kann sagen, die Befragten sind im Durchschnit 51 Jahre alt und verdienen durchschnitlich 2.027,78 (in Euro, Dollar, in was auch immer) im Monat."
  },
  {
    "objectID": "posts/mean/average_de.html#median",
    "href": "posts/mean/average_de.html#median",
    "title": "Estimates of Location\n in German",
    "section": "Median",
    "text": "Median\nMedian ist der Wert, der in der Mitte von den der Größe nach sortierten/geordneten Werten ist. Er halbiert die Verteilung und gibt an, dass eine Hälfte der Verteilung von ihm kleiner und andere Hälfte größer ist.\nUm Miedian zu berechnen gibt es in R und Python die Funktion median(). Zu beachten ist, dass der Median metrische und ordinale Daten voraussetzt. Median vom Einkommen und von der Größe ist wie folgt berechnet:\n\n\n\nmed_tall &lt;- median(df$tall); med_inc &lt;- median(df$income)\nglue::glue(\"median of tall: {med_tall}\\nmedian of income: {med_inc}\")\n#&gt; median of tall: 1.73\n#&gt; median of income: 2050\n\n\n\n\n\nimport pandas as pd\ntall_med = r.df.tall.median(); inc_med = r.df[\"income\"].median()\nprint(f\"median of tall: {tall_med}\\nmean of income: {inc_med}\")\n#&gt; median of tall: 1.73\n#&gt; mean of income: 2050.0\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nVon neun Befragten ist der Median für die Größe: 1.73 und fürs Einkommen: 2.050. Also, man kann sagen, die Hälfte (50%) der neuen Befragten sind kleiner als 1.73 Meter und verdienen unter 2.050 (in Euro, Dollar, in was auch immer) im Monat. Oder andersrum, die Hälfte (50%) der Befragten sind größer als 1.73 Meter und verdienen über 2.050 im Monat."
  },
  {
    "objectID": "posts/mean/average_de.html#modus",
    "href": "posts/mean/average_de.html#modus",
    "title": "Estimates of Location\n in German",
    "section": "Modus",
    "text": "Modus\nModalwert, auch Modus genannt, ist der Wert, der am häufgsten vorkommt. Der Modus kann für metrische, ordinale und nominale Daten berechnet werden. Für nominale Daten ist der Modus der einzige Kennwert, um mittleren Wert zu bestimmen. In R gibt es keine Funktion für Modus, man kann durch die Funktion table den Modalwert anzeigen lassen.\n\n\n\n\nshow the code\ncat(\"Frequence table for variable profession:\")\ntable(df$profession)      # Häufigkeitstablle\n# Modus-Maximaler Wert von der Freq.Table\ncat(\"Mode for variable profession - Max value of FreqTable: \", max(table(df$profession)))\ncat(\"\\n\\nFrequence table for variable tall:\")\ntable(df$tall)            # Häufigkeitstablle\ncat(\"Mode for variable tall - Max value of FreqTable: \", max(table(df$tall)))\n\n\n#&gt; Frequence table for variable profession:\n#&gt;    Doctor Pensioner Professor   Student   Teacher \n#&gt;         2         3         1         2         1 \n#&gt; Mode for variable profession - Max value of FreqTable:  3\n#&gt; \n#&gt; Frequence table for variable tall:\n#&gt; 1.68  1.7 1.72 1.73 1.75 1.77 1.78 \n#&gt;    1    1    1    2    2    1    1 \n#&gt; Mode for variable tall - Max value of FreqTable:  2\n\n\n\n\n\n\n\nshow the code\n#from statistics import mode\n# tall_med = r.df.tall.median(); inc_med = r.df[\"income\"].median()\n# print(f\"median of tall: {tall_med}\\nmean of income: {inc_med}\")\nfreq_prof = r.df[\"profession\"].value_counts()       # FreqTable for var profession\nmodi_prof = r.df[\"profession\"].value_counts().max() # Modi for var profession\nfreq_tall = r.df[\"tall\"].value_counts()             # FreqTable for var tall\nmodi_tall = r.df[\"tall\"].value_counts().max()       # Modi for var tall\nprint(\"Frequence table for variable profession:\")\nprint(freq_prof)\nprint(f\"&gt;&gt; Mode for variable profession - Max value of FreqTable:  {modi_prof}\")\nprint(\"\\nFrequence table for variable tall:\")\nprint(freq_tall)\nprint(f\"&gt;&gt; Mode for variable tall - Max value of FreqTable:  {modi_tall}\\n\")\n\n\n#&gt; Frequence table for variable profession:\n#&gt; profession\n#&gt; Pensioner    3\n#&gt; Doctor       2\n#&gt; Student      2\n#&gt; Teacher      1\n#&gt; Professor    1\n#&gt; Name: count, dtype: int64\n#&gt; &gt;&gt; Mode for variable profession - Max value of FreqTable:  3\n#&gt; \n#&gt; Frequence table for variable tall:\n#&gt; tall\n#&gt; 1.75    2\n#&gt; 1.73    2\n#&gt; 1.72    1\n#&gt; 1.68    1\n#&gt; 1.70    1\n#&gt; 1.78    1\n#&gt; 1.77    1\n#&gt; Name: count, dtype: int64\n#&gt; &gt;&gt; Mode for variable tall - Max value of FreqTable:  2\n\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nFür Modus gibt es nicht besonders viel zu interpretieren. Man könnte sagen, unter Befragten sind am meisten die Rentner oder die meisten haben die Größe 1.73 Meter."
  },
  {
    "objectID": "posts/mean/average_de.html#outliers-mean-vs-median",
    "href": "posts/mean/average_de.html#outliers-mean-vs-median",
    "title": "Estimates of Location\n in German",
    "section": "Outliers: Mean vs Median",
    "text": "Outliers: Mean vs Median\nEs gibt viele Fälle, wo der Median gegenüber Mean ein besseres Lagemaß darstellt, z.B. wenn es in dem Datensatz extreme Werte (Außreißer, engl. outlier) gibt. Bei Extremfällen wird der Median nicht von Ausreißern beeinflusst, die das Ergebnis verfälschen können. Wir erweitern das Beispiel von Umfrage, indem wir einen Ausreißer hinzufügen. Also, wir hätten noch einen Tiktoker oder Blogger befragt, der jung, groß ist und mehr als die anderen Befragten verdient. Da wird unser ursprünglicher Mittelwert ändern und höher ausfallen.\n\n\nshow the code\nv &lt;- data.frame(\"Bloger\", 19, 1.84, 5600); names(v) &lt;- names(df)\nextrem &lt;- rbind(df,v)\ncat(\"New df with outlier:\\n\")\ntail(extrem, n = 3)\n# Means\ncat(\"\\nWithout outlier:\\n\")\nglue::glue(\"income: mean - {round(mean(df$income),2)}, median - {median(df$income)}\\nage: mean - {mean(df$age)}, median - {median(df$age)}\")\n#glue::glue(\"Median income: {median(df$income)}\\nMedian age: {median(df$age)}\")\ncat(\"\\nWith outlier:\\n\")\nglue::glue(\"income: mean - {mean(extrem$income)}, median - {median(extrem$income)}\\nage:mean - {mean(extrem$age)}, median - {median(extrem$age)}\")\n#glue::glue(\"Median income: {median(extrem$income)}\\nMedian age: {median(extrem$age)}\")\n\n\n#&gt; New df with outlier:\n#&gt;    profession age tall income\n#&gt; 8     Student  25 1.77    950\n#&gt; 9   Pensioner  82 1.73   1100\n#&gt; 10     Bloger  19 1.84   5600\n#&gt; \n#&gt; Without outlier:\n#&gt; income: mean - 2027.78, median - 2050\n#&gt; age: mean - 51, median - 51\n#&gt; \n#&gt; With outlier:\n#&gt; income: mean - 2385, median - 2125\n#&gt; age:mean - 47.8, median - 49\n\n\nWie man oben sieht, durch Ausreißer, hat sich Mittelwert für Einkommen von 2.027,78 auf 2.385 gestiegen und alter von 51 auf 47.8 gesunken. Bei Median hat sich nicht so groß geändert, nämlich von 2.050 auf 2.125 gestiegen und für die Variable alter von 51 auf 49 gesunken."
  },
  {
    "objectID": "posts/mean/average_de.html#usage",
    "href": "posts/mean/average_de.html#usage",
    "title": "Estimates of Location\n in German",
    "section": "Usage",
    "text": "Usage\nDer mittlere Wert, wie wir gesehen haben auf unterschiedliche Weise ermittelt. Daher ist es sinnvoll, dass man sich überlegt, anhand den Gegebenheiten (wie z.B. Skalenneveau der Daten) welches Lagemaß am besten geeignet ist. Hier ist meine kurze Zusammenfassung:\n\nBei nominalen verwendet man den Modus, da andere Lagemaße dafür nicht geeignet sind.\nAnwenung von Median ist dann sinnvoll, wenn\n\ndie Daten ordinal sind.\nman weiß, dass man Außreßer hat.\n\nHat man quantitative Daten und symmetrische Verteilung vorligt, dann ist arithmetisches Mittel am besten geeignet."
  },
  {
    "objectID": "posts/mean/average_de.html#quantile-quartile",
    "href": "posts/mean/average_de.html#quantile-quartile",
    "title": "Estimates of Location\n in German",
    "section": "Quantile & Quartile",
    "text": "Quantile & Quartile\nIm Gegensaz zu Median, der die Daten in zwei gleiche Größe aufteilt, wird beim Quantil die sortierten Daten in unterschiedlich große Abschnitte, nämlich in \\(x_p\\)- Quantile oder x% (px100%)- Quantile aufgeteilt. Diese aufgeteilte abschnitte wären dann Quantile. Zum Beispiel 10%-Quantil oder 0,1-Quantil sagt aus, dass 10% der Daten in der verteilung liegt unter diesem Quantil, und der Rest (1-p, also 90%) liegt darüber. Teilt man die Daten in vier gleich große Teile, spricht man von speziellen Quantilen, nämlich von Quartilen.\n\n0,25/25%-Quantil = untere/erste Qauartil = Q1 - besagt, dass mindestens 25% der n-Daten kleiner oder gleich \\(x_{0,25}\\) sind.\n0,50/50%-Quantil = mittlere/zweite Qauartil = Q2 - gleich Median, mindestens 50% der n-Daten kleiner oder gleich \\(x_{0,50}\\) sind.\n0,75/75%-Quantil = obere/dritte Qauartil = Q3 - besagt, dass mindestens 75% der n-Daten kleiner oder gleich \\(x_{0,75}\\) sind.\n\nBei p = 0.1, 0.2, … spricht man von Dezilen, bei 0.01, 0.02, … von Perzentilen.\nAls Beispiel, stellen wir wieder vor, wir machen eine kleine Umfrage und fragen wir 10 Leute danach, wie lange sie am Tag ihre Zeit mit Handy verbringen. Sagen wir, die Antwort wie folgt (die Zahlen sind ausgedacht):\n\ntime &lt;- c(2.3, 1.7, 3, 2, 2.5, 3.2, 3.4, 1.5, 4, 1)\nsort(time)\n#&gt;  [1] 1.0 1.5 1.7 2.0 2.3 2.5 3.0 3.2 3.4 4.0\nmedian(time)\n#&gt; [1] 2.4\n\nUm die Quartile zu berechnen muss man zu erst die Anzahl der Datenmenge (n) mit p (0.25, 0.50, 0.75) multiplizieren \\(n*p\\). Je nachdem, ob das Ergebis ganzzahlig oder nicht ganzzahlig ist, muss man für die weitere Berechnung diese Formel benutzen: \\[x_p = \\begin{cases}\n\\frac{1}{n}(x_{(np)} + x_{(np+1)}) & if (p\\cdot n) &\\text{wholenumbered}\\\\\nx_{(|np|+1)} & if (p\\cdot n)&\\text{not wholenumbered}\\end{cases}\\] Hier ist nochmal die visuelle Darstellung zur Berechnung von Quartilen\n\n\n\nQuartile (25%, 50%, 75%)\n\n\nZum Glück muss man das ganze nicht händisch ausrechnen. Dafür gibt es in R die Funktion quantile(). Außerdem gibt die Funktion summary() (wie describe() in Python) den ersten Eindruck über den Daten mit den Lagemaßen wie Mean, Median, Q1, Q2 = Median, Q3, Min und Max.\n\n\n\n\nshow the code\ncat(\"Vector time: Qauartile: 25%-, 50%-, 75%- Quantile\\n\")\nquantile(time)        # Qauartile: 25%-, 50%-, 75%- Quantile\ncat(\"\\nVector time: 0,6- Quantil:\\n\")\nquantile(time, 0.60)  # 60%- Quantil\ncat(\"\\nVector time: Summary\\n\")\nsummary(time)         # Summary for variable income\ncat(\"\\nDescriptive measures with summary() for df:\\n\")\nsummary(df)\n# summary(df$age)     # Summary for selected variable (age)\n\n\n#&gt; Vector time: Qauartile: 25%-, 50%-, 75%- Quantile\n#&gt;    0%   25%   50%   75%  100% \n#&gt; 1.000 1.775 2.400 3.150 4.000 \n#&gt; \n#&gt; Vector time: 0,6- Quantil:\n#&gt; 60% \n#&gt; 2.7 \n#&gt; \n#&gt; Vector time: Summary\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;   1.000   1.775   2.400   2.460   3.150   4.000 \n#&gt; \n#&gt; Descriptive measures with summary() for df:\n#&gt;   profession             age          tall           income    \n#&gt;  Length:9           Min.   :21   Min.   :1.680   Min.   : 950  \n#&gt;  Class :character   1st Qu.:39   1st Qu.:1.720   1st Qu.:1100  \n#&gt;  Mode  :character   Median :51   Median :1.730   Median :2050  \n#&gt;                     Mean   :51   Mean   :1.734   Mean   :2028  \n#&gt;                     3rd Qu.:68   3rd Qu.:1.750   3rd Qu.:2600  \n#&gt;                     Max.   :82   Max.   :1.780   Max.   :3500\n\n\n\nIn Python gibt es auch die Funktion quantile(), man muss in Klammern die gewünschte(n) Quantil(e) in Listenformat eingeben. Die Funktion ist in Pandas oder NumPy.\n\n\n\n\nshow the code\nprint(\"Quartile for one variable (age):\")\nr.df[\"age\"].quantile([0.25,0.5,0.75])\nprint(\"\\nQuantile for more variables:\")\nr.df[[\"age\", \"income\", \"tall\"]].quantile([.1, .25, .5, .75], axis = 0)\n# with describe()\nprint(\"\\nDescriptive measures with discribe() for df:\")\n# r.df[[\"age\", \"tall\"]].describe() # for selected variables\nr.df.describe()\n\n\n#&gt; Quartile for one variable (age):\n#&gt; 0.25    39.0\n#&gt; 0.50    51.0\n#&gt; 0.75    68.0\n#&gt; Name: age, dtype: float64\n#&gt; \n#&gt; Quantile for more variables:\n#&gt;        age  income   tall\n#&gt; 0.10  24.2  1030.0  1.696\n#&gt; 0.25  39.0  1100.0  1.720\n#&gt; 0.50  51.0  2050.0  1.730\n#&gt; 0.75  68.0  2600.0  1.750\n#&gt; \n#&gt; Descriptive measures with discribe() for df:\n#&gt;              age      tall       income\n#&gt; count   9.000000  9.000000     9.000000\n#&gt; mean   51.000000  1.734444  2027.777778\n#&gt; std    20.621591  0.032059   986.189355\n#&gt; min    21.000000  1.680000   950.000000\n#&gt; 25%    39.000000  1.720000  1100.000000\n#&gt; 50%    51.000000  1.730000  2050.000000\n#&gt; 75%    68.000000  1.750000  2600.000000\n#&gt; max    82.000000  1.780000  3500.000000\n\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nQuantile oder Quartile gibt einen der ersten Überblick von der Datenverteilung. Dadurch kann man die Aussage treffen, dass eine bestimme Teil der gesamten Verteulung liegt unter oder über ein Quantil/Quartil. Nehmen wir das Beispiel von oben mit dem Handy.\n\n# How many time spent you for handy in a day?\nhandy &lt;- c(2.3, 1.7, 3, 2, 2.5, 3.2, 3.4, 1.5, 4, 1)\n# Quartile\nquantile(handy)\n#&gt;    0%   25%   50%   75%  100% \n#&gt; 1.000 1.775 2.400 3.150 4.000\n# 0.6 Quantil\nquantile(handy, 0.6)\n#&gt; 60% \n#&gt; 2.7\n\nDaraus kann man ablesen, dass drei Viertel (75%) der 10 Befragten verbringen ihre Zeit bis über 3 Stunden mit dem Handy, oder zweite Zahl, 60% der Befragten verschwinden bis 2.7 Stunden am Tag ihrer Zeit mit dem Handy."
  },
  {
    "objectID": "posts/mean/average_de.html#box-plot",
    "href": "posts/mean/average_de.html#box-plot",
    "title": "Estimates of Location\n in German",
    "section": "Box-Plot",
    "text": "Box-Plot\nBei der deskriptiven Analyse greift man oft zu graphischen Methoden, vor allem, wenn man eien ngroßen Datensatz hat, um ersten Eindruck über das Verhalten der Daten zu gewinnen. Box-Plot kommt am häufgsten zur Anwendung. Er setzt hauptsächlich 5 Kennzahlen (\\(x_{min}\\), \\(x_{0,25}\\), \\(x_{0,50}\\), \\(x_{0,75}\\), \\(x_{max}\\)) zusammen und stellt sie graphisch dar, zeigt auch Außreißer. Hier noch eine visuelle Darstellung:\n\n\n\nBox-Plot\n\n\nIn R gibt es Basefunktion boxplot() für Box-Plot. Außerdem kann man auch durch ggplot-Package erstellen. In Python auch diese Funktion in den Modeulen matplotlib oder seaborn.\n\n\n\n\n\n\n\nshow the code\nboxplot(extrem$age,\n  ylab = \"age\",\n  main = \"A sample Box-Plot\",\n  col= \"azure\")\nabline(h=mean(extrem$age), col=\"tomato1\", lwd=1, lty = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshow the code\nimport matplotlib.pyplot as plt\n\n# Create a boxplot for the desired column\nplt.boxplot(r.extrem[\"age\"], showmeans = True, meanline = True, showfliers = False)\n# Add labels and title\nplt.xlabel(\"\")\nplt.ylabel(\"age\")\nplt.title(\"A sample Box-Plot\")\n# Show the plot\nplt.show()\n\n\n#&gt; {'whiskers': [&lt;matplotlib.lines.Line2D object at 0x000001C5612BEBA0&gt;, &lt;matplotlib.lines.Line2D object at 0x000001C5612BEE40&gt;], 'caps': [&lt;matplotlib.lines.Line2D object at 0x000001C5612BF140&gt;, &lt;matplotlib.lines.Line2D object at 0x000001C5612BF440&gt;], 'boxes': [&lt;matplotlib.lines.Line2D object at 0x000001C5612BE2A0&gt;], 'medians': [&lt;matplotlib.lines.Line2D object at 0x000001C5612BF740&gt;], 'fliers': [], 'means': [&lt;matplotlib.lines.Line2D object at 0x000001C5612BFA10&gt;]}\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoxplot von oben ist für die Variable age (Alter) von der Befragten in dem Beispieldataframe erstellt. Wie man im Plot sieht, sind die Hälfte (50%) der Daten liegen in dam Box (IQR), 25% oberhalb und 25% unterhalb des Boxes (gestrichene Linien ausßerhalb des Boxes im Plot). Man kann es so interpretieren: 50% der Befragten/personen sind zwischen 25 und 68 Jahre alt. Durchgezogene Linie in der Mitte ist Median = 51, und die gestrichene Linie ist Mittelwert = ca.49 (kann man zu Plot hinzufügen, ist nicht Bestandteil von Box-Plot), also kann man daraus eine Schlussfolgerung ziehen, dass durchnittliches Alter von befragten Personen um die 50 Jahre ist. 25% der Personen sind unter 25 Jahren, 25% über 68 Jahre und 50%, wie gesagt, zwischen 25-68 Jahre alt."
  },
  {
    "objectID": "posts/loops/loops_uz.html#section",
    "href": "posts/loops/loops_uz.html#section",
    "title": "R & Python: Control flows and loops\n in Uzbek",
    "section": "",
    "text": "#&gt; [1] 1 2 3 4 5 6 7"
  },
  {
    "objectID": "posts/loops/loops_uz.html#section-1",
    "href": "posts/loops/loops_uz.html#section-1",
    "title": "R & Python: Control flows and loops\n in Uzbek",
    "section": "",
    "text": "#&gt; [1, 2, 3, 4, 5, 6, 7]"
  },
  {
    "objectID": "posts/loops/loops_uz.html#section-4",
    "href": "posts/loops/loops_uz.html#section-4",
    "title": "R & Python: Control flows and loops\n in Uzbek",
    "section": "",
    "text": "#&gt; Yigindi for- siklda:  15\n#&gt; Yigindi while- siklda:  15"
  },
  {
    "objectID": "posts/loops/loops_uz.html#section-5",
    "href": "posts/loops/loops_uz.html#section-5",
    "title": "R & Python: Control flows and loops\n in Uzbek",
    "section": "",
    "text": "#&gt; Yigindi for- siklda:  15\n#&gt; Yigindi while- siklda:  15"
  },
  {
    "objectID": "posts/loops/loops_uz.html#section-6",
    "href": "posts/loops/loops_uz.html#section-6",
    "title": "R & Python: Control flows and loops\n in Uzbek",
    "section": "",
    "text": "#&gt;  [1]  1  2  3  4 NA  6  7 NA NA 10\n#&gt; Yigindi by for:  33\n#&gt; Yigindi by while:  33"
  },
  {
    "objectID": "posts/loops/loops_uz.html#section-7",
    "href": "posts/loops/loops_uz.html#section-7",
    "title": "R & Python: Control flows and loops\n in Uzbek",
    "section": "",
    "text": "#&gt; [1, 2, 3, 4, None, 6, 7, None, None, 10]\n#&gt; Yigindi by for: 33\n#&gt; Yigindi by while: 33"
  },
  {
    "objectID": "posts/DataTypes/datatypes_uz.html",
    "href": "posts/DataTypes/datatypes_uz.html",
    "title": "R & Python: Types of Data\n in Uzbek",
    "section": "",
    "text": "Bu yerda ma’lumotlar turi (Data Type) hamda ular bilan R va Python da ishlash haqida o’qigan/o’rgangan/tushunganlarimni qisqacha tushuntirishga harakat qilaman, demak bu kontentni mani konspektim desayam boladi;). Avvalo, bu artikelning tuzilishi, Input(Codeblock), Output(Natija), eslatma va shunga o’hshash narsalar qanday kurinishdaligi haqida qisqacha tushunchadan boshlamoqchiman, yan’i yozilmaning tuzilishi,"
  },
  {
    "objectID": "posts/DataTypes/datatypes_uz.html#struktur",
    "href": "posts/DataTypes/datatypes_uz.html#struktur",
    "title": "R & Python: Types of Data\n in Uzbek",
    "section": "Struktur",
    "text": "Struktur\nR va Python uchun kiritilgan kod yonma-yon yoki tabsetlarda ko’rsatilishi mumkin. R-Sourse ochiq ko’k rangda va Python-Sourse sariq rangda ko’rsatiladi. Output natijalarining satrlari #&gt; belgisi bilan boshlanadi. Quyida R va Pythonda oddiy textni ekranga chiqarish kodining natijasi tabset sifadida ko’rsatilgan:\n\n\n\n\n\n\ncat(\"Hallo R Lover!\")\n#&gt; Hallo R Lover!\n\n\n\n\n\n\nprint(\"Hallo Python Lover!\")\n#&gt; Hallo Python Lover!\n\n\n\n\n\nMuhim narsalar rang bilan ajratib ko’rsatilgan va mos ravishda belgilangan:\n\n\n\n\n\n\nBatafsil ma’lumot uchun bu yerga bosing\n\n\n\n\n\nR va Pythondagi Input va Output taqqoslanmagan hollarda, masalan faqat o’zgaruvchi yaratilsa va uni ustida qandaydir amallar bajarilsa kod blocklari, ya’ni yuqorida aytilganidek, Pyton sariq va R och ko’k rangda alohida ranglarda ajratib kursatilmaydi:\n\n\nshow the code\n# Python engine\n# a va b o'zgaruvchilariga 42, 13 qiymatlarini biriktirish va ularni yigindisini hisoblash\na = 42\nb = 13\na + b\n\n\n#&gt; 55\n\n\nreticulate paketi yoki bibliotekasi Python da yaratilgan o’zgaruvchilar bilan R da ishlashni davom etishni taminlaydi, ya’ni man R da bu o’zgaruvchini boshqatdan yaratishim shart emas.\n\n\n\nshow the code\n# R engine\n# a und b o'zgaruvchilari qiymatlarini ko'paytirish \n# (R da, o'zgaruvchilar yuqorida Pythonda yaratilgan)\npy$a * py$b\n\n\n#&gt; [1] 546\n\n\n\n\n\n\nreticulate- paketi (R da malum funksiyalarga ega bo’lgan to’plam yoki biblioteka, Pythonda modul deyiladi), R va Python o’rtasida o’zaro ishlashni taminlaydigan vosita. Bu paket orqali Pythonni R da chaqirish, Python modullarini import qilish va R da Python-dan interaktiv foydalanish imkonini beradi. Buning uchun avval u ishhga tushirilishi kerak ya’ni yuklab olishi kerak. Masalan Pythonda pandas modulidan foydalanish uchun yuklash y’ani import qilisch kerak: mport pandas as pd, keyin esa modul ichidagi funksiyalarni ishlatisch imkoniyati boladi, R da ham shunday, ular Paket engl. Package deyiladi, ulardan foydalanish uchun, avval kerakli paketni yuklash kerak, R da esa masalan retikulate paketi library(retikulate) tarzda yuklanadi yani ishga tushiriladi, undan oldin esa paketni tushirib olish kerak: install.packages(\"reticulate\"). Ko’proq malumotni reticulate saytidan olish mumkin.\nBiror bir ifodaning tushunchasi yoki eslatmalar yon tomonda (o’ngda) izoh kabi keltiriladi. Masalan tekst davomida Variable ishlatilsa, u haqdagi ma’lumotni o’ng tomonda keltirilgan izohdan olish mumkin\n\n\nVariable - o’zgaruvchi bo’lib, bunda har xil ko’rinishdagi qiymatlarga, ma’lumotlarga, data frame yani jadvallarga berilgan nom nazarda tutiladi.\nYuqorida ta’kidlanganidek, biror narsa o’qish va o’rganish jarayonida o’zimga konspekt qilib olaman, shunda tushunishim osonrog’, bu mandagi ko’nikma, lekin hammada har xil. Bu yerda es shu jarayonda o’rgangan va tushunganlarimni baham ko’rmoqchiman va umid qilamanki, bu R yoki Python tillarini manga o’xshab boshidan o’rganmoqchi bo’lhganlar uchun qiziqarli va foydali boladi. Grammatik, imloviy va/yoki orfografik xatolar uchun oldindan uzr so’raladi;). Birinchi navbatda gap nima qadilagi to’g’risida ikki og’iz:"
  },
  {
    "objectID": "posts/DataTypes/datatypes_uz.html#what-is-it-about",
    "href": "posts/DataTypes/datatypes_uz.html#what-is-it-about",
    "title": "R & Python: Types of Data\n in Uzbek",
    "section": "What is it about",
    "text": "What is it about\nBu konspektda ma’lumotlarning turlari engl. Data Types, ularning nima uchun va qanday farqlanishi undan tashqari R va Pythonda ular bilan ishlash haqida gap boradi. Bunda e’tibor ko’proq muhim bolgan ya’ni kundalik hayotda biz ko’p duch keladigan, ishlatadigan va ko’pincha ular bilan shug’ullanishimiz mumkin bo’lgan ma’lumotlar turlarini yoritishga harakat qilinadi.Birinchi marta o’qib turgan yoki eshitgan kalajakda karak bolmasligi mumkin bolgan m’lumot turlariga fokus qaratilmaydi, masalan murakkab ma’lumot turlari (Complex Data Types) yoki shunga o’xshagan R-dagi Raw Data Types, Python-dagi Bytes Data Types. Aytilgandek fokus kerakli deb hisoblangan ma’lumot turlariga qaratiladi. \nAvvaliga shuni oydinlashtirmoqchimanki,"
  },
  {
    "objectID": "posts/DataTypes/datatypes_uz.html#what-the-data-types-are",
    "href": "posts/DataTypes/datatypes_uz.html#what-the-data-types-are",
    "title": "R & Python: Types of Data\n in Uzbek",
    "section": "What the data types are",
    "text": "What the data types are\nHar xil turdagi ma’lumotlar o’rtasida qanday farqlar mavjudligi va nima uchun ma’lumotlar turlari umuman farqlanishi haqida gap ketganda hayolimizga ma’lumotlar bilan ishlashda kundalik hayotda eng ko’p duch keladigan raqamlar va matnlar o’rtasidagi farq kelishi mumkin. Biz ma’lumotlar bilan ishlashni davom ettirmoqchi bo’lganda va ular ustida qandaydir amallarni bajarmoqchi, hisob-kitoblarni amalga oshirmoqchi bo’lganda, ular o’rtasidagi farqning ham muhimligi kelib chiqadi. Bunda ma’lumotlar o’zgaruvchilarda saqlanadi, shunda dastur ushbu ma’lumotlarga murojaat qilishi mumkin. Demak kompyuter ham birinchi navbatda tushunishi kerak, masalan ma’lumot raqammi yoki matnmi, ayniqsa u bu ma’lumot ustida qandaydir amal bajarishi kerak bolsa. Bu o’zgaruvchilarni biz R yoki Python-da objectlar deb atashimiz mumkin. Eslab qolish kerak bolgan muhim narsa shuki, aynan ushbu objektlarning turi ma’lumotlar qay tarzda saqlanishi va taqdim etilishini belgilaydi. Masalan, Integer turi butun son 42 ni misol uchun var_son sifatida saqlashga imkon beradi, va bu raqam var_son objekti bilan ifodalanadi. Ko’p dasturlash tillaridan farqli ravishda, Python va R o’zgaruvchi yaratislishida turni ko’rsatishni yoki aniq tur bilan belgilashni talab qilmaydi. Ob’ektni yaratishda ular avtomatik ravishda uning turini aniqlaydi. Shuning uchun ular OOP(Object Oriented Programming)-Dasturlash tillariga kiradilar.\n\n\nObject - R yoki Python-da biz ma’lumotlarni object sifatida saqlashimiz mumkin, masalan bir yoki bir necha qiymatlarni, jadvallarni, modellarni, biror bir amalning natijalarini, funksiyalar etc.\nUmid qilamanki, ma’lumotlar turi nima ekanligi haqida kengroq tasavvurga ega boldik . Quyida R va Python-da ko’p ishlatiladigan asosiy ma’lumot turlarini ko’rib chiqamiz:"
  },
  {
    "objectID": "posts/DataTypes/datatypes_uz.html#frequently-used-basic-data-types-in-python-and-r",
    "href": "posts/DataTypes/datatypes_uz.html#frequently-used-basic-data-types-in-python-and-r",
    "title": "R & Python: Types of Data\n in Uzbek",
    "section": "Frequently used basic data types in Python and R",
    "text": "Frequently used basic data types in Python and R\nYuqorida aytilganidek, ma’lumotlar R va Python-da ob’ektlar sifatida saqlanadi. Har bir ob’ekt shu nomga qiymat berish orqali nom oladi. Masalan, 42 raqamini var_numb nomi bilan yoki “world” so’zini var_txt nomi bilan saqlashim mumkin. R yoki Python masalan 42 ni son ya’ni raqam sifatida qabul qiladi. Ammo bu raqamni saqlashda Python va R boshqacha yo’l tutadi, R uni numeric ya’ni o’nlink son sifatida saqlaydi. Agar raqam butun son sifatida bo’lishi kerak bolsa, R ni bu sonni butun son sifatida saqlashiga majburlash kerak boladi. Python buning aksini qiladi, bu raqamni int sifatida saqlaydi, agar men uni o’nlik son (engl. float) sifatida xohlasam, turni belgilashim yoki shu turga aylantirishim kerak.\n\nBu erda R va Python-da umumiy asosiy ma’lumotlar turlarining umumiy ko’rinishi (Wouter van Atteveldt 2022 ga asoslangan) qisqcha jadval sifatida tasvirlangan:\n\n\n\n\n\n\n\n\n\n\n\nExample\n\nExample\nDescription\n\n\n\n\ninteger\n42L\nint\n42\nButun Sonlar\n\n\ndouble\n42.33\nfloat\n42.33\nReal/O’nlik sonlar\n\n\ncharacter\n“Text”\nstr\n“Text”\nSatrlar, Matnlar\n\n\nlogical\nTRUE, FALSE\nbool\nTrue, False\nMantiqiy qiymatlar\n\n\n\nR dasturida integer va double ko’pincha numeric sifatida umumlashtirilib tasvirlanadi. Jadvaldan kelib chiqb aytish mumkinki, bizga R va Pythond-da eng kup kerak boladigan va biz ular bilan eng kup ishlaydigan 3 ta asosiy ma’lumotlar turi bor. Bular: numeric - ya’ni butun (integer) va o’nlik (float) sonlaridan tashkil topgan raqamli ma’lumot turlari, logical - ya’ni mantiqiy ma’lumot turlari va textual - ya’ni matnli (strings) malumot turlaridan tashkil topgan.\nEndi alohida turlarni ko’rib chiqamiz.\n\ninteger/int\nInteger - butun sonni ifodalaydi masalan, 7, -7. R da orqasida L qoyilgan raqamlar butun son sifatida ifodalanadi. Nima uchun “L” turishi kerakligini man ham aniq bilmayman;). Ma’lumki R bu C dasturlash tiliga asoslanib yaratilgan dastur. C dasturlash tilida L long integer ma’nosini bergani uchun, R-da ham shunchaki o’zlashtirib olingan bolsa kerak. Python-da butun sonlar odatdagidek integer sifatida saqlanadi.\nri1 &lt;- 11L\nri2 &lt;- -12L\nri3 &lt;- 13.0\nri4 &lt;- \"123\"\nprint(class(ri1))\n#&gt; [1] \"integer\"\nprint(class(ri2))\n#&gt; [1] \"integer\"\nprint(class(ri3))\n#&gt; [1] \"numeric\"\nprint(class(ri4))\n#&gt; [1] \"character\"\npi1 = 11\npi2 = -12\npi3 = 13.0\npi4 = \"123\"\nprint(type(pi1))\n#&gt; &lt;class 'int'&gt;\nprint(type(pi2))\n#&gt; &lt;class 'int'&gt;\nprint(type(pi3))\n#&gt; &lt;class 'float'&gt;\nprint(type(pi4))\n#&gt; &lt;class 'str'&gt;\n\n\n\nR\n\n\nPython\n\n\n\nOb’ektning qaysi turiga ega ekanligini bilish yoki ko’rsatish uchun R-da class() va Pythonda type() funksiyasi mavjud. R dasturida obyektlar &lt;- va Python-da = bilan biriktiriladi. Umuman olganda, R = bilan ham ishlaydi, lekin strelka keng tarqalgan, va R-da strelka orqali biriktirish tavsiosa qilinadi.\n\n\n\n\n\n\nMore about assignment in R: &lt;- or = ?\n\n\n\n\n\nR-da ob’ektlarni &lt;- bilan belgilash odatiy hol, Pythonda esa = bilan biriktiriladi. Umuman olganda, R ham teng belgisi bilan ishlaydi. Lekin strelkani ishlatish afzalroq va hatodan holiroq boladi. Tenglik belgisi biror bir funksiya ichida biriktirish uchun ishlatiladi. Misol tariqasida kichkina demonstartsiya:\nBu yerda man 1 dan 15 gacha sonlarga ega bolgan vektorni vec variabliga biriktiraman va vektor (1 dan 15 gacha sonlar) yigindisini hisoblaayman:\n\nsum(vec = 1:15)\n\n#&gt; [1] 120\n\n\nAgar man vec ob’ektini yana chaqirsam hatolik yuz beradi, chunki bu objekt faqat funksiya ichida mavjud :\n\nprint(vec)\n\n#&gt; Error in eval(expr, envir, enclos): Objekt 'vec' nicht gefunden\n\n\nEndi shu narsani &lt;- bilan qilib koraman:\n\nsum(vec &lt;- 1:15)\n#&gt; [1] 120\nprint(vec)\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\nShuning uchun biriktirishda kopincha strelka tavsiya qilinadi va ishlatiladi. Koproq ma’lumotlarni buy erdan: Style guide von Hadley Wickham va bu yerdan: Google’s R Style Guide olish mumkin\n\n\n\n \\(~\\) – \\(~\\) Check for integer\nR-da is.integer() yoki inherits(object, \"type\") unksiyasidan foydalanib ob’ekt turini tekshirishingiz mumkin.\n\nR\n\n# Check in R if a number is integer\nis.integer(ri1)            # Is 11L integer?\n#&gt; [1] TRUE\ninherits(ri2, \"integer\")   # Is -12 integer?\n#&gt; [1] TRUE\nis.integer(ri3)            # Is 13.0 integer?\n#&gt; [1] FALSE\nis.integer(ri4)            # Is \"123\" integer?\n#&gt; [1] FALSE\ninherits(ri4, \"character\") # Is \"123\"character?\n#&gt; [1] TRUE\n\n\n– Convert to integer in R\nAytilganidek, sonlarni orqasida L bolmasa, R bu objektni numeric, ya’ni o’nlik son yoki float (yuqoridagi misoldagi ri3 ob’ektiga qarang). Men R buyurishim kerakki, u sonni butun son sifatida saqlasin. Buning uchun as.integer() funksiyasidan foydalanishim mumkin.\n\nR\n\n\nshow the code\n# Making R treat the object as an integer\nprint(class(ri3))              # Type of 13.0\nprint(class(ri4))              # Type of \"123\"\nprint(class(as.integer(ri3)))  # Forsing 13.0 to integer\nprint(class(as.integer(ri3)))  # Forsing \"123\" to integer\nprint(class(FALSE))            # Type of FALSE\nprint(class(TRUE))             # Type of True\nprint(as.integer(FALSE))       # FALSE as Integer\nprint(as.integer(TRUE))        # TRUE as Integer\n\n\n#&gt; [1] \"numeric\"\n#&gt; [1] \"character\"\n#&gt; [1] \"integer\"\n#&gt; [1] \"integer\"\n#&gt; [1] \"logical\"\n#&gt; [1] \"logical\"\n#&gt; [1] 0\n#&gt; [1] 1\n\n\n\n \\(~\\) – \\(~\\) Check for int\nPython-da tekshirishning bir necha yo’llari mavjud: isinstance(ob'ekt, turi) funksiyasi orqali huddi, R-dagi inherits(ob'ekt, \"\"turi\") kabi yoki ob’ekt turini ma’lumot turi bilan tenglashtirib ham tekshirish mumkin. , masalan, type(object) ==/is int(). Shuningdek, is_integer() funksiyasi ham mavjud. Bu funksiya float-o’nlik nnni int-butun songa tekshirishda ishlaydi, boshqa turlarida ishlamaydi. Boshqa turlari uchun manimcha sumpy moduli kerak. Uni ishlatib kurmadim, chunki yuqorida keltirilgan funksiyalarni uzi ham yetadi, boshqacha aytganda Rimga olib boradigan boshqa yo’llar ham bor. \n\nPython\n\n# Check in Python if a number is integer\nisinstance(pi1, int) # Is 11 integer?\n#&gt; True\ntype(pi2) == int     # Is -12 integer?\n#&gt; True\nisinstance(pi3, int) # Is 13.0 integer?\n#&gt; False\ntype(pi4) is int     # Is '123' integer?\n#&gt; False\n\n\n– Convert to int in Python\nPython raqamlarni butun sonlar sifatida saqlaydi. Agar men uni float ya’ni o’nlik son sifatida xohlasam, men float turiga o’tkazishim kerak. Agar menda matn(matn sifatida saqlangan sonlar), Float yoki Logical kabi turdagi ma’lumotlarim bo’lsa, men ob’ektni int() funksiyasiga o’tkazish orqali uni Python-da Integerga aylantira olaman.\n\nPython\n\n\nshow the code\n# Making Python treat the object as an integer\nprint(type(pi3))        # Type of 13.0\nprint(type(pi4))        # Type of \"123\"\nprint(type(int(pi3)))   # Forsing 13.0 to integer\nprint(type(int(pi3)))   # Forsing \"123\" to integer\nprint(type(False))      # Type of FALSE\nprint(type(True))       # Type of True\nprint(int(False))       # FALSE as Integer\nprint(int(True))        # TRUE as Integer\n\n\n#&gt; &lt;class 'float'&gt;\n#&gt; &lt;class 'str'&gt;\n#&gt; &lt;class 'int'&gt;\n#&gt; &lt;class 'int'&gt;\n#&gt; &lt;class 'bool'&gt;\n#&gt; &lt;class 'bool'&gt;\n#&gt; 0\n#&gt; 1\n\n\n\n\n\nnumeric/float\nFloat bu aniqligi uncha katta bo’lmagan suzuvchi nuqtali sonlar, Floating point numbers, Python-da float sifatida ifodalanadi. R odatda (orqasiga L harfi quo’yilmagan) sonlarni float () sifatida saqlaydi. Umuman olganda R sonlarni numeric sifatida ifodalaydi. Ular integer yoki float bo’lishi mumkin. Misol uchun R 12 sonini float, ya’ni 12.0 sifatida saqlaydi, class() funksiyasi bilan u turni numeric sifatida ifodalaydi. R-da ma’lumot turni tekshirish uchun ishlatilishi mumkin bo’lgan yana bir funksiya ham mavjud: typeof(). Bu funksiya orqali 12 sonini double sifatida kursatadi, ehtimol bu C dasturlash tilidan. O’ylaymanki, quyidagi misol nimani nazarda tutayotganimni aniqroq qiladi;).\n\n\nshow the code\n# class() und typeof()\nclass(10)    # numeric\ntypeof(10)   # double\nclass(10L)   # integer\ntypeof(10L)  # integer\nclass(10.0)  # numeric\ntypeof(10.0) # double\n\n\n#&gt; [1] \"numeric\"\n#&gt; [1] \"double\"\n#&gt; [1] \"integer\"\n#&gt; [1] \"integer\"\n#&gt; [1] \"numeric\"\n#&gt; [1] \"double\"\n\n\n– Check numeric/float\nBu yerda ham yuqorida Integer uchun keltirilgan funksiyalardan foydalanish mumkin, R-da is.-dan keyin integerni o’rniga numeric yoku double qoyiladi: is.numeric(*obj*) yoki is.double(*obj*) yoki inherits(*obj*, \"numeric\"). Python-da ham yuqoridagi integer uchun qollangan funksiyadan foydalanish mumkin: type(*obj*), yoki mantiqiy taqqoslash orqali: type(*obj*) is float yoki type(*obj*) == float yoki isinstance(*obj*, float).\nrf1 &lt;- 3.14\nrf2 &lt;- 17\nrf3 &lt;- 20L\nprint(class(rf2))  # class()-Type of 17\n#&gt; [1] \"numeric\"\nprint(class(rf3))  # class()-Type of 20L\n#&gt; [1] \"integer\"\nprint(typeof(rf2)) # typeof()-Type of 17\n#&gt; [1] \"double\"\nprint(typeof(rf3)) # typeof()-Type of 20L\n#&gt; [1] \"integer\"\nis.numeric(rf1)    # Is 3.14 numeric?\n#&gt; [1] TRUE\nis.double(rf2)     # Is 17 double?\n#&gt; [1] TRUE\nis.numeric(rf3)    # Is 20L numeric?\n#&gt; [1] TRUE\nis.integer(rf3)    # Is 20L integer?\n#&gt; [1] TRUE\npf1 = 3.14\npf2 = 17\npf3 = 20\nprint(type(pf1))      # Type of 3.14\n#&gt; &lt;class 'float'&gt;\nprint(type(pf2))      # Type of 17\n#&gt; &lt;class 'int'&gt;\nprint(type(pf3))      # Type of 20\n#&gt; &lt;class 'int'&gt;\nisinstance(pf1, float)# Is 3.14 float?\n#&gt; True\nisinstance(pf1, int)  # Is 3.14 int?\n#&gt; False\ntype(pf2) is float    # Is 17 float?\n#&gt; False\ntype(pf3) == float    # Is 20 float?\n#&gt; False\nisinstance(pf2, float)# Is 17 float?\n#&gt; False\n\n\n\nR\n\n\nPython\n\n\n\n– Convert to numeric/float\nO’nlik sonlar, ya’ni R-da numeric yoki float hosil qilish uchun yuqoridagi as. funksiyani bu yerda ham qollaymiz, buning uchun funksiyani shunday yozamiz: as.numeric(*obj*) oder as.double(*obj*).\n\nR\n\n\nshow the code\n# Making R treat the object as an integer\nprint(class(rf2))              # Type of 17\nprint(class(rf3))              # Type of 20L\nprint(class(as.numeric(rf2)))  # Forsing 17 to nomeric\nprint(class(as.double(rf3)))   # Forsing 20L to nomeric\nprint(as.numeric(FALSE))       # FALSE as numeric\nprint(as.double(TRUE))         # TRUE as numeric\n\n\n#&gt; [1] \"numeric\"\n#&gt; [1] \"integer\"\n#&gt; [1] \"numeric\"\n#&gt; [1] \"numeric\"\n#&gt; [1] 0\n#&gt; [1] 1\n\n\n\nPythonda buni float(*obj*) funksiyasi yordamida amalga oshirishim mumkin.\n\nPython\n\n\nshow the code\n# Making Python treat the object as an integer\nprint(type(pf2))        # Type of 17\nprint(type(pf3))        # Type of 20\nprint(type(float(pf2))) # Forsing 17 to float\nprint(type(float(pf3))) # Forsing 20 to float\nprint(float(False))     # FALSE as float\nprint(float(True))      # TRUE as float\n\n\n#&gt; &lt;class 'int'&gt;\n#&gt; &lt;class 'int'&gt;\n#&gt; &lt;class 'float'&gt;\n#&gt; &lt;class 'float'&gt;\n#&gt; 0.0\n#&gt; 1.0\n\n\n\n\n\ncharacter/str\nNomidan ko’rinib turibdiki, bunday ma’lumotlar belgilar, harflarni, satr va matnlarni o’z ichiga olgan ma’lumot turlaridir. R-da ular character va Python-da str sifatida tavsiflanadi. Amalda, matnli ma’lumotlar raqamli ma’lumotlar ya’ni sonlar kabi ko’p qo’llaniladigan ma’lumot turlaridandir. Masalan, tahlil qilinadigan ma’lumotlar to’plamida kategorik o’zgaruvchilar misol uchun “erkak’ yoki”ayol” bo’lishi mumkin va hokozo\n\nWie der Name schon sagt, solche Daten sind Strings, die Zeichen, Buchstaben enthalten. In R werden sie als character und in Python als str charakteresiert. Mit Strings hat man in der Praxis auch wie mit numerischen Daten häufig zu tun. Beispielweise können im zu analysierenden Datensatz auch kategoriale Variablen: “männlich”, “weiblich” vorhanden sein usw.\nSatrlar yoki matn ko’rinishidagi ma’lumotlar R va Python-da qo’sh apostrof ichida 'matn' yoki qo’shtirnoq ichida \"matn\" ko’rsatilishi mumkin. Satr uzunligi funksiyasi R uchun: nchar() va Python len() uchun. R-da stringr paketidan str_lenght(\"matn\") funksiyasini ham ishlatisch mumkin.\n\n\n\n\n\n\n# Examples for Characters\nrt1 &lt;- \"123\"\nrt2 &lt;- \"Hello\" \nrt3 &lt;- \"World\"\nglue::glue(\"Class of rt1: {class(rt1)}\")\n# Adding Strings \nglue::glue(\"glue() funksiyasi orqali: {rt2} {rt3}\")\npaste(\"paste() funksiyasi orqali:\", rt2, rt3, sep = \" \")\n# Compare Strings\nrt2 == \"Hello\"\nrt2 == \"HELLO\"\nrt1 == 123\n# Length of String\nglue(\"\\\"123\\\" satrining uzunligi: {nchar(rt1)}\")\nglue(\"\\\"Hello\\\" satrining uzunligi: {nchar(rt2)}\")\nlength(rt1)\n\n#&gt; Class of rt1: character\n#&gt; glue() funksiyasi orqali: Hello World\n#&gt; [1] \"paste() funksiyasi orqali: Hello World\"\n#&gt; [1] TRUE\n#&gt; [1] FALSE\n#&gt; [1] TRUE\n#&gt; \"123\" satrining uzunligi: 3\n#&gt; \"Hello\" satrining uzunligi: 5\n#&gt; [1] 1\n\n\n\nMatnlarni bir-biriga qo’shish yoki matnlarni sonla bilan kopaytirish R uchun qiyinchilik tugdiradi\n\n\n\n\n\n\nMore about string operations in R\n\n\n\n\n\nAgar biz ikkita matnni birga qo’shmoqchi bo’lsak yoki satr yoki matnni raqamga ko’paytirmoqchi bo’lsak, R hatolik qaytaradi. Ehtimol, bunga imkon beradigan ba’zi paketlar bordir, qarab/izlab korish kerak. Shunday qilib, Python-da ikkita matnni bir biriga qoshish yoki matnni songa kopaytirish ishlagani kabi, R da bu ishlamaydi. glue paketidagi glue(*obj*) funksiyasi yoki paste funksiyasi orqali matnlarni bir biriga qoshib korsatish mumkin. Bu funksiya stringr paketida ham mavjud va uni quyidagicha ishlatish mumkin: stringr::str_glue(). glue(\"The value of text is {text}) funksiyasi Python-dagi print(f\"The value of text is {text}\") funksiyaga o’xshaydi.\n\n# R engine\n# Satrlarni bir biriga qo'shish yoki ularni songa ko'paytirish\n# Ishlamaydi!\nsatr1 &lt;- \"Assalomu\"\nsatr2 &lt;- \"Alaykum\"\nsatr1 + satr2\n#&gt; Error in satr1 + satr2: nicht-numerisches Argument für binären Operator\nsatr1 * 3\n#&gt; Error in satr1 * 3: nicht-numerisches Argument für binären Operator\n\n\n\n\n\n\n\n\n# Python engine\n# Examples for Characters\npt1 = \"123\"\npt2 = \"Hello\" \npt3 = \"world\"\nprint(f\"Type of pt1: {type(pt1)}\")\n# Adding Strings / matnlarni qoshish\nprint(pt2 + \" \" + pt3) # or\nprint(f\"{pt2} {pt3}\")\n# Multiply a string by 3 / matnlarni songa kopaytirish\npt3*3\n# Compare\npt2 == \"Hello\"\npt2 == \"HELLO\"\npt1 == 123\n# Length of String\nprint(f\"Länge von \\\"123\\\": {len(pt1)}\")\nprint(f\"Länge von \\\"Hallo\\\": {len(pt2)}\")\n\n#&gt; Type of pt1: &lt;class 'str'&gt;\n#&gt; Hello world\n#&gt; Hello world\n#&gt; 'worldworldworld'\n#&gt; True\n#&gt; False\n#&gt; False\n#&gt; Länge von \"123\": 3\n#&gt; Länge von \"Hallo\": 5\n\n\n\n\n\n\nStrings - bu keng mavzu. Bu erda faqat ma’lumotlar turi bilan bog’liq tomonlari qaraldi. Balki alohida content ham bo’lar .\n\n\nlogical/bool\nMantiqiy turdagi ob’ektlar TRUE/FALSE yoki 1/0 qiymatlarini olishi mumkin. Bular R da logical va Pythonda bool sifatida saqlanadi. Ofodalash tarsi ham R va Python-da farq qiladi: R-da ular katta harflarda yoziladi: TRUE/FALSE, Python-da esa birinchisi katta va qolganlari kichik harflarda boladi:True/False.\n# R engine\nrt &lt;- TRUE\nrf &lt;- FALSE\nclass(rt)        # Type of TRUE\n#&gt; [1] \"logical\"\nclass(rf)        # Type of FALSE\n#&gt; [1] \"logical\"\nis.logical(rt)   # Is TRUE logical\n#&gt; [1] TRUE\nas.character(rt) # TRUE as character\n#&gt; [1] \"TRUE\"\nas.character(rf) # FALSE as character\n#&gt; [1] \"FALSE\"\nas.integer(rt)   # TRUE as integer\n#&gt; [1] 1\nas.integer(rf)   # FALSE as integer\n#&gt; [1] 0\nrt & rf          # rt AND rf\n#&gt; [1] FALSE\nrt | rf          # rt OR rf\n#&gt; [1] TRUE\n!rt              # Is not TRUE\n#&gt; [1] FALSE\n# Python engine\npt = True\npf = False\ntype(pt)  # Type of True\n#&gt; &lt;class 'bool'&gt;\ntype(pf)  # Type of False\n#&gt; &lt;class 'bool'&gt;\ntype(pt) is bool # Is bool\n#&gt; True\nstr(pt)   # True as String\n#&gt; 'True'\nstr(pf)   # False as String\n#&gt; 'False'\nint(pt)   # True as Integer\n#&gt; 1\nint(pf)   # False as Integer\n#&gt; 0\npt and pf # pt AND pf\n#&gt; False\npt or pf  # pt OR pf\n#&gt; True\nnot pt    # Is not True\n#&gt; False\n\n\n\nR\n\n\nPython\n\n\n\nKimgadir qayerdadir qaysidir manoda qanchadir yordami tegkan bo’lsa, bundan faqat xursand bolaman. Keyingi mavzu ma’lumotlar tuzilmasi haqida bo’ladi."
  },
  {
    "objectID": "posts/DataStructures/datastructures_uz.html#data-structures-in-r",
    "href": "posts/DataStructures/datastructures_uz.html#data-structures-in-r",
    "title": "R & Python: Data Structures\n in Uzbek",
    "section": "Data Structures in R",
    "text": "Data Structures in R\nR dagi muhim ma’lumotlar tuzilmalari ikkita asosiy tamopyil bilan aniqlanishi mumkin. Biri bu o’lcham (dimension), ya’ni objectning qancha o’lchamga ega ekanligi bilan: bitta o’lchovli (vevtor), ikkita o’lchovli (matritsa) va undan ko’p (massivlar). Yana biri bu ularning farqlanish xususiyatlari, ya’ni biror objectning elementlari bir xil - masalan faqar matn yoki faqat sonlaR dan iborat, yoki har xil - son va matnlaR dan iborat. Ushbu xususiyatlarga asoslanib, markaziy object turlarini R da quyidagicha umumlashtirish mumkin (Sauer 2019):\n\n\n\nDimension\nHomogen\nHeterogen\n\n\n\n\n1d\nVector\nList\n\n\n2d\nMatrix\nDataframe\n\n\nnd\nArray\n\n\n\n\nVektorlar R dagi eng muhim ma’lumotlar tuzilmalaridan biri bo’lib, R objectlarida markaziy elementni ifodalaydi: To’rt turdagi atomik yoki sof vektorlar mavjud: Logical, Integer, Double und Character (matndan iborat). R da integer va double turidagi ma’lumotlar numeric sifatida umumlashtirilgan, yani ikkovi ham numeric sifatida ko’rsatiladi. Quyida (Wickham 2019)ga ko’ra atomar ya’ni sof vektorlarining umumiy ko’rinishi keltirilgan.\n\n\n\nAtomar Vectors"
  },
  {
    "objectID": "posts/DataStructures/datastructures_uz.html#data-structures-in-python",
    "href": "posts/DataStructures/datastructures_uz.html#data-structures-in-python",
    "title": "R & Python: Data Structures\n in Uzbek",
    "section": "Data Structures in Python",
    "text": "Data Structures in Python\nDemak, ma’lumotlar tuzilmalari ma’lumotlarni turlari bo’yicha tartibga soluvchi va guruhlaydigan “konteynerlar” sifatida qaralsa boladi. Python dagi asosiy Python ma’lumotlar tuzilmalari ro’yxat (list), to’plam (set), kortej (tuple) va lug’at (dict) larni o’z ichiga oladi. Bu ma’lumotlar tuzilmalari Built-in Data Structure deb ham ataladi va ularning har biri o’ziga xos xususiyatga ega.  - lists  - ditionaries  - tuples  - sets\nBundan tashqari Arrays va Dataframes(Jadvallar) mavjud bo’lib, ular qator va ustunlarga ega. Bunga o’xshash misol qilib, Excel-jadvallari yoki ma’lumotlar bazasini keltirisch mumkin.  - arrays from NumPy (Numerical Python)  - DataFrame from Pandas\nQuyida malumotlar tuzilmasini R va Python da umumlashtirilgan holatda vizual tarzda grafikda tasvirlangani keltirilgan\n\n\n\n\nManbaa: Internet \n\n\nManbaa: Internet"
  },
  {
    "objectID": "posts/DataStructures/datastructures_uz.html#vector-in-r-and-arrays-series-in-python",
    "href": "posts/DataStructures/datastructures_uz.html#vector-in-r-and-arrays-series-in-python",
    "title": "R & Python: Data Structures\n in Uzbek",
    "section": "vector in R and arrays & Series in Python",
    "text": "vector in R and arrays & Series in Python\nR dagi vektorlar bi xil tudagi ma’lumotlarga ega bo’lgan bir o’lchovli ma’lumot tizilmalaridir. Bu belgilari bilan vektorlar Python dagi 1d-NumPy-Arrays va Pandas-Series lar bilan umumiy xususiyatga ega. R dagi vektorlar ham Python dagi ro’yxatga (list) o’xshaydi, lekin faqat Python ro’yxatidagi ma’lumotlar bir xil turga ega bo’lsa.\n\n\nCreating\n\n\n\n\n– with c() (like [] in Python)\n\n\n\nshow the code\nv1 &lt;- c(1, 7, 2, 4, 5, 8, 2, 9); v1\nclass(v1)\nv2 &lt;- c(\"a\", \"b\", \"c\", \"z\", \"f\"); v2\nclass(v2)\nv3 &lt;- vector(\"logical\", 5); v3\nclass(v3)\nv4 &lt;- numeric(7); v4\nclass(v4)\n\n\n#&gt; [1] 1 7 2 4 5 8 2 9\n#&gt; [1] \"numeric\"\n#&gt; [1] \"a\" \"b\" \"c\" \"z\" \"f\"\n#&gt; [1] \"character\"\n#&gt; [1] FALSE FALSE FALSE FALSE FALSE\n#&gt; [1] \"logical\"\n#&gt; [1] 0 0 0 0 0 0 0\n#&gt; [1] \"numeric\"\n\n\n\n– with seq(from, to, by) (like range(from, to, by) in Python or arange() from NumPy)\n\n\n\nshow the code\nseq1 &lt;- 2:9; seq1                            # from 2 to 9\nseq2 &lt;- (1:5); seq2                          # from 1 to 5\nseq3 &lt;- seq(from = 3, to = 10, by = 3); seq3 # step = 3\nseq4 &lt;- seq(3, 10, length.out = 5); seq4     # count = 5\nseq5 &lt;- seq(11, 17, along.with = seq4); seq5 # seq of same length with seq4\n\n\n#&gt; [1] 2 3 4 5 6 7 8 9\n#&gt; [1] 1 2 3 4 5\n#&gt; [1] 3 6 9\n#&gt; [1]  3.00  4.75  6.50  8.25 10.00\n#&gt; [1] 11.0 12.5 14.0 15.5 17.0\n\n\n\n– with rep() (like np.repeat() from NumPy or pd.rep() from Pandas)\n\n\n\nshow the code\nrep1 &lt;- rep(1:3, times = 3); rep1 # repeating seq 3 times\nrep2 &lt;- rep(1:3, each = 3); rep2  # repeating each obj 3 times\n\n\n#&gt; [1] 1 2 3 1 2 3 1 2 3\n#&gt; [1] 1 1 1 2 2 2 3 3 3\n\n\n\n– with sample() or runif() (like random.choice() from NumPy)\n\n\n\nshow the code\nsmp1 &lt;- sample(seq(10), size = 5, replace = FALSE); smp1\nvec &lt;- c(\"negative\",\"neutral\", \"positive\")\nsmp2 &lt;- sample(vec, size = 5, replace = TRUE); smp2\n# vector with 5 elements:\nrun1 &lt;- runif(5); run1\nrun2 &lt;- runif(3, min = 1, max = 10); run2\nrun3 &lt;- floor(runif(15, min=1, max=100)); run3\n# normal distribution\nrn &lt;- rnorm(5); rn\n\n\n#&gt; [1] 5 9 3 7 4\n#&gt; [1] \"positive\" \"negative\" \"neutral\"  \"neutral\"  \"positive\"\n#&gt; [1] 0.3537153 0.2050273 0.8014935 0.6748722 0.4180435\n#&gt; [1] 5.482090 8.513366 3.509195\n#&gt;  [1] 36 86 69 80 25 48 54 32 70 72 39  3  2 28 64\n#&gt; [1]  1.3260384 -0.8598712  0.1403112  1.2711931  0.2855230\n\n\n\n\n\n– with [] like c() in R\n\n\n\nshow the code\nimport numpy as np\n\nv1_p = [1, 7, 2, 4, 5, 8, 2, 9]; print(v1_p)\ntype(v1_p)\nv2_p = np.full((5), False); print(v2_p)\ntype(v2_p)\nv3_p = np.zeros((7), int); print(v3_p)\ntype(v3_p)\nv4_p = np.ones((7), int); print(v4_p) # rep(1,7) in R\ntype(v4_p)\n\n\n#&gt; [1, 7, 2, 4, 5, 8, 2, 9]\n#&gt; &lt;class 'list'&gt;\n#&gt; [False False False False False]\n#&gt; &lt;class 'numpy.ndarray'&gt;\n#&gt; [0 0 0 0 0 0 0]\n#&gt; &lt;class 'numpy.ndarray'&gt;\n#&gt; [1 1 1 1 1 1 1]\n#&gt; &lt;class 'numpy.ndarray'&gt;\n\n\n\n– with arange() like seq() in R\n\n\n\nshow the code\nar1 = [x for x in range(5)]; ar1                # pythonlist\nar2 = [x for x in range(2,10)]; ar2             # python list\nar3 = np.arange(2,10); ar3                      # NumPy 1d array\nar4 = np.arange(3, 10, 3); ar4                  # step = 3 \nar5 = np.linspace(3, 10, 5, retstep = True);ar5 # count = 5, with step = 1.75    \n\n\n#&gt; [0, 1, 2, 3, 4]\n#&gt; [2, 3, 4, 5, 6, 7, 8, 9]\n#&gt; array([2, 3, 4, 5, 6, 7, 8, 9])\n#&gt; array([3, 6, 9])\n#&gt; (array([ 3.  ,  4.75,  6.5 ,  8.25, 10.  ]), 1.75)\n\n\n\n– with np.repeat() or pd.Series.repeat() like rep() in R\n\n\n\nshow the code\nimport pandas as pd\n\nrep1 =  list(range(1,4))*3; rep1             # Python\nrep2 = np.tile(np.arange(1,4), 3); rep2      # NumPy: repeating seq 3 times\nrep3 = np.repeat(np.arange(1,4), 3); rep3    # NumPy: repeating each obj 3 times\nrep4 = pd.Series(range(1,4)).repeat(2); rep4 # Pandas Series: repeating each obj 2 times\n\n\n#&gt; [1, 2, 3, 1, 2, 3, 1, 2, 3]\n#&gt; array([1, 2, 3, 1, 2, 3, 1, 2, 3])\n#&gt; array([1, 1, 1, 2, 2, 2, 3, 3, 3])\n#&gt; 0    1\n#&gt; 0    1\n#&gt; 1    2\n#&gt; 1    2\n#&gt; 2    3\n#&gt; 2    3\n#&gt; dtype: int64\n\n\n\n– with random() like sample() or runif() in R\n\n\n\nshow the code\nfrom numpy import random\nlis = [\"negative\",\"neutral\", \"positive\"]\nrd1 = random.choice(lis, size=5, replace = True); print(rd1)\nrd2 = random.rand(5); rd2                 # 5 random numbers\nrd3 = random.randint(100, size=(5)); rd3  # integer random numbers from 0 to 100\nrd4 = random.randn(4); rd4                # standard normal distribution\n\n\n#&gt; ['neutral' 'negative' 'positive' 'neutral' 'negative']\n#&gt; array([0.25204178, 0.6272701 , 0.36329345, 0.51333149, 0.44805849])\n#&gt; array([43, 22, 41, 23, 58])\n#&gt; array([1.16180671, 0.53726394, 0.22335244, 1.64363635])\n\n\n\n\n\n\n\n\nSlicing\nVektorlar, ro’yxatlar va bir o’lchovli massivlarga qo’llanilishi mumkin bo’lgan eng muhim foydali operatsiyalaR dan biri indekslashdir. Bunda biz alohida elementlarni yoki elementlaR dan iborat kichik to’plamlarini joylashuvi (indeks) bo’yicha ajratib olishimiz mumkin.\n\n\n\nBirinchi Elementning indksi R da – 1, Python da – 0, ya’ni Elementlar joylashuvi R da biR dan, Python da esa noldan boshlanadi. Vektor, ro’yxat yoki 1d - massivning uzunligini R da length(Obj) funksiyasi va Python da len(Obj) funksiyasi yoR damida aniqlash mumkin.\n\n\n\n\n\nIndexes in R and Python\n\n\n\n\n\n# In Python\nlst = [1,3,5,7]\nlst[0]     # first element\nlst[1]     # second element\nlst[-1]    # last element\nlst[::-1]  # backward\n# In R\n# Used Variable lst created in Python Chunk\npy$lst[1]                # first element\npy$lst[2]                # second element\npy$lst[[length(py$lst)]] # last element\nrev(py$lst)              # backward\n\n\n\n\n#&gt; 1\n#&gt; 3\n#&gt; 7\n#&gt; [7, 5, 3, 1]\n\n\n\n\n#&gt; [1] 1\n#&gt; [1] 3\n#&gt; [1] 7\n#&gt; [1] 7 5 3 1\n\n\n\n\nQuyida to’plamlar va mantiqiy indekslashga yana misollar keltirilgan. Mantiqiy indekslashda mantiqiy qiymati TRUE bo’lgan elementlar qaytariladi.\n\n\n\n\n\n\n\nshow the code\nage &lt;- c(18, 26, 32, 41, 55, 22, 35, 37, 20, 25)\nage[1:5]             # from first until fifth element\nage[3:7]             # from third until seventh element\nage[5:length(age)]   # from fifth until last element\nage[c(2,5,7)]        # second, fifth and seventh element\nage &lt; 30             # logic \nage[age &lt; 30]        # age under 30\nage[which(age &lt; 30)] # with which()\n\n\n#&gt; [1] 18 26 32 41 55\n#&gt; [1] 32 41 55 22 35\n#&gt; [1] 55 22 35 37 20 25\n#&gt; [1] 26 55 35\n#&gt;  [1]  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE\n#&gt; [1] 18 26 22 20 25\n#&gt; [1] 18 26 22 20 25\n\n\n\nElementlarga nomi bilan ham murojaat qilinishimiz mumkin, lekin faqat ular nomlangan bo’lsa (Chunki R da vektor yoki list elementlari nomlanishi yoki nomlanmasligiyam mumin). Buni Pandas-Series da indeks nomi bo‘yicha elementlarni tanlash orqali ham qilish mumkin:\n\n\n\nshow the code\nnote &lt;- c(\"best\" = 5, \"medium\" = 4, \"good\"= 3, \"bad\" = 2); note\nnote[\"medium\"]         # by indexname\nnote[c(\"good\", \"bad\")] # by indexname multiple elements\nnote[3]                # by index\n\n\n#&gt;   best medium   good    bad \n#&gt;      5      4      3      2 \n#&gt; medium \n#&gt;      4 \n#&gt; good  bad \n#&gt;    3    2 \n#&gt; good \n#&gt;    3\n\n\n\n\n\n\n\n\nshow the code\nage = np.array(r.age)    # create array from r vector age\nage[:5]                  # from first until fifth element\nage[2:7]                 # from third until seventh element\nage[4:]                  # from fifth until last element\n[age[2], age[5], age[7]] # second, fifth and seventh elem\nage &lt; 30                 # logic \nage[age &lt; 30]            # age under 30\nage[np.where(age&lt;30)]    # with np.where()\n\n\n#&gt; array([18., 26., 32., 41., 55.])\n#&gt; array([32., 41., 55., 22., 35.])\n#&gt; array([55., 22., 35., 37., 20., 25.])\n#&gt; [32.0, 22.0, 37.0]\n#&gt; array([ True,  True, False, False, False,  True, False, False,  True,\n#&gt;         True])\n#&gt; array([18., 26., 22., 20., 25.])\n#&gt; array([18., 26., 22., 20., 25.])\n\n\n\nPandas-Series da ham elementlarga ularning joylashuvi yoki nomi bilan murojaat qilish mumkin, R dagi named vectordagi kabi.\n\n\n\nshow the code\nnote = pd.Series(range(2,6), index = [\"bad\", \"good\", \"medium\", \"best\"]); note\nnote[\"good\"]  # by indexname\nnote[[\"best\", \"bad\"]] # by indexname multiple elements\nnote.iloc[2]          # by index\nnote.iloc[[1,2,3]]    # by index multiple elements\n\n\n#&gt; bad       2\n#&gt; good      3\n#&gt; medium    4\n#&gt; best      5\n#&gt; dtype: int64\n#&gt; 3\n#&gt; best    5\n#&gt; bad     2\n#&gt; dtype: int64\n#&gt; 4\n#&gt; good      3\n#&gt; medium    4\n#&gt; best      5\n#&gt; dtype: int64"
  },
  {
    "objectID": "posts/DataStructures/datastructures_uz.html#matrix-in-r-and-2d-array-in-python",
    "href": "posts/DataStructures/datastructures_uz.html#matrix-in-r-and-2d-array-in-python",
    "title": "R & Python: Data Structures\n in Uzbek",
    "section": "matrix in R and 2d-Array in Python",
    "text": "matrix in R and 2d-Array in Python\nR da matrisalar bu ikki o’lchamli vektorlar bo’lib, sonlaR dan iborat va shu bilan birga bir xil turdagi elementlaR dan tashkil topgan. Ularni matrix(data, nrow, ncol) funksiyasi yoR damida yaratish mumkin. Python da matritsalar yaratish uchun aniq funktsiya yo’q. Python dagi matritsalar asosan 2d-NumPy -massivlaridir. Elementlarni ajratish uchun vektorlar yoki 1d-NumPy-massivlari ga qo’llanadiga metodlar qo’llaniladi (oldingi bob), demak qator indeksiga qo’shimcha ravishda ustun indeksi ham to’rtburchakli qavsga [] kiritiladi.\n\n\n\n\n\n\n\nshow the code\nmatrix_c &lt;- matrix(seq(12), nrow = 3, ncol = 4, byrow = FALSE )\ncat(\"3x4-Matix filling by columns (matrix_c):\\n\");print(matrix_c)\n# Dimension of matrix_c\nglue(\"Dimension of matrix_c: {dim(matrix_c)}\")\n# Counts of rows & Cols from matrix_c\nglue(\"Shape of matrix_c: ({nrow(matrix_c)}, {ncol(matrix_c)})\")\nmatrix_r &lt;- matrix(seq(12), nrow = 4, ncol = 3, byrow = TRUE )\ncat(\"\\n4x3-Matix filling by rows (matrix_r):\\n\");print(matrix_r)\n# Dimension of matrix_r\nglue(\"Dimension of matrix_r: {dim(matrix_r)}\")\n# Counts of rows & Cols from matrix_r\nglue(\"Shape of matrix_r: ({nrow(matrix_r)}, {ncol(matrix_r)})\")\n#\ncat(\"\\nSlicing:\\n\")\nmatrix_c[2,3]        # row 2, col 3\nmatrix_c[,4]         # column 4\nmatrix_c[, c(2, 4)]  # columns 2 and 4\nmatrix_r[2,]         # row 2\n# Name cols & rows\ncat('\\nname the columns and rows of matrix \"matrix_r\":\\n')\ncolnames(matrix_r) &lt;- c(\"col1\", \"col2\", \"col3\")\nrownames(matrix_r) &lt;- c(\"row1\", \"row2\", \"row3\", \"row4\")\nmatrix_r\n\n\n#&gt; 3x4-Matix filling by columns (matrix_c):\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    4    7   10\n#&gt; [2,]    2    5    8   11\n#&gt; [3,]    3    6    9   12\n#&gt; Dimension of matrix_c: 3\n#&gt; Dimension of matrix_c: 4\n#&gt; Shape of matrix_c: (3, 4)\n#&gt; \n#&gt; 4x3-Matix filling by rows (matrix_r):\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    2    3\n#&gt; [2,]    4    5    6\n#&gt; [3,]    7    8    9\n#&gt; [4,]   10   11   12\n#&gt; Dimension of matrix_r: 4\n#&gt; Dimension of matrix_r: 3\n#&gt; Shape of matrix_r: (4, 3)\n#&gt; \n#&gt; Slicing:\n#&gt; [1] 8\n#&gt; [1] 10 11 12\n#&gt;      [,1] [,2]\n#&gt; [1,]    4   10\n#&gt; [2,]    5   11\n#&gt; [3,]    6   12\n#&gt; [1] 4 5 6\n#&gt; \n#&gt; name the columns and rows of matrix \"matrix_r\":\n#&gt;      col1 col2 col3\n#&gt; row1    1    2    3\n#&gt; row2    4    5    6\n#&gt; row3    7    8    9\n#&gt; row4   10   11   12\n\n\n\n\n\n\n\n\nshow the code\nmatriks_c = np.arange(1,13).reshape(3,4, order = \"F\")\nprint(f\"3x4-Matix filling by columns (matriks_c):\\n{matriks_c}\")\n# Dimension of matrix matriks_c\nprint(f\"Dimension of matrix matriks_c: {matriks_c.ndim}\")\n# Counts of rows & Cols from matriks_c\nprint(f\"Shape of matriks_c: {matriks_c.shape}\")\n# np.shape(matriks_c)[0]; np.shape(matriks_c)[1]\nmatriks_r = np.arange(1,13).reshape(4,3, order = \"C\")\nprint(f\"\\n4x3-Matix filling by rows (matriks_r):\\n{matriks_r}\")\n# Dimension of matrix matriks_r\nprint(f\"Dimension of matrix matriks_r: {matriks_r.ndim}\")\n# Counts of rows & Cols from matriks_r\nprint(f\"Shape of matriks_r: {matriks_r.shape}\")\n# np.shape(matriks_r)[0]; np.shape(matriks_r)[1]\n#\nprint(\"\\nSlicing:\")\nmatriks_c[1,2]      # row 2, col 3\nmatriks_c[:, 3]     # column 4\nmatriks_c[:, [1,3]] # columns 2 and 4\nmatriks_r[1, :]     # row 2\n# Name cols & rows\nprint('\\nname the columns and rows of matrix \"matriks_r\":')\ncolnames = [\"col1\", \"col2\", \"col3\"]\nrownames = [\"row1\", \"row2\", \"row3\", \"row4\"]\npd.DataFrame(matriks_r, columns = colnames, index = rownames)\n\n\n#&gt; 3x4-Matix filling by columns (matriks_c):\n#&gt; [[ 1  4  7 10]\n#&gt;  [ 2  5  8 11]\n#&gt;  [ 3  6  9 12]]\n#&gt; Dimension of matrix matriks_c: 2\n#&gt; Shape of matriks_c: (3, 4)\n#&gt; \n#&gt; 4x3-Matix filling by rows (matriks_r):\n#&gt; [[ 1  2  3]\n#&gt;  [ 4  5  6]\n#&gt;  [ 7  8  9]\n#&gt;  [10 11 12]]\n#&gt; Dimension of matrix matriks_r: 2\n#&gt; Shape of matriks_r: (4, 3)\n#&gt; \n#&gt; Slicing:\n#&gt; 8\n#&gt; array([10, 11, 12])\n#&gt; array([[ 4, 10],\n#&gt;        [ 5, 11],\n#&gt;        [ 6, 12]])\n#&gt; array([4, 5, 6])\n#&gt; \n#&gt; name the columns and rows of matrix \"matriks_r\":\n#&gt;       col1  col2  col3\n#&gt; row1     1     2     3\n#&gt; row2     4     5     6\n#&gt; row3     7     8     9\n#&gt; row4    10    11    12"
  },
  {
    "objectID": "posts/DataStructures/datastructures_uz.html#multidimensional-arrays",
    "href": "posts/DataStructures/datastructures_uz.html#multidimensional-arrays",
    "title": "R & Python: Data Structures\n in Uzbek",
    "section": "Multidimensional arrays",
    "text": "Multidimensional arrays\nR dagi (ko’p o’lchamli) massivlar array(vector, dim = c(nrow, ncol, nmat)) funksiyasi yoR damida yaratiladi. Bunda Vektor - bir xil turdagi ma’lumotlar qatori, nrow va ncol - satr va ustun raqamlari, nmat - o’lchamni, ya’ni massivdagi nrow*ncol matritsalar sonini bildiradi.\nPython da massivlar yaratish uchun numpy.arange(), numpy.zeros(), numpy.ones() kabi bir nechta funksiyalar mavjud. Quyida R va Python da 3D massiv, shuningdek, elementlarni kesish yoki ajratish (slicing) va qator va ustunlarning yig’indini hisoblash ko’rsatilgan.\nQuyida 3D massivda slicing va ushbu massivda yig’indini hisoblash misoli tariqasida vizual va amaliy ravishda keltirilgan.\n\n\n\n\n\n\n\n3d Array with twice 3x4 2d-Arrays\n\n\nSlicing  Vektorlar hamda 1d- yoki 2d- massivlaR da bo’lgani kabi, 3D massivlaR da ham massivdan alohida biror elementni yoki bir necha elementladan iborat biror to’plamni ajratib ya’ni kesib olish mumkin. Bunda element indeksi yoki elementlar indekslari bizga tanish bo’lgan kvadrat qavslar [] ichiga kiritiladi. Yuqoridagi rasmda misol qilib keltirilgan massiv shape = (3, 4, 2) shakl yoki formatga ega. Buni R dagi dim(array) va Python dagi array.shape funksiyalari orqali aniqlash mumkin. Qavs ichidagi sonlar: 3 - qator, 4 - ustun va 3 - o’lchamni bildiradi. Bu degani, misolda keltirilgan massiv 3 ta qator va 4 ta ustundan iborat ikkita matrisadan tashkil topgan. Indekslashda to’g’ri pozitsiyani kiritish kerak bo’ladi, ya’ni (R da) kvadrat qavsga birinchi qator positsiyasi, ikkinchi ustun va uchunchi matrisa positsiyani berish kerak. Masalan, arr_r[, , 2] barcha satr va ustunlar bilan ikkinchi matritsani qaytaradi. Matrisalarni arraydagi qatlam deb tasavvur qilsayam bo’ladi, misoldagi array demak 2 ta qatlam yani matrisalaR dan iborat (3 qator 4 ustun bilan).\n\n\n\nshow the code\n# Create 3d-array\narr_r &lt;- array(c(0:23), dim = c(4,3,2))\narr_r &lt;- aperm(arr_r, perm = c(2,1,3))\ncat(\"3d-Array:\")\narr_r\ncat(\"Shape: \",dim(arr_r), \"\\n\")\ncat(\"\\n1st matrix/2d-Array of the 3d-Array (arr_r):\\n\")\narr_r[, , 1]\ncat(\"\\nElement in 2nd row and 1st col of the 2nd matrix from 3d-Array (arr_r):\\n\")\narr_r[2, 1, 2]\ncat(\"\\n3rd column elements of the 2nd matrix from 3d-Array (arr_r):\\n\")\narr_r[, c(3), 2]\ncat(\"\\n2nd row elements of the 1st matrix from 3d-Array (arr_r):\\n\")\narr_r[c(2), , 1]\ncat(\"\\nCheck if elemnt (9) exist in the array:\\n\")\n9 %in% arr_r\n\n\n#&gt; 3d-Array:, , 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    1    2    3\n#&gt; [2,]    4    5    6    7\n#&gt; [3,]    8    9   10   11\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   12   13   14   15\n#&gt; [2,]   16   17   18   19\n#&gt; [3,]   20   21   22   23\n#&gt; \n#&gt; Shape:  3 4 2 \n#&gt; \n#&gt; 1st matrix/2d-Array of the 3d-Array (arr_r):\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    1    2    3\n#&gt; [2,]    4    5    6    7\n#&gt; [3,]    8    9   10   11\n#&gt; \n#&gt; Element in 2nd row and 1st col of the 2nd matrix from 3d-Array (arr_r):\n#&gt; [1] 16\n#&gt; \n#&gt; 3rd column elements of the 2nd matrix from 3d-Array (arr_r):\n#&gt; [1] 14 18 22\n#&gt; \n#&gt; 2nd row elements of the 1st matrix from 3d-Array (arr_r):\n#&gt; [1] 4 5 6 7\n#&gt; \n#&gt; Check if elemnt (9) exist in the array:\n#&gt; [1] TRUE\n\n\n\nOperations  R dagi massivlar yig’indisini hisoblash uchun rowSums() - satrlar yig’indisi, colSums() - ustunlar yig’indisi, funksiyalaridan foydalanish mumkin. R da ham Python dagi kabi sum() funksiyasi mavjud, lekin bu yeR da buni apply funksiyasi bilan birga qo’llash kerak.\n\n\n\nshow the code\ncat(\"3d-Array:\")\narr_r\ncat(\"Sum by row-wise with rowSums:\\n\")\nrowSums(arr_r)\ncat(\"\\nSum by row-wise with apply, same like rowSums:\\n\")\napply(arr_r, c(1), sum)\ncat(\"\\nSum by column-wise with colSums:\\n\")\ncolSums(arr_r)\ncat(\"\\nSum by column-wise with apply\\n\")\napply(arr_r, c(2), sum)\n\n\n#&gt; 3d-Array:, , 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    1    2    3\n#&gt; [2,]    4    5    6    7\n#&gt; [3,]    8    9   10   11\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   12   13   14   15\n#&gt; [2,]   16   17   18   19\n#&gt; [3,]   20   21   22   23\n#&gt; \n#&gt; Sum by row-wise with rowSums:\n#&gt; [1]  60  92 124\n#&gt; \n#&gt; Sum by row-wise with apply, same like rowSums:\n#&gt; [1]  60  92 124\n#&gt; \n#&gt; Sum by column-wise with colSums:\n#&gt;      [,1] [,2]\n#&gt; [1,]   12   48\n#&gt; [2,]   15   51\n#&gt; [3,]   18   54\n#&gt; [4,]   21   57\n#&gt; \n#&gt; Sum by column-wise with apply\n#&gt; [1] 60 66 72 78\n\n\n\n\n\n\n\n\n3d Array with twice 3x4 2d-Arrays\n\n\nSlicing  array.shape funksiyasi yuqoridagi misoldagi massivdan = (2, 3, 4) shaklini qaytaradi. Ya’ni, birinchi son - 2, o’lchamni, ikkinchi son - 3, qatorni va uchinchi son - 4, ustunni qaytariyapti. Bu massivda har birida 3 ta satr va 4 ta ustundan iborat 2 ta matritsa borligini bildiradi. Tasavvur qiling, bitta kubik bor. Agar biz shu kubikni o’rtasidan kessak, ikkita matrisa yoki 2d_massivga ajraladi. Har bir matrisani massivning qatlami yoki jadvali (layer/sheet) deb tasavvur qisa bo’ladi. Indekslashda to’g’ri pozitsiyani kiritish kerak bo’ladi, ya’ni (Python da) kvadrat qavsga birinchi matrisa positsiyani, ikkinchi qator va uchunchi ustun positsiyani berish kerak (Shu yeR da ahamiyat berilgan bo’lsa R da boshqacharoq edi: 1chi - qator, 2chi - ustun va 2chi - qatlam, ya’ni matrisa positsiyasi). Masalan, bu yeR da arr_r[1, :, :] barcha satr va ustunlar bilan ikkinchi matritsani qaytaradi.\n\n\n\n\n\n\nShape is displayed differently in R and Python\n\n\n\n\n\nEtibor berilgan bo’lsa, bir xil massiv uchun shape qaytaradigan qiymatlar taridib R bilan Python da farq qilayapti: shape in R = (3, 4, 2), shape in Python = (2, 3, 4). R da birinchi qatorlar soni, ikkinchi ustunlar soni va uchinchi matrisalar soni ko’rsatilayapti. Python da esa birinchi o’lcham ya’ni matrisalar soni, ikkinchi qatorlar soni va uchinchi ustunlar soni kelayapti.\n\n\n\n\n\n\nshow the code\n# create 3d-Array\narr3d = np.arange(24).reshape(2,3,4)\nprint(\"3d-Array\")\narr3d\nprint(f\"\\nShape: {arr3d.shape}\")\nprint(f\"\\n1st 2d-Array (sheet,matrix, layer) of the 3d-Array (arr3d):\")\narr3d[0, :, :] # or arrd[0]\nprint(f\"\\n3rd column elements of the 2nd sheet from 3d-Array (arr3d):\")\narr3d[1, :, 2]\nprint(f\"\\n2nd row elements of the 1st sheet from 3d-Array (arr3d):\")\narr3d[0, 1, :]\nprint(f\"\\nElement (20) in 3rd row and 1st col of the 2nd sheet\\nfrom 3d-Array (arr3d):\")\narr3d[1, 2, 0]\nprint(f\"\\nElements (22, 23) from 3rd row and columns 3 and 4\\nin the 2nd sheet:\")\narr3d[0, 2, 2:]\nprint(f\"\\nElement (9) in 3rd row and 2nd col of the 1st sheet\\nfrom 3d-Array (arr3d):\")\narr3d[0, 2, 1]\nprint(f\"\\nElement (11) in 3rd row and last col of the 1st sheet\\nfrom 3d-Array (arr3d):\")\narr3d[0, 2, 3]\n\n\n#&gt; 3d-Array\n#&gt; array([[[ 0,  1,  2,  3],\n#&gt;         [ 4,  5,  6,  7],\n#&gt;         [ 8,  9, 10, 11]],\n#&gt; \n#&gt;        [[12, 13, 14, 15],\n#&gt;         [16, 17, 18, 19],\n#&gt;         [20, 21, 22, 23]]])\n#&gt; \n#&gt; Shape: (2, 3, 4)\n#&gt; \n#&gt; 1st 2d-Array (sheet,matrix, layer) of the 3d-Array (arr3d):\n#&gt; array([[ 0,  1,  2,  3],\n#&gt;        [ 4,  5,  6,  7],\n#&gt;        [ 8,  9, 10, 11]])\n#&gt; \n#&gt; 3rd column elements of the 2nd sheet from 3d-Array (arr3d):\n#&gt; array([14, 18, 22])\n#&gt; \n#&gt; 2nd row elements of the 1st sheet from 3d-Array (arr3d):\n#&gt; array([4, 5, 6, 7])\n#&gt; \n#&gt; Element (20) in 3rd row and 1st col of the 2nd sheet\n#&gt; from 3d-Array (arr3d):\n#&gt; 20\n#&gt; \n#&gt; Elements (22, 23) from 3rd row and columns 3 and 4\n#&gt; in the 2nd sheet:\n#&gt; array([10, 11])\n#&gt; \n#&gt; Element (9) in 3rd row and 2nd col of the 1st sheet\n#&gt; from 3d-Array (arr3d):\n#&gt; 9\n#&gt; \n#&gt; Element (11) in 3rd row and last col of the 1st sheet\n#&gt; from 3d-Array (arr3d):\n#&gt; 11\n\n\n\nOperations  Paython da massivlar yig’indisini hisoblash uchun yig’indini qay tarzda hisoblashga qarab, o’qni ya’ni axis kiritish kerak bo’ladi. Axis = 0 da, yig’indi massivning n matritsalari bo’yicha hosil bo’ladi. Axis = 1 holatda yig’indi ustunlar bo’ylab va axis = 2 holatda qatorlar bo’yicha hisoblanadi(Buni yuqorida keltirilgan rasmda ko’rish mumkin).\n\n\n\nshow the code\nprint(\"a 3d-array - arr3d:\")\narr3d\nprint(\"\\nShape:\")\narr3d.shape\nprint(f\"\\nSum by sheets (axis =0):\")\nnp.sum(arr3d, axis = 0) # or arr3d.sum(axis=0)\nprint(f\"\\nSum by column-wise (axis = 1):\")\narr3d.sum(axis=1)\nprint(f\"\\nSum by row-wise (axis = 2):\")\nnp.sum(arr3d, axis = 2)\n\n\n#&gt; a 3d-array - arr3d:\n#&gt; array([[[ 0,  1,  2,  3],\n#&gt;         [ 4,  5,  6,  7],\n#&gt;         [ 8,  9, 10, 11]],\n#&gt; \n#&gt;        [[12, 13, 14, 15],\n#&gt;         [16, 17, 18, 19],\n#&gt;         [20, 21, 22, 23]]])\n#&gt; \n#&gt; Shape:\n#&gt; (2, 3, 4)\n#&gt; \n#&gt; Sum by sheets (axis =0):\n#&gt; array([[12, 14, 16, 18],\n#&gt;        [20, 22, 24, 26],\n#&gt;        [28, 30, 32, 34]])\n#&gt; \n#&gt; Sum by column-wise (axis = 1):\n#&gt; array([[12, 15, 18, 21],\n#&gt;        [48, 51, 54, 57]])\n#&gt; \n#&gt; Sum by row-wise (axis = 2):\n#&gt; array([[ 6, 22, 38],\n#&gt;        [54, 70, 86]])"
  },
  {
    "objectID": "posts/DataStructures/datastructures_uz.html#lists-in-r-and-lists-dicts-in-python",
    "href": "posts/DataStructures/datastructures_uz.html#lists-in-r-and-lists-dicts-in-python",
    "title": "R & Python: Data Structures\n in Uzbek",
    "section": "lists in R and lists & dicts in Python",
    "text": "lists in R and lists & dicts in Python\n\nlists in R\nR dagi ro’yxatning vektorga nisbatan farqi shundaki, ro’yxat elementlari bir hil turda bo’lishi shart emas va elementlarning uzunligi har xil bo’lishi mumkin. Ro’yxat yaratish uchun R da list() funksiyasi mavjud. Indekslashda R da ro’yxat uchun qo’sh (двойной) kvadrat qavs [[]] ishlatiladi (VektoR da bitta kvadrat qavs []).\n\n# create a list\nlst_r &lt;- list(1, c(2, 3), \n               c(TRUE, FALSE), \n               c(\"I\", \"love\", \"R\"), \"Hello R\")\n#\nlst_r\n#&gt; [[1]]\n#&gt; [1] 1\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 2 3\n#&gt; \n#&gt; [[3]]\n#&gt; [1]  TRUE FALSE\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"I\"    \"love\" \"R\"   \n#&gt; \n#&gt; [[5]]\n#&gt; [1] \"Hello R\"\ncat(\"Type: \", class(lst_r), \"\\n\")\n#&gt; Type:  list\n# Atribute of the list:\nstr(lst_r)\n#&gt; List of 5\n#&gt;  $ : num 1\n#&gt;  $ : num [1:2] 2 3\n#&gt;  $ : logi [1:2] TRUE FALSE\n#&gt;  $ : chr [1:3] \"I\" \"love\" \"R\"\n#&gt;  $ : chr \"Hello R\"\n#\n# Check element (Hello R) is in the list\n\"Hello R\" %in% lst_r\n#&gt; [1] TRUE\n#\n# Change the 1st element (1) to 42\nlst_r[[1]] &lt;- 42\nlst_r[[1]]\n#&gt; [1] 42\n#\n# Remove the last element (Hello R) of the list\nlst_r[[length(lst_r)]] &lt;- NULL\nlst_r\n#&gt; [[1]]\n#&gt; [1] 42\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 2 3\n#&gt; \n#&gt; [[3]]\n#&gt; [1]  TRUE FALSE\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"I\"    \"love\" \"R\"\n#\n# Check element (Hello R) is in the list\n\"Hello R\" %in% lst_r\n#&gt; [1] FALSE\n#\n# Remove the 1st (42) and 2nd elements ([2, 3]) \n(lst_r[-c(1,2)]) # Outer bracket for execute code direct\n#&gt; [[1]]\n#&gt; [1]  TRUE FALSE\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"I\"    \"love\" \"R\"\n\nR dagi ro’yxatdagi elementlarni ham nomlash mumkin (Python lug’atlarida bo’lgani kabi). Elementlarga [[]] yoki $ operatori (dollar belgisi) yoR damida murojaat qilish mumkin. Yangilanadigan element indeksiga qiymat belgilash orqali ro’yxatni o’zgartirish yoki olib tashlash mumkin.\n\nlst_named &lt;- list(\n  \"age\" = 19,\n  \"sex\" = \"m\",\n  \"it_skills\" = c(\"R\", \"Python\", \"Java\")\n)\n#\n# 1st element\nlst_named[[1]]\n#&gt; [1] 19\n#\n# 3rd element\nlst_named[[3]]\n#&gt; [1] \"R\"      \"Python\" \"Java\"\n#\n# 2nd element of the 3rd element\nlst_named[[3]][2]\n#&gt; [1] \"Python\"\n#\n# 2nd element by name\nlst_named[[\"sex\"]]       \n#&gt; [1] \"m\"\n#\n# 3rd element via $\nlst_named$it_skills\n#&gt; [1] \"R\"      \"Python\" \"Java\"\n#\n# 2nd element from 3rd element from the list\nlst_named$it_skills[2]\n#&gt; [1] \"Python\"\n#\n# Names of the list\nnames(lst_named)\n#&gt; [1] \"age\"       \"sex\"       \"it_skills\"\n\nappend() funksiyasi orqali R roʻyxatiga yangi element qoʻshish mumkin. Bundan tashqari ro’yxatni Vector yoki Data Fareme (agar elementlar nomlangan bo’lsa) kabi boshqa maʼlumotlar strukturasiga aylantirish mumkin.\n\n# Add an element(\\\"Python\\\" and \\\"C++\\\") into the list(lst_r):\nappend(lst_r, c(\"Python\", \"C++\"))\n#&gt; [[1]]\n#&gt; [1] 42\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 2 3\n#&gt; \n#&gt; [[3]]\n#&gt; [1]  TRUE FALSE\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"I\"    \"love\" \"R\"   \n#&gt; \n#&gt; [[5]]\n#&gt; [1] \"Python\"\n#&gt; \n#&gt; [[6]]\n#&gt; [1] \"C++\"\n#\n# Convert to vector\nunlist(lst_r)\n#&gt; [1] \"42\"    \"2\"     \"3\"     \"TRUE\"  \"FALSE\" \"I\"     \"love\"  \"R\"\n#\n# Create alist\nemp_list &lt;- list(\n  emp_name = c(\"Max\", \"Ali\", \"Vali\"),\n  emp_age = c(45, 34, 27),\n  emp_salary = c(5.300, 3.700, 3.300)\n)\n# \n# Type of emp_list:\nclass(emp_list)\n#&gt; [1] \"list\"\n#\n# Convert to data frame\nemp_df &lt;- data.frame(emp_list); emp_df\n#&gt;   emp_name emp_age emp_salary\n#&gt; 1      Max      45        5.3\n#&gt; 2      Ali      34        3.7\n#&gt; 3     Vali      27        3.3\n#\n# Type of emp_df\nclass(emp_df)\n#&gt; [1] \"data.frame\"\n\n\n\nlists in Python\nR dagi ro’yxatdagi kabi, Python dagi ro’yxatdagi elementlar/objectlar har xil uzunlik va turlarga ega bo’lishi mumkin. Agar Python dagi ro’yxatning barcha elementlari bir xil turga ega bo’lsa, buni R dagi vektor bilan solishtirish mumkin.\n\n# Create a list\nlst_py = [1, [1, 2], True, [\"I\", \"love\", \"Python\"], \"Hello Python\"]\nprint(lst_py)\n#&gt; [1, [1, 2], True, ['I', 'love', 'Python'], 'Hello Python']\nprint(\"\\nType: \", type(lst_py))\n#&gt; \n#&gt; Type:  &lt;class 'list'&gt;\n#\n# Check element (Hello Python) is in the list\n\"Hello Python\" in lst_py\n#&gt; True\n#\n# Change the 1st element (1) to 42\nlst_py[0] = 42; lst_py\n#&gt; [42, [1, 2], True, ['I', 'love', 'Python'], 'Hello Python']\n#\n# Remove the last element (Hello Python) from the list\nlst_py.pop(); lst_py  # pop() removes the last element in the list!!\n#&gt; 'Hello Python'\n#&gt; [42, [1, 2], True, ['I', 'love', 'Python']]\n#\n# Remove the 2nd element ([1, 2]) with pop()\nlst_py.pop(1); lst_py\n#&gt; [1, 2]\n#&gt; [42, True, ['I', 'love', 'Python']]\n#\n# Remove the 1st element (42) with del\ndel lst_py[-0]\n#\n# Remove by name\nlst_py.remove(True)\nlst_py\n#&gt; [['I', 'love', 'Python']]\n\nPython da ro’yxatga yangi elementni append() funktsiyasi (R kabi) orqali qo’shish mumkin. R da bo’lganidek, Python da ham ro’yxatlar boshqa ma’lumotlar tuzilmalariga, NumPy massiviga, Pandas seriyasiga yoki Pandas DataFrame siga aylantirilishi mumkin.\n\n# Create a list\nls1 = [\"Ali\", \"Vali\", \"Gani\"]; ls1\n#&gt; ['Ali', 'Vali', 'Gani']\n#\n# Add a new element (Max) into the list\n# append() adds the new item to the end of the list\nls1.append(\"Max\"); ls1\n#&gt; ['Ali', 'Vali', 'Gani', 'Max']\n#\n# insert() adds an element to the list at the specified index\nls1.insert(1, \"Ivan\") # inserted at index 1 (2nd position)\n#\n# Conver to a Pandas Series\nls_pd = pd.Series(ls1); ls_pd\n#&gt; 0     Ali\n#&gt; 1    Ivan\n#&gt; 2    Vali\n#&gt; 3    Gani\n#&gt; 4     Max\n#&gt; dtype: object\ntype(ls_pd)\n#&gt; &lt;class 'pandas.core.series.Series'&gt;\n#\n# Conver to a A Numpy 1d-Ayrray\nls_np = np.array(ls1); ls_np\n#&gt; array(['Ali', 'Ivan', 'Vali', 'Gani', 'Max'], dtype='&lt;U4')\ntype(ls_np)\n#&gt; &lt;class 'numpy.ndarray'&gt;\n#\n# Convert to a Pandas DataFrame\nls2 = [3, 4, 5, 8, 2]\nls_df = pd.DataFrame(list(zip(ls1,ls2)), columns = [\"ls1\", \"ls2\"])\nls_df\n#&gt;     ls1  ls2\n#&gt; 0   Ali    3\n#&gt; 1  Ivan    4\n#&gt; 2  Vali    5\n#&gt; 3  Gani    8\n#&gt; 4   Max    2\n\n\n\ndicts in Python and lists in R\nYuqorida aytib o’tilganidek, vektorlaR dan farqli ravishda, R da ro’yxat elementlari bir xil turdagi bo’lishi shart emas. R dagi ro’yxat elementlarini ham nomlash mumkin, bu named list ya’ni elementlari nomlangan roy’yxat deb ham ataladi. Python da esa ro’yxat elementlarini nomlab bo’lmaydi, lekin Python da R dagi elementlari nomlangan roy’yxat bilan bir xil tuzilmaga ega bolgan lug’atlar (dictionanries) mavjud. Python tilidagi lug’at d = {key : value} tuzilishidan iborat. Lug’atlaR dagi Kalit unique va immutable, ya’ni unikalniy va o’zgarmasdir. Kalitlar uchun odatda satrlar (strings) ishlatiladi. Agar R dagi vektor elementlari nomlansa Python dagi lug’at strukturasiga ega bo’ladi d = list(name = value). Lug’atdagi elementlarga d[\"key\"] orqali, nomlangan vektor/ro’yxatdagi elementlarga vector[\"name\"] yoki vector$name orqali murojaat qilinadi.\n\n\n\n\n\n\nnamed list vs vector in R\n\n\n\n\n\nR da elementlar ro’yxatda ham (l &lt;- list(\"a\" = 1, \"b\" = b, \"c\" = c(\"a\", \"b\", \"c\"))), vektoR da ham (v &lt;- c(\"a\" = 1, \"b\" = 2, \"c\" = 3)) nomlanishi mumkin. Farqi vektoR dagi elementlar bi xil turga ega bo’lishi kerak.\n\n\nshow the code\ncat(\"Named vector with values of the same type:\\n\")\nv &lt;- c(\"a\" = 1, \"b\" = 2, \"c\" = 3); v\ncat(\"Type: \", class(v))\ncat(\"\\n\\nNamed list with values of different types:\\n\")\nl &lt;- list(\"a\" = 1, \"b\" = \"b\", \"c\" = c(\"a\", \"b\", \"c\")); l\ncat(\"Type: \", class(l))\n\n\n#&gt; Named vector with values of the same type:\n#&gt; a b c \n#&gt; 1 2 3 \n#&gt; Type:  numeric\n#&gt; \n#&gt; Named list with values of different types:\n#&gt; $a\n#&gt; [1] 1\n#&gt; \n#&gt; $b\n#&gt; [1] \"b\"\n#&gt; \n#&gt; $c\n#&gt; [1] \"a\" \"b\" \"c\"\n#&gt; \n#&gt; Type:  list\n\n\nMisol tariqasida, yuqoridagi vektor “v” ga turli xil turdagi qiymatlar berilsa, masalan satr, son aralsh (1, “b”, 3), bu holatda R hamma elementlarni matn sifatida saqlaydi ya’ni qabul qiladi, bu degani 1 va 3 sonlari turi character, ya’ni matnga o’zgartiriladi.\n\nv1 &lt;- c(\"a\" = 1, \"b\" = \"b\", \"c\" = 3); v1\n#&gt;   a   b   c \n#&gt; \"1\" \"b\" \"3\"\nclass(v1)\n#&gt; [1] \"character\"\n\nQiziqishga man vektorning 3 ta elementlariga quyidagi qiymatlarni berdim: a = 1, b = b und c = c(1, 2, 3). Demak vektorimiz 5 ta qiymatga ega bo’lgan 3 ta nomlanagna elementdan iborat boladi. Ajablanarlisi shundaki, R avtomatik ravishda c elementni barcha qiymatlar nomlanguncha kengaytirdi va c1, c2, c3 qilib nomladi. Shunaqa paytlada R ni yanayam yaxschi korib ketasanda kishi;).\n\nv2 &lt;- c(\"a\" = 1, \"b\" = \"b\", \"c\" = c(1, 2, 3)); v2\n#&gt;   a   b  c1  c2  c3 \n#&gt; \"1\" \"b\" \"1\" \"2\" \"3\"\n\n\n\n\nQuyida aksiyalar narxlari lug’atlar va nomlangan vektorlarga misol tqariqasida (2024 yil 27 aprel holatiga ko’ra, OnVista’dan) keltirilgan.\n\n\n\n\n\n\n\nshow the code\nshare_name &lt;- c(\"AMZN\", \"AAPL\", \"MBG\", \"TSLA\", \"BYD\", \"BABA\", \"SAP\")\nshare_value &lt;- c(179.62, 169.30, 74.36, 168.29, 25.36, 75.55, 174.00)\n#\ncat(\"Create a named list from vectors:\\n\")\ndic_r &lt;- setNames(as.list(share_value), share_name); dic_r\ncat(\"\\nshare price from BYD. slice with [[]]:\\n\")\ndic_r[[\"BYD\"]]\ncat(\"\\nshare price from Tesla. slice with $\\n\")\ndic_r$TSLA\ncat(\"\\nTyp from dic_r: \", class(dic_r))\ncat(\"\\nAdd an element (BMW3) to the list(dic_r[['BMW3']] &lt;- 99.15):\\n\")\ndic_r[[\"BMW3\"]] &lt;- 99.15\ncat(\"Is BMW3 there?\\n\")\ndic_r[\"BMW3\"] %in% dic_r\ndic_r[[\"BMW3\"]]\n#\ncat(\"\\nRemove an element (MBG) from the list (dic_r$MBG &lt;- NULL):\\n\")\ndic_r$MBG &lt;- NULL\ncat(\"Is MBG there?\\n\")\ndic_r[\"MBG\"] %in% dic_r\n# convert to python\ncat(\"\\nConvert the list (dic_r) to Python object (dic_py)\\n\")\ndic_py &lt;- r_to_py(dic_r)\ndic_py\ncat(\"\\nType from dic_py:\\n\")\nclass(dic_py)\n\n\n#&gt; Create a named list from vectors:\n#&gt; $AMZN\n#&gt; [1] 179.62\n#&gt; \n#&gt; $AAPL\n#&gt; [1] 169.3\n#&gt; \n#&gt; $MBG\n#&gt; [1] 74.36\n#&gt; \n#&gt; $TSLA\n#&gt; [1] 168.29\n#&gt; \n#&gt; $BYD\n#&gt; [1] 25.36\n#&gt; \n#&gt; $BABA\n#&gt; [1] 75.55\n#&gt; \n#&gt; $SAP\n#&gt; [1] 174\n#&gt; \n#&gt; \n#&gt; share price from BYD. slice with [[]]:\n#&gt; [1] 25.36\n#&gt; \n#&gt; share price from Tesla. slice with $\n#&gt; [1] 168.29\n#&gt; \n#&gt; Typ from dic_r:  list\n#&gt; Add an element (BMW3) to the list(dic_r[['BMW3']] &lt;- 99.15):\n#&gt; Is BMW3 there?\n#&gt; [1] TRUE\n#&gt; [1] 99.15\n#&gt; \n#&gt; Remove an element (MBG) from the list (dic_r$MBG &lt;- NULL):\n#&gt; Is MBG there?\n#&gt; [1] FALSE\n#&gt; \n#&gt; Convert the list (dic_r) to Python object (dic_py)\n#&gt; {'AMZN': 179.62, 'AAPL': 169.3, 'TSLA': 168.29, 'BYD': 25.36, 'BABA': 75.55, 'SAP': 174.0, 'BMW3': 99.15}\n#&gt; \n#&gt; Type from dic_py:\n#&gt; [1] \"python.builtin.dict\"   \"python.builtin.object\"\n\n\n\n\n\n\n\n\nshow the code\nprint(\"share price at 27.04.2024:\")\nfor k,v in r.dic_py.items():\n  print(f\"{k} : {v}\")\nprint(\"\\nKeys:\", r.dic_py.keys())\nprint(\"Values:\", r.dic_py.values())\nprint(f\"\\nShare of Tesla: {r.dic_py[\"TSLA\"]}\")\nprint(\"\\nAdd MBG to the dictionary(r.dic_py['MBG'] = 74.36):\")\nr.dic_py[\"MBG\"] = 74.36\nprint(\"\\nIs MBG in the dictionary?\")\n\"MBG\" in r.dic_py\nprint(\"\\nDelete BYD from dictionary(del r.dic_py['BYD']):\")\ndel r.dic_py[\"BYD\"]\nprint(\"\\nIs BYD in the dictionary?\")\n\"BYD\" in r.dic_py\n\n\n#&gt; share price at 27.04.2024:\n#&gt; AMZN : 179.62\n#&gt; AAPL : 169.3\n#&gt; TSLA : 168.29\n#&gt; BYD : 25.36\n#&gt; BABA : 75.55\n#&gt; SAP : 174.0\n#&gt; BMW3 : 99.15\n#&gt; \n#&gt; Keys: dict_keys(['AMZN', 'AAPL', 'TSLA', 'BYD', 'BABA', 'SAP', 'BMW3'])\n#&gt; Values: dict_values([179.62, 169.3, 168.29, 25.36, 75.55, 174.0, 99.15])\n#&gt; \n#&gt; Share of Tesla: 168.29\n#&gt; \n#&gt; Add MBG to the dictionary(r.dic_py['MBG'] = 74.36):\n#&gt; \n#&gt; Is MBG in the dictionary?\n#&gt; True\n#&gt; \n#&gt; Delete BYD from dictionary(del r.dic_py['BYD']):\n#&gt; \n#&gt; Is BYD in the dictionary?\n#&gt; False\n\n\n\n\n\n\nPython da lug’at elementlariga murojaat qilgandan dict[\"key\"] bilan birga dict.get(\"key\", \"default\") metodi ham mavjud. Ikkala usul ham bir xil natija beradi. Farqi shundaki, izlanayotgan kalit lug’atda mavjudmi yoki yo’qmi. Agar Key mavjud bo’lmasa birinchi usul KeyError hatoligini beradi. get() usuli bu hatolikni oldini oladi. Kalit bmavjud bo’lmagan holatda get odatda None qaytaradi, lekin qaytarilishi kerak bulgan qiymatni o’zgartirsa ham bo’ladi, masalan dict.get(\"key\", \"Mavjud emas!\") holatda, agar kalit mavjut bo’lmasa, “Mavjud emas!” qqqaytariladi.\n\n\nshow the code\nbsp_dic = {\n  \"Ali\" : 25,\n  \"Max\" : 44,\n  \"Vali\": 33\n}; bsp_dic\nprint(\"With []:\")\nprint(f\"Alini yoshi: {bsp_dic[\"Ali\"]}\")\nprint(\"\\nWith get():\")\nprint(f\"Alini yoshi: {bsp_dic.get(\"Ali\")}\")\nlstName = [\"Ali\", \"Gani\", \"Max\", \"Vali\", \"Brandon\"]; lstName\nprint(\"\\nIterate with devault value, if key not exis\")\nfor n in lstName:\n  # for k, v in bsp_dic.items():\n  print(f\"{n} - {bsp_dic.get(n, 'Mavjud emas!')}\" )\n\n\n#&gt; {'Ali': 25, 'Max': 44, 'Vali': 33}\n#&gt; With []:\n#&gt; Alini yoshi: 25\n#&gt; \n#&gt; With get():\n#&gt; Alini yoshi: 25\n#&gt; ['Ali', 'Gani', 'Max', 'Vali', 'Brandon']\n#&gt; \n#&gt; Iterate with devault value, if key not exis\n#&gt; Ali - 25\n#&gt; Gani - Mavjud emas!\n#&gt; Max - 44\n#&gt; Vali - 33\n#&gt; Brandon - Mavjud emas!"
  },
  {
    "objectID": "posts/DataStructures/datastructures_uz.html#sets-and-tuples-in-python",
    "href": "posts/DataStructures/datastructures_uz.html#sets-and-tuples-in-python",
    "title": "R & Python: Data Structures\n in Uzbek",
    "section": "sets and tuples in Python",
    "text": "sets and tuples in Python\nPython da set{} va tuple() kabi boshqa ma’lumotlar tuzilmalari ham mavjud.\n\nset{} in Python\nTurlari bo’yicha guruhlangan elementlarni Python da set, ya’ni to’plam yoR damida ham ifodalash mumkin. Buning uchun elementlarni skobka {}ga kiritiladi yoki ularni set() funksiyasiga beriladi. Ushbu kontseptsiyaning o’ziga xos xususiyati shundaki, elementlar uniquedir, ya’ni har bir object to’plamda faqat bir marta uchraydi. R da ham vektoR dagi takroriy elementlarni olib tashlaydigan unique() funksiyasi mavjud. Bundan tashqari, elementlar tartiblanmagan va ular indekslarga ega emas. set dagi to’plamlar - mutable, ya’ni o’zgaruvchan va frozenset dagi to’plamlar - immutable, ya’ni o’zgarmasdir.\nPython da to’plamlar uchun qo’llaniladigan union, intersection va difference metodlar R da ham mavjud, ular vektorlarga qo’llaniladi.\n\n\n\n\n\n\n# set() - returns the vector without duplicate values\nmy_lst = [2, 3, 1, 5, 3, 9, 3, 2, 7]; my_lst\n#&gt; [2, 3, 1, 5, 3, 9, 3, 2, 7]\nmy_set = set(my_lst); my_set\n#&gt; {1, 2, 3, 5, 7, 9}\n#\n# Create a set\nx = {1, 2, 3, 4, 5, 6}; x\n#&gt; {1, 2, 3, 4, 5, 6}\ny = set([4, 5, 6, 7, 8, 9]); y\n#&gt; {4, 5, 6, 7, 8, 9}\nprint(type(x), type(y))\n#&gt; &lt;class 'set'&gt; &lt;class 'set'&gt;\n#\n# union() - combine x and y without duplicates\nx.union(y)\n#&gt; {1, 2, 3, 4, 5, 6, 7, 8, 9}\n#\n# intersection() - which obj in both sets\nx.intersection(y)\n#&gt; {4, 5, 6}\n#\n# difference() - objects in x, but not in y\nx.difference(y)\n#&gt; {1, 2, 3}\n#\n# difference() - objects in y, but not in x\ny.difference(x)\n#&gt; {8, 9, 7}\n\n\n\n\n\n\n# Typ of python sets\nclass(py$x)\n#&gt; [1] \"python.builtin.set\"    \"python.builtin.object\"\nclass(py$y)\n#&gt; [1] \"python.builtin.set\"    \"python.builtin.object\"\n#\n# unique() - returns the vector without duplicate values\nmy_vec &lt;- c(2, 3, 1, 5, 3, 9, 3, 2, 7); my_vec\n#&gt; [1] 2 3 1 5 3 9 3 2 7\nuniq_vec &lt;- unique(my_vec); uniq_vec\n#&gt; [1] 2 3 1 5 9 7\n#\n# create vectros\nx_r &lt;- c(1, 2, 3, 4, 5, 6); x_r\n#&gt; [1] 1 2 3 4 5 6\ny_r &lt;- c(4, 5, 6, 7, 8, 9); y_r\n#&gt; [1] 4 5 6 7 8 9\n#\n# union() - combine x_r and y_r without duplicates\nunion(x_r, y_r)\n#&gt; [1] 1 2 3 4 5 6 7 8 9\n#\n# intersection() - which obj in both vectors\nintersect(x_r, y_r)\n#&gt; [1] 4 5 6\n#\n# setdiff() - objects in x_r, but not in y_r\nsetdiff(x_r, y_r)\n#&gt; [1] 1 2 3\n#\n# setdiff() - objects in y_r, but not in x_r\nsetdiff(y_r, x_r)\n#&gt; [1] 7 8 9\n\n\n\n\n\n\n\ntuple() in Python\nTuple yoki kortej bir objectga bir nechta (turli turdagi) elementlarni birlashtiradi. Ularni vergul bilan ajratilgan elementlarni qavslar ichiga t = (obj1, obj2, ...) yoki qavslarsiz t = obj1, obj2, ... kiritish bilan yoki tuple(obj) funksiyasi orqali yaratish mumkin. Ro’yxatlaR dan farqli ravishda, tupellar immutable dir, shunga ular o’zgarmas ro’yxat deb ham ataladi. Tupellar yaratilganidan so’ng, elementlarni o’zgartirib bo’lmaydi (qaysi manodaki, elementlariga boshqa qiymat berib bolmaydi, alashtirib bolmaydi, lekin yangi element qo’shsa bo’ladi), agar o’zgartirish zarur bo’lsa, ularni ro’yxatga aylantirib o’zgartirish kiritib, keyin ularni qayta tupelga aylantirib olish mumkin. Tupellarni lug’atlaR da ham ishlatish mumkin.\n\n# create a tuple\nt1 = 1, 5, 6, 6, 3; print(\"t1: \", t1)\n#&gt; t1:  (1, 5, 6, 6, 3)\nt2 = (2, 4, 2, 5, 6); print(\"t2: \", t2)\n#&gt; t2:  (2, 4, 2, 5, 6)\nt3 = tuple([3, 4, 5, 6, 1]); print(\"t3: \", t3)\n#&gt; t3:  (3, 4, 5, 6, 1)\n#\n# tuples in dict keys\nkoordinat = {\n  (0,0) : 100,\n  (1,1) : 200,\n  (0,1) : 75\n}; koordinat\n#&gt; {(0, 0): 100, (1, 1): 200, (0, 1): 75}\n# add istem\nkoordinat[(1,0)] = 125; koordinat\n#&gt; {(0, 0): 100, (1, 1): 200, (0, 1): 75, (1, 0): 125}\n#\n# tuples in dict values\ngreats = {\n  \"Navoi\" : (\"Hirot\", 1441),\n  \"Bobur\" : (\"Andijon\",1483),\n  \"Temur\" : (\"Shahrisabz\", 1336)\n}; greats\n#&gt; {'Navoi': ('Hirot', 1441), 'Bobur': ('Andijon', 1483), 'Temur': ('Shahrisabz', 1336)}\n#\n# iterate dict\nfor great, (place, year) in greats.items():\n  print(f\"{great} - was born in {place} in {year}.\")\n#&gt; Navoi - was born in Hirot in 1441.\n#&gt; Bobur - was born in Andijon in 1483.\n#&gt; Temur - was born in Shahrisabz in 1336."
  },
  {
    "objectID": "posts/DataStructures/datastructures_uz.html#data.frames-in-r-and-pandas.dataframe-in-python",
    "href": "posts/DataStructures/datastructures_uz.html#data.frames-in-r-and-pandas.dataframe-in-python",
    "title": "R & Python: Data Structures\n in Uzbek",
    "section": "data.frames in R and pandas.DataFrame in Python",
    "text": "data.frames in R and pandas.DataFrame in Python\nDataframelar, ehtimol, R va Python da ma’lumotlarni saqlash, qayta ishlash va tahlil qilishning eng keng tarqalgan usullaridan bo’lsa kerak. DF (DataFrame) ni to’rtta burchakli (satrlar va ustunlar) jadval sifatida tasavvur qilish mumkin, misol tariqasida eng keng tarqalgani Excel tablolarini (sheets) misol qilib keltirish mumkin. Qatorlar holatlar yoki kuzatishlarni (ingl. observations), ustunlar esa o’zgaruvchilarni yoki statistika tili bilan aytganda xarakteristikalarni (ingl. futures) ifodalaydi. O’ng tomonda Data Frame kichik jadval shaklda misol tariqasida keltirilgan. Jadvalda 10 ta satr (kuzatishlar - bular shaxslar, Navoi, Bobur, …) va 3 ustun (o’zgaruvchi = ism, tug’ilgan yili va tug’ilgan joyi, bular shaxslarning xarakteristikasi, ya’ni shaxslar haqida ma’lumotlar desayam bo’ladi) mavjud.\n\n\n\n\n\n\nnames\nbyear\nbplace\n\n\n\n\nNavoi\n1441\nHirot\n\n\nBobur\n1483\nAndijon\n\n\nTemur\n1336\nShahrisabz\n\n\nCholpon\n1898\nAndijon\n\n\nQodiriy\n1894\nToshkent\n\n\nUlugbek\n1394\nSamarqand\n\n\nXorazmi\n783\nXiva\n\n\nBeruniy\n1048\nXorazm\n\n\nTermiziy\n824\nTermiz\n\n\nBuxoriy\n810\nBuxoro\n\n\n\n\nR dagi dataframelar boshqacha aytganda bir xill uzunlikka egan bo’lgan nom berilgan vektorlar ro’yxatidir (Paythondagi pandas.Series lar kabi). Bunda har bir vektor (Series) dataframelar ya’ni jadvallarning ustunini ifodalaydi. Python va R dagi dataframelari dataframe talabini qondirishi kerak bo’lgan ko’pchillik umumiy xususiyatlarga (Brown 2023) ega.\n\nhar bir ustunning uzunligi bir xil bo’lishi kerak\nustundagi barcha elementlar bir xil turga ega bo’lishi kerak\nSatR dagi elementlar har xil turlaR da bo’lishi mumkin\nSatrlar va ustunlar boshqacha nomlanishi mumkin\n\nDataframelar R da data.frame() funksiya orqali va Python da pandas modulidagi pandas.DataFrame() funksiya yoR damida yaratiladi.\n\nCreate a DF\n\n\n\n\n\n\nnames &lt;- c(\"Navoi\", \"Bobur\", \"Temur\", \"Cholpon\", \"Qodiriy\", \n           \"Ulugbek\", \"Xorazmi\", \"Beruniy\", \"Termiziy\", \"Buxoriy\")\nbyear &lt;- c(1441, 1483, 1336, 1898, 1894, 1394, 783, 1048, 824, 810) \nbplace &lt;- c(\"Hirot\", \"Andijon\", \"Shahrisabz\", \"Andijon\", \"Toshkent\",\n            \"Samarqand\", \"Xiva\", \"Xorazm\", \"Termiz\", \"Buxoro\")\n# Create a DataFrame -----------------------------------------\ndf &lt;- data.frame(names, byear, bplace)\n# Type -------------------------------------------------------\nclass(df)\n#&gt; [1] \"data.frame\"\n# nums of rows and cols --------------------------------------\ndim(df)  # like shape in pandas\n#&gt; [1] 10  3\n# num of rows ------------------------------------------------\nnrow(df)\n#&gt; [1] 10\n# num of columns ---------------------------------------------\nncol(df)\n#&gt; [1] 3\n# structur of DataFrame --------------------------------------\n# str(df) or\npillar::glimpse(df) # like pandas.DataFrame.info()\n#&gt; Rows: 10\n#&gt; Columns: 3\n#&gt; $ names  &lt;chr&gt; \"Navoi\", \"Bobur\", \"Temur\", \"Cholpon\", \"Qodiriy\", \"Ulugbek\", \"Xo…\n#&gt; $ byear  &lt;dbl&gt; 1441, 1483, 1336, 1898, 1894, 1394, 783, 1048, 824, 810\n#&gt; $ bplace &lt;chr&gt; \"Hirot\", \"Andijon\", \"Shahrisabz\", \"Andijon\", \"Toshkent\", \"Samar…\n# First n lines, default = 6 ---------------------------------\nhead(df, n = 3)\n#&gt;   names byear     bplace\n#&gt; 1 Navoi  1441      Hirot\n#&gt; 2 Bobur  1483    Andijon\n#&gt; 3 Temur  1336 Shahrisabz\n# Last n lines -----------------------------------------------\ntail(df, n=2)\n#&gt;       names byear bplace\n#&gt; 9  Termiziy   824 Termiz\n#&gt; 10  Buxoriy   810 Buxoro\n# colnames ---------------------------------------------------\ncolnames(df)\n#&gt; [1] \"names\"  \"byear\"  \"bplace\"\n# rows -------------------------------------------------------\nrownames(df)\n#&gt;  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n\n\n\n\n\n\n# create pandas DataFrame from created df in r -------\ndf_pd = pd.DataFrame(r.df)\ndf_pd[\"byear\"] = df_pd[\"byear\"].astype(int)\n# Type -----------------------------------------------\ntype(df_pd)\n#&gt; &lt;class 'pandas.core.frame.DataFrame'&gt;\n# nums of rows and cols ------------------------------\ndf_pd.shape   # like dim() in r\n#&gt; (10, 3)\n# num of rows ----------------------------------------\nlen(df_pd)\n#&gt; 10\n# num of columns -------------------------------------\nlen(df_pd.columns)\n#&gt; 3\n# structur of DataFrame ------------------------------\ndf_pd.info()   # like str() in r\n#&gt; &lt;class 'pandas.core.frame.DataFrame'&gt;\n#&gt; RangeIndex: 10 entries, 0 to 9\n#&gt; Data columns (total 3 columns):\n#&gt;  #   Column  Non-Null Count  Dtype \n#&gt; ---  ------  --------------  ----- \n#&gt;  0   names   10 non-null     object\n#&gt;  1   byear   10 non-null     int32 \n#&gt;  2   bplace  10 non-null     object\n#&gt; dtypes: int32(1), object(2)\n#&gt; memory usage: 332.0+ bytes\n# First n lines, default = 5 -------------------------\ndf_pd.head(n = 3)\n#&gt;    names  byear      bplace\n#&gt; 0  Navoi   1441       Hirot\n#&gt; 1  Bobur   1483     Andijon\n#&gt; 2  Temur   1336  Shahrisabz\n# Last n lines ---------------------------------------\ndf_pd.tail(n = 2)\n#&gt;       names  byear  bplace\n#&gt; 8  Termiziy    824  Termiz\n#&gt; 9   Buxoriy    810  Buxoro\n# colnames -------------------------------------------\ndf_pd.columns\n#&gt; Index(['names', 'byear', 'bplace'], dtype='object')\n# rows -----------------------------------------------\ndf_pd.index\n#&gt; RangeIndex(start=0, stop=10, step=1)\n\n\n\n\n\n\n\nAccess a (the) element(s)\n\n\n\n\n\n\n# 1st row, 1st col -------------------------------\ndf[1,1]\n#&gt; [1] \"Navoi\"\n# 1-3 rows, all cols -----------------------------\ndf[1:3, ]\n#&gt;   names byear     bplace\n#&gt; 1 Navoi  1441      Hirot\n#&gt; 2 Bobur  1483    Andijon\n#&gt; 3 Temur  1336 Shahrisabz\n# all rows, 1-2 cols -----------------------------\ndf[, 1:2]\n#&gt;       names byear\n#&gt; 1     Navoi  1441\n#&gt; 2     Bobur  1483\n#&gt; 3     Temur  1336\n#&gt; 4   Cholpon  1898\n#&gt; 5   Qodiriy  1894\n#&gt; 6   Ulugbek  1394\n#&gt; 7   Xorazmi   783\n#&gt; 8   Beruniy  1048\n#&gt; 9  Termiziy   824\n#&gt; 10  Buxoriy   810\n# 3 rows, col bplace -----------------------------\ndf[1:3, 3]\n#&gt; [1] \"Hirot\"      \"Andijon\"    \"Shahrisabz\"\n# rows where col bplace = \"Andijon\" --------------\ndf[df$bplace == \"Andijon\", ]\n#&gt;     names byear  bplace\n#&gt; 2   Bobur  1483 Andijon\n#&gt; 4 Cholpon  1898 Andijon\n# rows where col byear &lt; 1000 -------------------\ndf[df$byear &lt; 1000, ]\n#&gt;       names byear bplace\n#&gt; 7   Xorazmi   783   Xiva\n#&gt; 9  Termiziy   824 Termiz\n#&gt; 10  Buxoriy   810 Buxoro\n\n\n\n\n\n\n# 1st row, 1st col -------------------------------------\ndf_pd.iloc[0,0]         # iloc by postion(s)\n#&gt; 'Navoi'\n# 1-3 rows, all cols -----------------------------------\ndf_pd.iloc[:3, ]\n#&gt;    names  byear      bplace\n#&gt; 0  Navoi   1441       Hirot\n#&gt; 1  Bobur   1483     Andijon\n#&gt; 2  Temur   1336  Shahrisabz\n# all rows, 1-2 cols -----------------------------------\ndf_pd.iloc[:, :2]\n#&gt;       names  byear\n#&gt; 0     Navoi   1441\n#&gt; 1     Bobur   1483\n#&gt; 2     Temur   1336\n#&gt; 3   Cholpon   1898\n#&gt; 4   Qodiriy   1894\n#&gt; 5   Ulugbek   1394\n#&gt; 6   Xorazmi    783\n#&gt; 7   Beruniy   1048\n#&gt; 8  Termiziy    824\n#&gt; 9   Buxoriy    810\n# 3 rows, col bplace -----------------------------------\ndf_pd.loc[:3, \"bplace\"]  # loc by labels(s)\n#&gt; 0         Hirot\n#&gt; 1       Andijon\n#&gt; 2    Shahrisabz\n#&gt; 3       Andijon\n#&gt; Name: bplace, dtype: object\n# 1-2 rows, cols names and bplace ----------------------\ndf_pd.loc[:2, [\"names\",\"byear\"]] # or df_pd.bplace\n#&gt;    names  byear\n#&gt; 0  Navoi   1441\n#&gt; 1  Bobur   1483\n#&gt; 2  Temur   1336\n# rows where col bplace = \"Andijon\" --------------------\ndf_pd.loc[df_pd[\"bplace\"] == \"Andijon\"]\n#&gt;      names  byear   bplace\n#&gt; 1    Bobur   1483  Andijon\n#&gt; 3  Cholpon   1898  Andijon\n# rows where col byear &lt; 1000 --------------------------\ndf_pd.loc[df_pd.byear &lt; 1000]\n#&gt;       names  byear  bplace\n#&gt; 6   Xorazmi    783    Xiva\n#&gt; 8  Termiziy    824  Termiz\n#&gt; 9   Buxoriy    810  Buxoro\n# ------------------------------------------------------\n\n\n\n\n\n\n\nChange Row- and Colnames\n\n\n\n\n\n\n\nshow the code\ncat(\"Rownames:\\n\", rownames(df))  # rownames \ncat(\"\\nColnames:\", colnames(df)) # colnames\n#\nnew_rname &lt;- paste(\"person\",1:10, sep=\"_\", collapse= \",\")\nnew_rname &lt;- unlist(strsplit(new_rname, \",\"))\ncat(\"\\n\\nNew Rowsname:\\n\", new_rname)\n\ncat(\"\\nDF with modified rownames:\\n\")\n# change the rownames\nrownames(df) &lt;- (new_rname)\nhead(df, n = 2)\n# change the colnames\n# Method1: colnames(c(names of new columns))\n# Method2: setNames(df, c(names of new columns)) \n# Here will be used Method2\n# change colname\ndf &lt;- setNames(df, c(\"Ism\", \"Tug\\'ilgan yil\", \"Tug\\'ilgan joy\"))\ncat(\"\\n\\nDF with modified colnames:\\n\")\nhead(df, n = 2)\n#\ncat(\"\\n\\nSet key in DF with data.table:\\n\")\ndt &lt;- data.table(df)\nsetkey(dt, Ism)      # Like Index in pandas\n#call(\"Key: \", key(dt))\nhead(dt, n = 2)\n\n\n#&gt; Rownames:\n#&gt;  1 2 3 4 5 6 7 8 9 10\n#&gt; Colnames: names byear bplace\n#&gt; \n#&gt; New Rowsname:\n#&gt;  person_1 person_2 person_3 person_4 person_5 person_6 person_7 person_8 person_9 person_10\n#&gt; DF with modified rownames:\n#&gt;          names byear  bplace\n#&gt; person_1 Navoi  1441   Hirot\n#&gt; person_2 Bobur  1483 Andijon\n#&gt; \n#&gt; \n#&gt; DF with modified colnames:\n#&gt;            Ism Tug'ilgan yil Tug'ilgan joy\n#&gt; person_1 Navoi          1441         Hirot\n#&gt; person_2 Bobur          1483       Andijon\n#&gt; \n#&gt; \n#&gt; Set key in DF with data.table:\n#&gt; Key: &lt;Ism&gt;\n#&gt;        Ism Tug'ilgan yil Tug'ilgan joy\n#&gt;     &lt;char&gt;         &lt;num&gt;        &lt;char&gt;\n#&gt; 1: Beruniy          1048        Xorazm\n#&gt; 2:   Bobur          1483       Andijon\n\n\n\n\n\n\n\n\n\ndata.frame() vs data.table()\n\n\n\n\n\nR da dataframelar uchun turli funktsiyalar mavjud. Umumiy olganda, data.frame() va data.table bir xil. Biz data.table kengaytirilgan funksiyalarga ega data.frame sifatida tasavvur qilishimiz mumkin. data.frame() funksiyasi R ning base ya’ni asosiy(bazaviy, fundamental) funksiyalari qatoriga kiradi. Bu degani, R ni komputerga install qilgandan, R ning asosiy funksiyalari sifatida data.frame ham bo’ladi. Buni telefonni zaryadkasiga taqqoslash mumkin, chunki telefon sotib olsak zaryadkasi birga bo’ladi. Ko’pchillik telefonlaR da esa naushniklarini alohida sotib olish kerak. A data.table easa naushnik, R da alohida paket hisoblanadi, uni funksiyalarini ishlatish uchun avval yuklab olib keyin R ga o’qish kerak, xuddi Python da pandas modulini import qilish kerak bo’lganidek. Bundan tashqari R da jadvallarni tahrirlashda ko’proq qulaylik va funksionallikni ta’minlaydigan boshqa paketlar mavjud, masalan, tibble, tidyverse, dplyr va boshqalar.\n\n\n\n\n\n\n\n\nshow the code\nprint(f\"Rownames(index):\\n{list(df_pd.index)}\")\nprint(f\"\\nColnames: {list(df_pd.columns)}\")\n#\nnew_pname = [\"user_\" + str(idx) for idx in list(df_pd.index)]\nprint(f\"\\nNew Rowsname:\\n{new_pname}\")\nprint(\"\\nDF with modified rownames:\")\ndf_pd.index = new_pname\ndf_pd.head(n = 2)\nprint(\"\\nDF with modified colnames:\")\ndf_pd.columns = [\"Ism\", \"Tug\\'ilgan yil\", \"Tug\\'ilgan joy\"]\ndf_pd.head(n = 2)\nprint(\"\\n\\nSet a column as index:\")\n# like key in data.table in r\ndf_pd.set_index(\"Ism\", inplace = True, append = True)\ndf_pd.head(n = 2)\n\n\n#&gt; Rownames(index):\n#&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n#&gt; \n#&gt; Colnames: ['names', 'byear', 'bplace']\n#&gt; \n#&gt; New Rowsname:\n#&gt; ['user_0', 'user_1', 'user_2', 'user_3', 'user_4', 'user_5', 'user_6', 'user_7', 'user_8', 'user_9']\n#&gt; \n#&gt; DF with modified rownames:\n#&gt;         names  byear   bplace\n#&gt; user_0  Navoi   1441    Hirot\n#&gt; user_1  Bobur   1483  Andijon\n#&gt; \n#&gt; DF with modified colnames:\n#&gt;           Ism  Tug'ilgan yil Tug'ilgan joy\n#&gt; user_0  Navoi           1441         Hirot\n#&gt; user_1  Bobur           1483       Andijon\n#&gt; \n#&gt; \n#&gt; Set a column as index:\n#&gt;               Tug'ilgan yil Tug'ilgan joy\n#&gt;        Ism                               \n#&gt; user_0 Navoi           1441         Hirot\n#&gt; user_1 Bobur           1483       Andijon\n\n\n\n\n\n\nDataframelar, yuqorida aytib o’tilganidek, R va Python da eng ko’p ishlatiladigan ma’lumotlar tuzilmalaridandir. Shuning uchun, bu mavzuga am’lumotla tizimini bir qismi sifatida qisqacha yoritildi va diqqat faqat asosiy funktsiyalarga qaratildi. Buning uchun alohida mavzu bo’ladi, xudo xohlasa."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notes to myself",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nR & Python: Functions\n in Uzbek\n\n\n\nFunction\n\nUzbek\n\nR\n\nPython\n\nApplay\n\nMap\n\n\n\n\"Qorni ochga baliq bersang bir marta qorni to’yadi, unga bir marta baliq tutishni o’rgatsang, hech qachon och qolmaydi.\"  ~ Laotse.\n\n\n\n\n\nJuly, 2024\n\n\nFazliddin Sultonov\n\n\n\n\n\n\n\n\n\n\n\n\nR & Python: Functions\n in Uzbek\n\n\n\nFunction\n\nUzbek\n\nR\n\nPython\n\n\n\n\"Qorni ochga baliq bersang bir marta qorni to’yadi, unga bir marta baliq tutishni o’rgatsang, hech qachon och qolmaydi.\"  ~ Laotse.\n\n\n\n\n\nJune, 2024\n\n\nFazliddin Sultonov\n\n\n\n\n\n\n\n\n\n\n\n\nEstimates of Location\n in Uzbek\n\n\n\nStatistics\n\nUzbek\n\nR\n\nPython\n\nMean\n\nMedian\n\nModal\n\nQuartil\n\nBox-Plot\n\n\n\n\"Я немного скептически отношусь к статистике. По статистике, и миллионер, и бедняк имеют по полмиллиона каждый.\"  ~ Франклин Рузвельт.\n\n\n\n\n\nJune, 2024\n\n\nFazliddin Sultonov\n\n\n\n\n\n\n\n\n\n\n\n\nEstimates of Location\n in German\n\n\n\nStatistics\n\nGerman\n\nR\n\nPython\n\nMean\n\nMedian\n\nModal\n\nQuartil\n\nBox-Plot\n\n\n\n\"I am a bit skeptical about statistics. According to statistics, a millionaire and a poor guy each have half a million.\"  ~ Franklin Roosevelt.\n\n\n\n\n\nMay, 2024\n\n\nFazliddin Sultonov\n\n\n\n\n\n\n\n\n\n\n\n\nR & Python: Control flows and loops\n in Uzbek\n\n\n\nR\n\nPython\n\nUzbek\n\nLoop\n\nControl flow\n\n\n\n\"If you always do what you can already do, you will always remain what you already are.\"  ~ Henry Ford.\n\n\n\n\n\nMay, 2024\n\n\nFazliddin Sultonov\n\n\n\n\n\n\n\n\n\n\n\n\nR & Python: Data Structures\n in Uzbek\n\n\n\nR\n\nPython\n\nData Structure\n\nUzbek\n\n\n\n\"Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\"  ~ Linus Torvalds.\n\n\n\n\n\nMay, 2024\n\n\nFazliddin Sultonov\n\n\n\n\n\n\n\n\n\n\n\n\nR & Python: Data Structures\n in German\n\n\n\nR\n\nPython\n\nData Structure\n\nGerman\n\n\n\n\"Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\"  ~ Linus Torvalds.\n\n\n\n\n\nMarch, 2024\n\n\nFazliddin Sultonov\n\n\n\n\n\n\n\n\n\n\n\n\nR & Python: Types of Data\n in Uzbek\n\n\n\nR\n\nPython\n\nData Types\n\nUzbek\n\n\n\n\"Data is like garbage. You’d better know what you are going to do with it before you collect it.\"  ~ Mark Twain.\n\n\n\n\n\nJanuary, 2024\n\n\nFazliddin Sultonov\n\n\n\n\n\n\n\n\n\n\n\n\nR & Python: Types of Data\n in German\n\n\n\nR\n\nPython\n\nData Types\n\nGerman\n\n\n\n\"Daten sind wie Müll. Man sollte besser wissen, was man mit ihnen machen will, bevor man sie sammelt.\"  ~ Mark Twain.\n\n\n\n\n\nDecember, 2022\n\n\nFazliddin Sultonov\n\n\n\n\n\nNo matching items\n\n  \n\n Back to top"
  },
  {
    "objectID": "gallery/usbekeninde.html",
    "href": "gallery/usbekeninde.html",
    "title": "mapplot",
    "section": "",
    "text": "Datasource: Statistisches Bundesamt | Datastorage: GitHub"
  },
  {
    "objectID": "gallery/usbekeninde.html#variables",
    "href": "gallery/usbekeninde.html#variables",
    "title": "mapplot",
    "section": "variables",
    "text": "variables\nThe long variable names have been abbreviated to simplify editing and plotting. The names in the analysis and the names in the original are shown below:\n\n\n\n\n\nabbreviated variable name\noriginal variable name\n\n\n\n\nAE_family\nAE, familiäre Gründe\n\n\nAusbildung\nAusbildung\n\n\nAE_human\nAE, human., pol. Gründe\n\n\nDuldung\nDuldung\n\n\nAEgestattung\nAufenthaltsgestattung\n\n\nAntrag\nAntrag gestellt\n\n\nAusbildung\nAusbildung\n\n\nBefristete_AE\nBefristete AE\n\n\nFreizügG/EU\nAufenthaltsrecht nach FreizügG/EU\n\n\nNVisa\nBefristet, bes. Gründe & nationale Visa\n\n\nNiederlassungserlaubnis\nUnbefristete Niederlassungserlaubnis\n\n\nOhneAT\nOhne AE | Duldung oder Gestattung\n\n\nErwerb\nBefristete AE, Erwerbstätigkeit\n\n\n\n\n\n\nShow some sample rows"
  },
  {
    "objectID": "gallery/usbekeninde.html#dataclean",
    "href": "gallery/usbekeninde.html#dataclean",
    "title": "mapplot",
    "section": "dataclean",
    "text": "dataclean\n\n\nCode\n# pivot data\npiv_data &lt;- \n  data_raw |&gt; \n  pivot_longer(\n    cols = !c(Bundesland, Stadt, Kreis...Landkreis),\n    names_to = \"status\",\n    values_to = \"cnt\"\n    ) |&gt; \n  select(c(1,2,4,5))\n\n#library(stringr)  # string replace, dedect\ndata &lt;- \n  piv_data |&gt; \n  rowwise() |&gt; \n  mutate(\n    geschlecht = ifelse(\n      endsWith(status, \"_m\"),  \"male\",\n        ifelse(\n          endsWith(status, \"_w\"), \"female\"\n        )\n      )\n  ) |&gt; \n  mutate(across(\"status\", str_replace, \"_m|_w\", \"\")) |&gt; \n  rename(\n    \"bundesland\" = \"Bundesland\",\n    \"kreis\" = \"Stadt\")\n\ndata |&gt; \n  head()\n\n\n#&gt; # A tibble: 6 × 5\n#&gt; # Rowwise: \n#&gt;   bundesland         kreis     status                    cnt geschlecht\n#&gt;   &lt;chr&gt;              &lt;chr&gt;     &lt;chr&gt;                   &lt;int&gt; &lt;chr&gt;     \n#&gt; 1 Schleswig-Holstein Flensburg FreizügG.EU                 0 male      \n#&gt; 2 Schleswig-Holstein Flensburg FreizügG.EU                 0 female    \n#&gt; 3 Schleswig-Holstein Flensburg Niederlassungserlaubnis     0 male      \n#&gt; 4 Schleswig-Holstein Flensburg Niederlassungserlaubnis     5 female    \n#&gt; 5 Schleswig-Holstein Flensburg Befristete_AE               0 male      \n#&gt; 6 Schleswig-Holstein Flensburg Befristete_AE               5 female\n\n\n\n\n\n\n\n\nDiqqat! Achtung! Bнимание! Attention!\n\n\n\nColumname Kreis / Landkreis mit / gespeichert. Normal R liest die Spalte so wie sie in DF gespeichrt ist, muss aber mit dplyr so angesprochen werden:\n```{r}\ndata_raw |&gt; \n  pivot_longer(\n    cols = !c(Bundesland, Stadt, `Kreis / Landkreis`),\n    ....\n\n```\nIn Qarto sieht eingelesene Spaltenname Kreis / Landkreis -&gt; Kreis...Landkreis"
  },
  {
    "objectID": "gallery/usbekeninde.html#mapplot-via-ggplot",
    "href": "gallery/usbekeninde.html#mapplot-via-ggplot",
    "title": "mapplot",
    "section": "mapplot via ggplot",
    "text": "mapplot via ggplot\n(data grouped by [Bundesländer])\n\n\nCode\n# libraries:\n# pkg &lt;- c(\"giscoR\", \"ggtext\", \"glue\", \"syfonts\", \"png\", \"ggimage\", \"fontawesome\")\n# lapply(pkg, library, character.only = TRUE)\n\n\n# Group by bundesland ==========================================================\nd_group &lt;-\n  data |&gt; \n  group_by(bundesland) |&gt; \n  summarise(pop = sum(cnt))\n\n# Geo data for germany =========================================================\n# library(giscoR)\nger &lt;- gisco_get_nuts(\n  year = 2024,\n  epsg = 4326,\n  nuts_level = 1,\n  resolution =  \"01\",\n  country = \"Germany\"\n)\n\n# Merge both data ==============================================================\ndf_de &lt;-\n  ger |&gt; \n  left_join(d_group, by = c(\"NUTS_NAME\" = \"bundesland\"))\n\n# new col mit abkurzung to from bundesländer to df\nL_Abk &lt;- c(\"SH\", \"MV\", \"TH\", \"NI\", \"BW\", \"NW\", \"RP\", \"SL\", \"BY\", \"BE\", \"SN\",\n           \"BB\", \"HB\", \"HH\", \"ST\", \"HE\")\ndf_de$abk &lt;- L_Abk\n\n\n# read image dop\nimg &lt;- readPNG(\"gallery_img/dop.png\")\n\n\n# create mapplot\nmap_plt &lt;-\n  ggplot(df_de) +\n  geom_sf(aes(fill = NUTS_NAME))+  #(aes(fill = NUTS_NAME), show.legend = FALSE) # disable legend \n  geom_sf_label(aes(label = paste(abk, \":\", pop)), fill = \"aliceblue\", col = \"dodgerblue4\") +\n  geom_text(aes(y = 50.1, x =13.8, label = paste(\"Gesamt:\", sum(pop))),\n            stat = \"unique\",\n            size = 3.6, size.unit = \"mm\", col = \"dodgerblue4\", fontface = \"bold\") +\n  annotate(\n    'rect',\n    xmin = 12.4,\n    xmax = 15.2,\n    ymin = 49.9,\n    ymax = 50.3,\n    alpha = 0.5,\n    fill = 'aliceblue',\n    col = 'dodgerblue4',\n  )+\n  annotation_raster(img, xmin = 6, xmax = 8, ymin = 54, ymax = 55.5, interpolate = FALSE) +\n  theme_minimal()+\n  labs(\n    title = \"**Usbeken in Deutschland**\",\n    subtitle = \"nach Bundesländern\",\n    caption = social_caption_map\n  ) + \n  guides(fill = guide_legend(title=\"Bundesland\")) +\n  theme(plot.title = ggtext::element_markdown(size = 13, color = \"steelblue4\", face = \"bold\"),\n        plot.subtitle = element_markdown(),\n        plot.caption = element_markdown(size = 11), # element_textbox_simple()\n        plot.caption.position = \"plot\",             #plot, margin, panel,\n        legend.title = element_text(color = \"darkgrey\", size = 12, face = \"bold\"),\n        axis.text.x=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks=element_blank(),\n        axis.title.x=element_blank(),\n        axis.title.y=element_blank())\n\nmap_plt"
  },
  {
    "objectID": "gallery/usbekeninde.html#barplot-via-ggplot",
    "href": "gallery/usbekeninde.html#barplot-via-ggplot",
    "title": "mapplot",
    "section": "barplot via ggplot",
    "text": "barplot via ggplot\n(grouped data by [Aufenthaltsstatus])\n\n\nCode\n# Group by Status ==============================================================\ngroup_stat &lt;- \n  data |&gt; \n  group_by(status) |&gt; \n  summarise(n = sum(cnt))\n\n# create plot ------------------------------------------------------------------\nbar_plt &lt;-\n  ggplot(group_stat, aes(x = n, y = reorder(n, status), fill = status))+\n  geom_col()+\n \n  geom_text(aes(label = n), \n            hjust = -0.1, color = \"darkgrey\", fontface = \"bold\")+\n  \n  scale_fill_discrete(name = \"Aeufenthaltsstatus\", labels = legnd) +\n  labs(\n    title = \"Usbeken in Deutschlan, nach Aufenthaltsstatus\",\n    caption = social_caption_map,\n    x = \"Zahl (k = 1000)\" ) +\n  scale_x_continuous(\n    labels = function(x) paste0(x/1000, \"k\"),\n    expand = expansion(c(0.01, 0.05))) +\n  theme_classic() +\n  theme(\n    plot.title = ggtext::element_markdown(\n      size = 13, color = \"steelblue4\", face = \"bold\"),\n    plot.caption = ggtext::element_markdown(size = 11),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.line = element_line(colour = \"gray\"),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    legend.position = c(0.8, 0.40)\n  ) \n\nbar_plt"
  },
  {
    "objectID": "gallery/usbekeninde.html#funnel-chart-via-ggplot",
    "href": "gallery/usbekeninde.html#funnel-chart-via-ggplot",
    "title": "mapplot",
    "section": "funnel chart via ggplot",
    "text": "funnel chart via ggplot\n(grouped data by [Aufenthaltsstatus])\n\n\nCode\ngroup_status &lt;-\n  data |&gt; \n  group_by(status, geschlecht) |&gt; \n  summarise(cnt = sum(cnt)) |&gt; \n  mutate(\n    n = case_when(\n      geschlecht == \"female\" ~ cnt*-1,\n      TRUE ~ cnt\n    )\n  )\n\nbrks &lt;- c(seq(-3000, 3000, by = 500))\nlbls = c(seq(30, 0, -5), seq(5, 30, 5))\np &lt;- group_status |&gt;\n  ggplot(aes(x = reorder(status, n), y =  n, fill = geschlecht))+\n  geom_bar(stat = \"identity\", width = .6) +\n  scale_y_continuous(breaks = brks, labels = lbls) +\n  scale_x_discrete(labels = legnd) +\n  geom_label(aes(label = abs(n)), colour = \"blue\", fontface=\"bold\", size=3.5) +\n  guides(fill = guide_legend(\n    title = \"Geschlecht:\",\n    override.aes = aes(label = \"\"))) +\n  coord_flip() +\n  labs(title=\"Usbeken in Deutschland nach Aufenthaltsstatus\",\n       caption = social_caption_map\n       ) +\n  theme_minimal() +\n  theme(plot.title = ggtext::element_markdown(\n          size = 13, color = \"steelblue4\", face = \"bold\"),\n        plot.caption = ggtext::element_markdown(size = 11),\n        axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        legend.background = element_rect(),\n        legend.position = \"top\")\np"
  },
  {
    "objectID": "gallery/usbekeninde.html#funnel-chart-via-ggplot-1",
    "href": "gallery/usbekeninde.html#funnel-chart-via-ggplot-1",
    "title": "mapplot",
    "section": "funnel chart via ggplot",
    "text": "funnel chart via ggplot\n(grouped data by [Aufenthaltsstatus])\n\n\nCode\ngroup_bl &lt;- \n  data |&gt; \n  group_by(bundesland, geschlecht) |&gt; \n  summarise(cnt = sum(cnt)) |&gt; \n  mutate(                          # einen Teil die Daten musste ich negativ machen,\n    n = case_when(                 # weil sons stacked bar wurde\n      geschlecht == \"female\" ~ cnt*-1,\n      TRUE ~ cnt\n    )\n  )\n\ngroup_bl |&gt; \n  ggplot(aes(x = reorder(bundesland,n), y =  n, fill = geschlecht))+\n  geom_bar(stat = \"identity\", width = .6) +\n  scale_y_continuous(breaks = brks, labels = lbls) +\n  geom_label(aes(label = abs(n)), colour = \"floralwhite\", fontface=\"bold\", size=4) +\n  guides(fill = guide_legend(\n    title = \"Geschlecht:\",\n    override.aes = aes(label = \"\"))) +\n  coord_flip() +\n  labs(title=\"Usbeken in Deutschland nach Geschlecht in Bundesländern\") +\n  theme_minimal() +\n  theme(plot.title = ggtext::element_markdown(\n          size = 13, color = \"steelblue4\", face = \"bold\"),\n        plot.caption = ggtext::element_markdown(size = 11),\n        axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        legend.background = element_rect(),\n        legend.position = \"top\")"
  },
  {
    "objectID": "gallery/usbekeninde.html#prepare-date-use-data-from-r",
    "href": "gallery/usbekeninde.html#prepare-date-use-data-from-r",
    "title": "mapplot",
    "section": "prepare date (use data from R)",
    "text": "prepare date (use data from R)\n\ngroup by [status] in pandas\n\n\nshow the code\nimport numpy as np\nimport pandas as pd\nfrom IPython.display import display, Markdown, HTML\n\nvar_name = {\"AE_family\": \"AE, familiäre Gründe\",\n           \"Ausbildung\": \"Ausbildung \",\n           \"AE_human\": \"AE, human., pol. Gründe\", \n           \"Duldung\": \"Duldung \",\n           \"AEgestattung\": \"Aufenthaltsgestattung\", \n           \"Antrag\": \"Antrag gestellt\", \n           \"Ausbildung\": \"Ausbildung\", \n           \"Befristete_AE\": \"Befristete AE\", \n           \"FreizügG/EU\": \"Aufenthaltsrecht nach FreizügG/EU\",\n           \"NVisa\": \"Befristet, bes. Gründe & nationale Visa\", \n           \"Niederlassungserlaubnis\": \"Unbefristete Niederlassungserlaubnis\", \n           \"OhneAT\": \"Ohne AE oder Duldung oder Gestattung\",\n           \"Erwerb\": \"Befristete AE, Erwerbstätigkeit\"}\n\ndf_r = pd.DataFrame(r.group_status)\n# rename rownames\ndef replace_rname(name):\n    return var_name.get(name, name)\ndf_r[\"status\"] = df_r[\"status\"].apply(replace_rname)\n# pivot wide\ndata = df_r.pivot(index = \"status\", columns = \"geschlecht\", values = \"cnt\").reset_index()\nsumma = np.abs(data.female + data.male)\ndata[\"summa\"] = summa\n\ndf = data.copy()\ndf = df.sort_values(\n    \"summa\",\n    ascending=False,\n    inplace=False,\n    ignore_index=False,\n    key=None\n)\n\nfemale = df.female\nmale = df.male\nlabels = df.status\n\nMarkdown(df.to_markdown(index = False))\n\n\n\n\n\n\n\n\n\n\n\nstatus\nfemale\nmale\nsumma\n\n\n\n\nBefristete AE\n2315\n2605\n4920\n\n\nUnbefristete Niederlassungserlaubnis\n2570\n1905\n4475\n\n\nAE, familiäre Gründe\n1100\n530\n1630\n\n\nOhne AE oder Duldung oder Gestattung\n335\n935\n1270\n\n\nAusbildung\n330\n785\n1115\n\n\nAntrag gestellt\n430\n520\n950\n\n\nAE, human., pol. Gründe\n370\n355\n725\n\n\nBefristete AE, Erwerbstätigkeit\n165\n555\n720\n\n\nAufenthaltsgestattung\n40\n50\n90\n\n\nDuldung\n35\n50\n85\n\n\nBefristet, bes. Gründe & nationale Visa\n35\n15\n50\n\n\nFreizügG.EU\n35\n5\n40"
  },
  {
    "objectID": "gallery/usbekeninde.html#plot-by-status-with-plotly",
    "href": "gallery/usbekeninde.html#plot-by-status-with-plotly",
    "title": "mapplot",
    "section": "plot by [status] with plotly",
    "text": "plot by [status] with plotly\n\n\nshow the code\nfrom plotly import graph_objects as go\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Funnel(\n    name = 'Male',\n    y = list(labels),\n    x = list(male),\n    textinfo = \"value\"))\n\nfig.add_trace(go.Funnel(\n    name = 'Female',\n    orientation = \"h\",\n    y = list(labels),\n    x = list(female),\n    textposition = \"inside\",\n    textinfo = \"value\"))\n    \nfig.update_layout(\n    title='&lt;b&gt;Usbeken in Deutschland nach Aufenthaltsstatus bei Geschlecht&lt;/b&gt;',\n    title_font=dict(size=18,\n                    color='blue',\n                    family='Arial'),\n    title_x=0.50,  # Title aligned with grid\n    title_y=0.93   # Title positioned near the top vertically\n)\n#fig.show()\nprint(fig)\n\n#fig.write_image(\"gallery/plots/fig1.png\")\n#plotly.offline.plot(fig, filename='gallery/plots/fig1.png', image='png')\n\n\n\n\ngroup by [bundesland]\n\n\nshow the code\nimport numpy as np\nimport pandas as pd\nfrom IPython.display import display, Markdown, HTML\n\n# load R data\ndf_bl_r = pd.DataFrame(r.group_bl)\n\n# pivot wide\ndata_bl = df_bl_r.pivot(index = \"bundesland\", columns = \"geschlecht\", values = \"cnt\").reset_index()\nsum_bl = np.abs(data_bl.female + data_bl.male)\ndata_bl[\"summa\"] = sum_bl\n\ndf_bl = data_bl.copy()\ndf_bl = df_bl.sort_values(\n    \"summa\",\n    ascending=False,\n    inplace=False,\n    ignore_index=False,\n    key=None\n)\n\n# vars for plot\nfem = df_bl.female\nmal = df_bl.male\nlab = df_bl.bundesland\n\n\nMarkdown(df_bl.to_markdown(index = False))\n\n\n\n\n\nbundesland\nfemale\nmale\nsumma\n\n\n\n\nNordrhein-Westfalen\n1595\n1650\n3245\n\n\nBayern\n1430\n1510\n2940\n\n\nBaden-Württemberg\n1005\n955\n1960\n\n\nHessen\n760\n745\n1505\n\n\nBerlin\n645\n665\n1310\n\n\nNiedersachsen\n530\n585\n1115\n\n\nSachsen\n300\n350\n650\n\n\nSachsen-Anhalt\n145\n400\n545\n\n\nHamburg\n245\n255\n500\n\n\nRheinland-Pfalz\n260\n205\n465\n\n\nBrandenburg\n190\n265\n455\n\n\nSchleswig-Holstein\n230\n215\n445\n\n\nThüringen\n115\n195\n310\n\n\nBremen\n150\n155\n305\n\n\nSaarland\n85\n80\n165\n\n\nMecklenburg-Vorpommern\n75\n80\n155"
  },
  {
    "objectID": "gallery/usbekeninde.html#plot-by-bundesland-with-plotly",
    "href": "gallery/usbekeninde.html#plot-by-bundesland-with-plotly",
    "title": "mapplot",
    "section": "plot by [bundesland] with plotly",
    "text": "plot by [bundesland] with plotly\n\n\nshow the code\nfrom plotly import graph_objects as go\nimport plotly.io as pio\n#import plotly\n# import plotly.io as pio\n# png_renderer = pio.renderers[\"png\"]\n# png_renderer.width = 500\n# png_renderer.height = 500\n# \n# pio.renderers.default = \"png\"\n\n\nfig_bl = go.Figure()\n\nfig_bl.add_trace(go.Funnel(\n    name = 'male',\n    y = list(lab),\n    x = list(mal),\n    textinfo = \"value\"))\n\nfig_bl.add_trace(go.Funnel(\n    name = 'memale',\n    orientation = \"h\",\n    y = list(lab),\n    x = list(fem),\n    textposition = \"inside\",\n    textinfo = \"value\"))\n    \nfig_bl.update_layout(\n    title='&lt;b&gt;Usbeken in Deutschland in Bundesländern nach Geschlecht&lt;/b&gt;',\n    title_font=dict(size=18,\n                    color='blue',\n                    family='Arial'),\n    title_x=0.50,  # Title aligned with grid\n    title_y=0.93   # Title positioned near the top vertically\n)\n# # show as static img\n# fig_bl.show(renderer=\"png\")\n# # write as image\n# pio.write_image(fig_bl, \"C:/Users/sultanov/Documents/blog/gallery/plots/figname.png\")"
  },
  {
    "objectID": "gallery/price_line.html",
    "href": "gallery/price_line.html",
    "title": "animated lineplot",
    "section": "",
    "text": "Datasource: Statistics Agency under the President of the Republic of Uzbekistan | Datastorage: GitHub"
  },
  {
    "objectID": "gallery/price_line.html#data",
    "href": "gallery/price_line.html#data",
    "title": "animated lineplot",
    "section": "data",
    "text": "data\n\n\nCode\ndata_raw &lt;- read.csv2(\n  \"https://raw.githubusercontent.com/sultanovf/my_datasets/refs/heads/main/priceuz_202101-202411.csv\")\n\n  \nprice_uz &lt;-\n  data_raw |&gt; \n  select(-runame) |&gt; \n  add_column(runame, .after = \"enname\" )\n\ndatseq &lt;- as.character(seq(as.Date(\"2021-01-01\"),as.Date(\"2024-11-01\"), by = \"month\"))\nnew_colnames &lt;- c(\"uzname\", \"enname\", \"runame\", unlist(strsplit(datseq, \",\")))\ncolnames(price_uz) &lt;- new_colnames\n\n\nrmarkdown::paged_table(sample_n(price_uz, 10)) # show sample 10 rows\n# oder {r, df_print = \"paged\"}\n# sample_n(data_raw, 10"
  },
  {
    "objectID": "gallery/price_line.html#dataclean",
    "href": "gallery/price_line.html#dataclean",
    "title": "animated lineplot",
    "section": "dataclean",
    "text": "dataclean\n\n\nCode\n# add column catecory\ndf_data &lt;- price_uz |&gt; \n  select(-enname) |&gt; \n  filter(uzname %in% filtermap) |&gt; \n  mutate(\n    category = case_when(\n      uzname %in% gosht ~ \"Мясо\",\n      uzname %in% sabzavot ~ \"Овощи\",\n      uzname %in% oziqovqat ~ \"Питание\",\n      uzname %in% yog ~ \"Mасло\",\n      TRUE ~ \"Другой\"\n    )\n  )\n\n# pivot data\ndf_piv &lt;-\n  df_data |&gt; \n  pivot_longer(\n    cols = !c(uzname, runame, category),\n    names_to = \"date\",\n    values_to = \"price\"\n  ) |&gt; \n  mutate(\n    date = as.Date(date)\n  )\n\ndf_piv |&gt; \n  sample_n(7)\n\n\n#&gt; # A tibble: 7 × 5\n#&gt;   uzname       runame           category date        price\n#&gt;   &lt;chr&gt;        &lt;chr&gt;            &lt;chr&gt;    &lt;date&gt;      &lt;dbl&gt;\n#&gt; 1 Tovuq goshti Курица           Мясо     2024-11-01 31441.\n#&gt; 2 Tovuq goshti Курица           Мясо     2021-05-01 23033.\n#&gt; 3 Guruch       Рис              Питание  2022-04-01  9560.\n#&gt; 4 Yog(paxta)   Масло(хлопковое) Mасло    2023-10-01 16024.\n#&gt; 5 Sarimsoq     Чеснок           Овощи    2022-08-01 16018.\n#&gt; 6 Kartoshka    Картофель        Овощи    2024-07-01  4228 \n#&gt; 7 Shakar       Сахар            Питание  2021-09-01  8506."
  },
  {
    "objectID": "gallery/price_line.html#prepare-data-for-plot",
    "href": "gallery/price_line.html#prepare-data-for-plot",
    "title": "animated lineplot",
    "section": "prepare data for plot",
    "text": "prepare data for plot\n\n\nCode\ndf1 &lt;- \n  df_piv |&gt;\n  filter(\n    runame %in% c(\"Баранина\", \"Говядина\", \"Масло сливочное\", \"Курица\")\n  ) |&gt; \n  mutate(\n    images = case_when(\n      runame == \"Баранина\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Говядина\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Масло сливочное\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Курица\" ~ paste0(img_path,uzname,\".png\"),\n      TRUE ~ uzname\n      \n    ),\n    frame = row_number()\n  )\n\nhead(df1)\n\n\n#&gt; # A tibble: 6 × 7\n#&gt;   uzname     runame   category date        price images                    frame\n#&gt;   &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;    &lt;date&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;int&gt;\n#&gt; 1 Mol goshti Говядина Мясо     2021-01-01 59082. gallery_img/products/Mol…     1\n#&gt; 2 Mol goshti Говядина Мясо     2021-02-01 59243. gallery_img/products/Mol…     2\n#&gt; 3 Mol goshti Говядина Мясо     2021-03-01 59595. gallery_img/products/Mol…     3\n#&gt; 4 Mol goshti Говядина Мясо     2021-04-01 60338. gallery_img/products/Mol…     4\n#&gt; 5 Mol goshti Говядина Мясо     2021-05-01 61163. gallery_img/products/Mol…     5\n#&gt; 6 Mol goshti Говядина Мясо     2021-06-01 61628. gallery_img/products/Mol…     6"
  },
  {
    "objectID": "gallery/price_line.html#plot",
    "href": "gallery/price_line.html#plot",
    "title": "animated lineplot",
    "section": "plot",
    "text": "plot\n\n\nCode\n# Title/subtitle/legendtitle\nt &lt;- paste(\"Динамика цен на мясо\")\nst &lt;- paste(\"Январь 2021 - Ноябрь 2024\")\np &lt;- paste(\"продукты\")\npp &lt;- \n  df1 |&gt; \n  ggplot(aes(x = date, y = price, color = runame)) +\n  geom_line()+\n  geom_point()+\n  scale_y_continuous(limits = c(20000,95000),breaks = seq(20000, 95000, 5000),\n                     labels = function(x) paste(x/1000)) +\n  scale_x_date(date_labels = \"%Y\") +\n  #guides(fill = guide_legend(title = \"Produkt\"))+ #change legen title not worked\n  labs(\n    #fill = p,     #change legen title not worked\n    title = t, \n    subtitle = st,\n    caption = cap,\n    y = \"Цена в тысячах сумов\",\n    x = NULL)+\n  \n  theme_minimal()+\n  theme(\n    plot.title = element_text(size = 12, color = \"steelblue4\", face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size=11, color = \"tomato3\", face = \"bold\", hjust = 0.5),\n    plot.caption = ggtext::element_markdown(size = 11, hjust = 0.5),\n    legend.position = \"bottom\",\n    legend.box.background =element_rect(\"floralwhite\"))\n\nmol &lt;- \"gallery_img/products/Mol goshti1.png\"\n\npp$labels$colour = \"продукты\" #change legen title\n\np1 &lt;- ggbackground(pp, mol, alpha = .5, color = \"gray\")\n\np1"
  },
  {
    "objectID": "gallery/price_line.html#plot-animated",
    "href": "gallery/price_line.html#plot-animated",
    "title": "animated lineplot",
    "section": "plot animated",
    "text": "plot animated\n\n\nCode\n# icon ----------------------------------------\nf_path &lt;- \"C:/Users/sultanov/Documents/fontawesome/otfs/\"\nfont_add('Font Awesome 6 Brands', paste0(f_path, \"Font Awesome 6 Brands-Regular-400.otf\"))  # social\n\nshowtext::showtext_auto()\n\np2 &lt;- \n  df1 |&gt; \n  ggplot(aes(x = date, y = price, fill = runame)) +\n  geom_line()+\n  geom_point()+\n  geom_image(aes(image=images),  size=0.12)+\n  geom_label(aes(label = as.character(price)), size = 3.5 ,hjust = 1.2, colour= \"white\")+\n  # scales\n  scale_y_continuous(limits = c(20000,95000),breaks = seq(20000, 95000, 5000),\n                     labels = function(x) paste(x/1000)) +\n  scale_x_date(date_labels = \"%Y\") +\n  # Labs/titles\n  labs(\n    title = t, \n    subtitle = \"{format(frame_along, '%Y - %B')}\",\n    caption = cap,\n    y = \"Цена в тысячах сумов\",\n    x = NULL,\n    fill = p)+   # funktioniert wenn aes oben fill, wenn color nicht\n  # Theme format\n  theme_minimal()+\n  theme(\n    plot.title = element_text(size = 14, color = \"steelblue4\", face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size=12, color = \"tomato3\", face = \"bold\", hjust = 0.5),\n    plot.caption = ggtext::element_markdown(size = 12, hjust = 0.5),\n    #legend.title = element_markdown(p), #change legen title not worked\n    legend.position = \"bottom\",   #c(0.90, 0.13)\n    \n    legend.box.background =element_rect(\"floralwhite\"))+\n  # animate\n  # transition_time(date) # keine Linie\n  transition_reveal(date)\np2\n\n## render and Save\n# anim_p &lt;- \n#   p2 |&gt;\n#   animate(\n#     duration = 20,\n#     fps = 10,\n#     start_pause = 5,\n#     end_pause = 10,\n#     height = 533,\n#     width = 833,\n#     renderer = av_renderer()\n#   )\n# \n# anim_p\n\n#anim_save(\"C:/Users/sultanov/YandexDisk/f-sultan/temp/r/gganimate/plots/price_5.mp4\", price_5 = a1)"
  },
  {
    "objectID": "gallery/price_line.html#saved-as-video",
    "href": "gallery/price_line.html#saved-as-video",
    "title": "animated lineplot",
    "section": "Saved as Video",
    "text": "Saved as Video\nVideo"
  },
  {
    "objectID": "gallery/pop_bar.html",
    "href": "gallery/pop_bar.html",
    "title": "population in GIS countries",
    "section": "",
    "text": "Datasource: World Bank"
  },
  {
    "objectID": "gallery/pop_bar.html#raw-data",
    "href": "gallery/pop_bar.html#raw-data",
    "title": "population in GIS countries",
    "section": "raw data",
    "text": "raw data\n\n\nCode\ndataraw &lt;- read.csv2(\"data/pop_cis.csv\") # , sep = \";\",encoding = \"utf-8\"\nyears &lt;- paste(1960:2024) #, sep=\",\", collapse= \",\"\nyears &lt;- unlist(strsplit(years, \",\"))\nnew_cnames &lt;- c(\"country\", \"ccode\",  years)\ncolnames(dataraw) &lt;- new_cnames\n\n\ndata &lt;- dataraw\nrmarkdown::paged_table(head(data)) # show sample 10 rows\n# oder {r, df_print = \"paged\"}\n# sample_n(data_raw, 10"
  },
  {
    "objectID": "gallery/pop_bar.html#data-frame",
    "href": "gallery/pop_bar.html#data-frame",
    "title": "population in GIS countries",
    "section": "data frame",
    "text": "data frame\n\n\nCode\nfmil &lt;- function(x) round(x/1000000, digits = 2) # funk to x/Mill um zu verkürzen\n\n# dataframe\ndf &lt;- \n  data |&gt; \n  mutate(across(!c(country, ccode), fmil)) |&gt; \n  pivot_longer(\n    cols = !c(country, ccode),\n    names_to = \"year\",\n    values_to = \"pop\"\n  ) |&gt; \n  mutate(year = as.integer(year)) |&gt; \n  group_by(year) |&gt; \n  arrange(year, pop) |&gt; #desc(pop)\n  mutate(rank = 1:n()) |&gt; \n  ungroup()\n\nhead(df)\n\n\n#&gt; # A tibble: 6 × 5\n#&gt;   country      ccode  year   pop  rank\n#&gt;   &lt;chr&gt;        &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n#&gt; 1 Turkmenistan TKM    1960  1.64     1\n#&gt; 2 Armenia      ARM    1960  1.86     2\n#&gt; 3 Tajikistan   TJK    1960  2.11     3\n#&gt; 4 Kyrgyzstan   KGZ    1960  2.17     4\n#&gt; 5 Azerbaijan   AZE    1960  3.89     5\n#&gt; 6 Belarus      BLR    1960  8.2      6"
  },
  {
    "objectID": "gallery/pop_bar.html#plot-for-the-year-2024",
    "href": "gallery/pop_bar.html#plot-for-the-year-2024",
    "title": "population in GIS countries",
    "section": "plot for the year 2024",
    "text": "plot for the year 2024\n\n\nCode\npl24 &lt;- \n  # data -----------------------------------------------\n  df |&gt; \n  filter(\n    year==2024\n  ) |&gt;\n  mutate(\n    images = case_when(\n      ccode == \"ARM\" ~ paste0(imgpat, \"AM.png\"),\n      ccode == \"AZE\" ~ paste0(imgpat, \"AZ.png\"),\n      ccode == \"BLR\" ~ paste0(imgpat, \"BY.png\"),\n      ccode == \"KAZ\" ~ paste0(imgpat, \"KZ.png\"),\n      ccode == \"KGZ\" ~ paste0(imgpat, \"KG.png\"),\n      ccode == \"RUS\" ~ paste0(imgpat, \"RU.png\"),\n      ccode == \"TJK\" ~ paste0(imgpat, \"TJ.png\"),\n      ccode == \"TKM\" ~ paste0(imgpat, \"TM.png\"),\n      ccode == \"UZB\" ~ paste0(imgpat, \"UZ.png\"),\n      TRUE ~ ccode)\n  ) |&gt;\n  # plot aes ----------------------------------------------------\n  ggplot(aes(\n  xmin = 0,\n  xmax = pop,\n  y = rank,\n  ymin = rank - 0.45,\n  ymax = rank + 0.45,\n  fill = ccode)) +\n  geom_rect(alpha = 0.5) +\n  # axises, labels\n  scale_x_continuous(\n    limits = c(0,150),\n    breaks = seq(0, 150, 25),\n    labels = function(x) paste0(x, \"M\"),\n    expand = expansion(c(0.09, 0.0))) +\n  geom_image(aes(y= rank, image = images), \n             x = -10, size = 0.07, by=\"height\") + \n  geom_label(aes(x = pop, label = as.character(pop)), \n             colour = \"white\", hjust=0.0) +\n  geom_label(aes(label = paste(\"Year:\",year)),\n             x = 125, y = 2, size = 8, fill = \"white\", col = \"gray\") +\n  # title, caption ---------------------------------------------\n  labs(\n    x = \"Population (in millions)\",\n    y = NULL,\n    title = \"Population in CIS countries in 2024\",\n    caption = social_caption) +\n  # format, theme ----------------------------------------------\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size=14, face = \"bold\", color=\"steelblue4\", hjust = 0.5 ),\n        plot.caption = ggtext::element_markdown(size=12, hjust = 0.5),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        axis.line.x =  element_line(colour = \"gray\"),\n        axis.text.y = element_blank())\n\n# show plot\npl24"
  },
  {
    "objectID": "gallery/pop_bar.html#slopegraph-in-ggplot2",
    "href": "gallery/pop_bar.html#slopegraph-in-ggplot2",
    "title": "population in GIS countries",
    "section": "Slopegraph in ggplot2",
    "text": "Slopegraph in ggplot2\n\n\nCode\nlibrary(CGPfunctions)\n\ngg &lt;-\n  df |&gt; \n  filter(\n  year==1990 | year==2024\n  ) |&gt; \n  mutate(year=as.character(year))\n\n# graph\nnewggslopegraph(\n  dataframe = gg,\n  Times = year,Measurement = pop, Grouping = country,\n  Title = \"Population evolution in CIS countries\",\n  SubTitle = \"a comparison for the years: 1990-2024\",\n  Caption = \"Data Source: Worldbank | Plot by: \\u00A9ф\",\n  XTextSize = 18,    # Size of the times\n  YTextSize = 3,     # Size of the groups\n  TitleTextSize = 14,\n  SubTitleTextSize = 12,\n  CaptionTextSize = 12,\n  TitleJustify = \"right\",\n  SubTitleJustify = \"right\",\n  CaptionJustify = \"left\",\n  DataTextSize = 3.0\n) -&gt; slop\n\nslop"
  },
  {
    "objectID": "gallery/pop_bar.html#range-plot",
    "href": "gallery/pop_bar.html#range-plot",
    "title": "population in GIS countries",
    "section": "range plot",
    "text": "range plot\n\n\nCode\ncflags &lt;- c(\n  \"ARM\" = \"AM\", \"AZE\" = \"AZ\", \"BLR\" =\"BY\", \"KAZ\" = \"KZ\", \"KGZ\" =\"KG\", \n  \"RUS\" = \"RU\", \"TJK\" =\"TJ\", \"TKM\" = \"TM\", \"UZB\" = \"UZ\")\n# read images\nxlabels &lt;- c()\nfor(i in 1:length(cflags)){\n  imgname &lt;- names(cflags[i])\n  xlabels &lt;- c(xlabels, paste0(\"&lt;img src='\", imgpat, cflags[[i]], \".png' width='50' hight ='50'/&gt;\"))\n}\n\n# named vector\nxnames &lt;- names(cflags)\nnames(xlabels) &lt;- xnames  # zum matchen nachher für plot labels\n\n\n\n\nCode\nggtext_st &lt;- \"in &lt;span style='color:#CB5416'&gt;1990&lt;/span&gt; and \n&lt;span style='color:#267266'&gt;2024&lt;/span&gt; \\u00A9ф\"\n\nrr &lt;-\n  # data ----------------------------------------------------\n  df |&gt; \n  filter(\n    year==1990 | year==2024\n  ) |&gt; \n  select(-c(country, rank)) |&gt; \n  pivot_wider(\n    names_from = year,\n    values_from = pop\n  ) |&gt; \n  # plot -----------------------------------------------------\n  ggplot(aes(x = ccode))+\n  geom_linerange(aes(ymin = `1990`, ymax = `2024`, x= ccode),\n                 size = 0.9, alpha = 0.5) +\n  geom_point(aes(y = `1990`), colour = \"#CB5416\", size=3) +\n  geom_point(aes(y = `2024`), colour = \"#267266\", size= 3) +\n  scale_x_discrete(name = NULL, labels =  xlabels)+\n  coord_flip()+\n  labs(\n    title =  \"Population in CIS countries\", \n    subtitle = ggtext_st,\n    caption = social_caption,\n    x = NULL,\n    y = NULL\n  ) +\n  # format -----------------------------------------------------\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_textbox(hjust = 0.5),\n    plot.caption = element_textbox(hjust = 0.5, size = 11),\n    axis.text.y = element_markdown()\n  )\n\nrr"
  },
  {
    "objectID": "gallery/pop_bar.html#plot-animate",
    "href": "gallery/pop_bar.html#plot-animate",
    "title": "population in GIS countries",
    "section": "plot animate",
    "text": "plot animate\n\nbarplot\n\n\nCode\n# Title/subtitle/datasource\n\npl &lt;- \n  # data -----------------------------------------------\n  df |&gt;\n  # filter(\n  #   year==2024\n  # ) |&gt;\n  mutate(\n    images = case_when(\n      ccode == \"ARM\" ~ paste0(imgpat, \"AM.png\"),\n      ccode == \"AZE\" ~ paste0(imgpat, \"AZ.png\"),\n      ccode == \"BLR\" ~ paste0(imgpat, \"BY.png\"),\n      ccode == \"KAZ\" ~ paste0(imgpat, \"KZ.png\"),\n      ccode == \"KGZ\" ~ paste0(imgpat, \"KG.png\"),\n      ccode == \"RUS\" ~ paste0(imgpat, \"RU.png\"),\n      ccode == \"TJK\" ~ paste0(imgpat, \"TJ.png\"),\n      ccode == \"TKM\" ~ paste0(imgpat, \"TM.png\"),\n      ccode == \"UZB\" ~ paste0(imgpat, \"UZ.png\"),\n      TRUE ~ ccode)\n  ) |&gt;\n  # plot aes ----------------------------------------------------\n  ggplot(aes(\n  xmin = 0,\n  xmax = pop,\n  y = rank,\n  ymin = rank - 0.45,\n  ymax = rank + 0.45,\n  fill = ccode)) +\n  geom_rect(alpha = 0.5) +\n  # axises, labels\n  scale_x_continuous(\n    limits = c(0,150),\n    breaks = seq(0, 150, 25),\n    labels = function(x) paste0(x, \"M\"),\n    expand = expansion(c(0.09, 0.0))) +\n  geom_image(aes(y= rank, image = images), \n             x = -10, size = 0.07, by=\"height\") + \n  geom_label(aes(x = pop, label = as.character(pop)), \n             colour = \"white\", hjust=0.0) +\n  geom_label(aes(label = paste(\"Year:\",year)),\n             x = 125, y = 2, size = 8, fill = \"white\", col = \"gray\") +\n  # title, caption ---------------------------------------------\n  labs(\n    x = \"Population (in millions)\",\n    y = NULL,\n    title = \"Population evolution in CIS countries in 1960-2024\",\n    caption = social_caption) +\n  # format, theme ----------------------------------------------\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size=14, face = \"bold\", color=\"steelblue4\", hjust = 0.5 ),\n        plot.caption = ggtext::element_markdown(size=12, hjust = 0.5),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        axis.line.x =  element_line(colour = \"gray\"),\n        axis.text.y = element_blank())\n\n\n\n\nCode\n# animate\npl_anim &lt;-\n  pl +\n  transition_states(year,wrap = FALSE, transition_length = 64) + #, transition_length = \n  ease_aes(\"cubic-in-out\") +\n  enter_fade()+\n  exit_fade()#+\n  #shadow_mark()\n\n#pl_anim\n\nanim &lt;- animate(\n  pl_anim,\n  duration = 32,\n  start_pause =5,\n  end_pause = 5,\n  renderer = gifski_renderer()\n)\nanim\n\n\n\n\n\n\n\n\n\n\n\ntreemap\n\n\nCode\n# library(treemapify)\npl_tm &lt;-\n  df |&gt; \n  filter(year &gt;= 1990) |&gt; \n  ggplot(aes(\n    area = pop, fill = country,\n    label = paste(country, paste0(pop, \" Mln\"), sep = \"\\n\"))) +\n  geom_treemap()+\n  geom_treemap_text(\n    colour = \"white\",\n    place = \"centre\",\n    #face = \"bold\", # ohne grow = TRUE zu benutzen\n    #size = 10,     # ohne grow = TRUE zu benutzen\n    grow = TRUE) +\n  labs(\n    title = \"Population in CIS countries for the year: {(frame_time)}\",\n    caption = social_caption) +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(colour =  \"steelblue\", size = 15, face = \"bold\", hjust = 0.5),\n    plot.caption = element_textbox(hjust = 0.5, size = 12)) +\n  transition_time(time = year)\n\nanim_tm &lt;- animate(\n  pl_tm,\n  duration = 30,\n  start_pause =5,\n  end_pause = 5,\n  renderer = gifski_renderer()\n)\nanim_tm"
  },
  {
    "objectID": "gallery/gtTable.html#load-data-from-github",
    "href": "gallery/gtTable.html#load-data-from-github",
    "title": "gt table",
    "section": "Load data from GitHub",
    "text": "Load data from GitHub\n\n\nCode\ndf &lt;- read.csv2(\"https://raw.githubusercontent.com/sultanovf/my_datasets/main/nikohuz_2010_2023.csv\")\n# Original link: https://github.com/sultanovf/my_datasets/blob/main/nikohuz_2010_2023.csv\n# To change: https://github.com -&gt; https://raw.githubusercontent.com/\n# and skip blob/\nyears &lt;- paste(2010:2023) #, sep=\",\", collapse= \",\"\nyears &lt;- unlist(strsplit(years, \",\"))\nnew_cnames &lt;- c(\"region\", \"status\", \"area\", years)\ncolnames(df) &lt;- new_cnames\ndf |&gt; \n  kable() |&gt; \n  head()\n\n\n#&gt; [1] \"|region                     |status   |area    |  2010|  2011|  2012|  2013|  2014|  2015|  2016|  2017|  2018|  2019|  2020|  2021|  2022|  2023|\"\n#&gt; [2] \"|:--------------------------|:--------|:-------|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\"\n#&gt; [3] \"|Republic of Karakalpakstan |marriage |city    |  7756|  7982|  7431|  7490|  6630|  6236|  5641|  6234|  6643|  6748|  5327|  7535|  6906|  6160|\"\n#&gt; [4] \"|Andijan region             |marriage |city    | 13108| 11893| 13923| 14568| 13473| 12392| 12617| 13274| 14656| 15073| 14796| 14526| 13432| 12717|\"\n#&gt; [5] \"|Bukhara region             |marriage |city    | 16528| 16914| 12285|  6276|  6301|  5709|  5665|  6021|  5611|  5721|  5422|  6412|  6805|  6110|\"\n#&gt; [6] \"|Jizzakh region             |marriage |city    |  4004|  4355|  4572|  4961|  5244|  5074|  4841|  5356|  6160|  6031|  5726|  6021|  6118|  6178|\""
  },
  {
    "objectID": "gallery/gtTable.html#show-the-table-via-dt--package",
    "href": "gallery/gtTable.html#show-the-table-via-dt--package",
    "title": "gt table",
    "section": "Show the table via DT- Package:",
    "text": "Show the table via DT- Package:\n\n\nCode\ndatatable(\n  df,\n  extensions = 'Buttons', options = list(\n    dom = 'Bfrtip',\n    buttons = \n      list('copy', list(\n        extend = 'collection',\n        buttons = c('csv', 'excel'),\n        text = 'Download'\n      )),\n  pageLength = 5  \n  )\n)"
  },
  {
    "objectID": "gallery/gtTable.html#calculate-mean-for-marriage-and-devorce-by-arreas-city-village-for-the-year-2023",
    "href": "gallery/gtTable.html#calculate-mean-for-marriage-and-devorce-by-arreas-city-village-for-the-year-2023",
    "title": "gt table",
    "section": "Calculate mean for marriage and devorce by arreas (city, village) for the year 2023",
    "text": "Calculate mean for marriage and devorce by arreas (city, village) for the year 2023\n\n\nCode\ndf_2023 &lt;-\n  df |&gt; \n  select(\n    region,\n    status,\n    area,\n    `2023`\n  )\n## Median\nmar_vil_med &lt;- median(\n  sort(\n  as.vector(unlist(as.vector(df_2023[df$status == \"marriage\" & df$area == \"village\", \"2023\"]))), \n  decreasing = FALSE)\n  )\nmar_cit_med &lt;- median(\n  sort(\n  as.vector(unlist(as.vector(df_2023[df$status == \"marriage\" & df$area == \"city\", \"2023\"]))), \n  decreasing = FALSE)\n  )\ndiv_cit_med &lt;- median(\n  sort(\n  as.vector(unlist(as.vector(df_2023[df$status == \"divorce\" & df$area == \"city\", \"2023\"]))), \n  decreasing = FALSE)\n  )\ndiv_vil_med &lt;- median(\n  sort(\n  as.vector(unlist(as.vector(df_2023[df$status == \"divorce\" & df$area == \"village\", \"2023\"]))), \n  decreasing = FALSE)\n  )\n\ndf_mean &lt;- data.frame(\n  city &lt;- c(mar_cit_med, div_cit_med),\n  village &lt;- c(mar_vil_med, div_vil_med),\n  row.names = c(\"marriage\", \"divorce\")\n  )\nnames(df_mean) &lt;- c(\"city\", \"village\")\ncat(\"Mean by status (marriage, divorce) for area(city, village)\\n\")\ndf_mean\n\n\n#&gt; Mean by status (marriage, divorce) for area(city, village)\n#&gt;          city village\n#&gt; marriage 8478   11256\n#&gt; divorce  1331    1417"
  },
  {
    "objectID": "gallery/gtTable.html#pivot-table-and-create-new-total-columns",
    "href": "gallery/gtTable.html#pivot-table-and-create-new-total-columns",
    "title": "gt table",
    "section": "Pivot table and create new total columns",
    "text": "Pivot table and create new total columns\n\n\nCode\ndf |&gt; \n  pivot_longer(\n    cols = !c(region, status, area),\n    names_to = \"year\",\n    values_to = \"counts\"\n  ) |&gt; \n  pivot_wider(\n    names_from = c(status, area),\n    values_from = counts\n  ) |&gt; \n  rowwise() |&gt; \n  mutate(\n    marriage_total = sum(marriage_city, marriage_village),\n    divorce_total = sum(divorce_city, divorce_village)\n  ) -&gt; gt_df\n\ngt_df |&gt; \n  kable() |&gt; \n  head()\n\n\n#&gt; [1] \"|region                     |year | marriage_city| marriage_village| divorce_city| divorce_village| marriage_total| divorce_total|\"\n#&gt; [2] \"|:--------------------------|:----|-------------:|----------------:|------------:|---------------:|--------------:|-------------:|\"\n#&gt; [3] \"|Republic of Karakalpakstan |2010 |          7756|            10040|          593|             277|          17796|           870|\"\n#&gt; [4] \"|Republic of Karakalpakstan |2011 |          7982|             9938|          492|             186|          17920|           678|\"\n#&gt; [5] \"|Republic of Karakalpakstan |2012 |          7431|             9255|          525|             234|          16686|           759|\"\n#&gt; [6] \"|Republic of Karakalpakstan |2013 |          7490|             9035|          691|             291|          16525|           982|\""
  },
  {
    "objectID": "gallery/gtTable.html#creating-beautiful-table-with-gt",
    "href": "gallery/gtTable.html#creating-beautiful-table-with-gt",
    "title": "gt table",
    "section": "Creating beautiful table with {gt}",
    "text": "Creating beautiful table with {gt}\n\n\n\n\n\n\n\n\nNumber of concluded broken and marriages\n\n\nrecorded for 2023 in regions by areas(city, village)\n\n\nRegion\nconcluded\nbroken\n\n\ncity\nvillage\ntotal\ncity\nvillage\ntotal\n\n\n\n\nRepublic of Karakalpakstan\n6,160\n7,405\n13,565\n1,178\n755\n1,933\n\n\nAndijan region\n12,717\n12,338\n25,055\n3,135\n2,345\n5,480\n\n\nBukhara region\n6,110\n9,603\n15,713\n1,259\n1,226\n2,485\n\n\nJizzakh region\n6,178\n5,685\n11,863\n980\n699\n1,679\n\n\nKashkadarya region\n12,471\n18,437\n30,908\n1,790\n1,586\n3,376\n\n\nNavoi region\n4,163\n3,788\n7,951\n883\n609\n1,492\n\n\nNamangan region\n14,991\n8,273\n23,264\n2,978\n1,417\n4,395\n\n\nSamarkand region\n10,598\n21,611\n32,209\n2,065\n2,574\n4,639\n\n\nSurkhandarya region\n8,478\n16,396\n24,874\n1,331\n1,716\n3,047\n\n\nSyrdarya region\n3,450\n3,762\n7,212\n1,038\n544\n1,582\n\n\nTashkent region\n9,287\n12,020\n21,307\n2,244\n2,582\n4,826\n\n\nFergana region\n17,628\n13,493\n31,121\n3,732\n2,041\n5,773\n\n\nKhorezm region\n5,158\n11,256\n16,414\n1,014\n1,308\n2,322\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation: The table shows the number of new families registered in the Republic of Uzbekistan for the year 2023 (column concluded) and divorces (column broken) in each region by areas (city and village).  Colors: For concluded columns – green - if values greater or equal to the median, orange - if they are less the mean. For broken columns – red - if the values are greather or equal to median, green - if they are less then median. For total columns - blue.  Data source: Data from Statistics Agency of the Republic of Uzbekistan"
  },
  {
    "objectID": "gallery/gganimate_scatter.html",
    "href": "gallery/gganimate_scatter.html",
    "title": "scatterplot",
    "section": "",
    "text": "show the code\nimport pandas as pd\nfrom IPython.display import display, Markdown, HTML\ndata = pd.DataFrame(r.df)\n\n#data.head(10)\n\n# display(Markdown(data.to_markdown(index = False)))   # jupyter\n# Markdown(pdata.head(10).to_markdown(index = False)) # reticulate\nHTML(data.head(10).to_html())                         # html\n\n\n\n\n\n\ncountry\nyear\ncc\ngdp_per_cap\nlife_exp\nmdh\npop\n\n\n\n\n0\nArmenia\n1990\nARM\n634.6\n68.8\nam\n3.6\n\n\n1\nArmenia\n1991\nARM\n572.2\n68.6\nam\n3.6\n\n\n2\nArmenia\n1992\nARM\n356.1\n68.6\nam\n3.6\n\n\n3\nArmenia\n1993\nARM\n347.5\n68.8\nam\n3.5\n\n\n4\nArmenia\n1994\nARM\n389.8\n69.1\nam\n3.4\n\n\n5\nArmenia\n1995\nARM\n441.9\n69.3\nam\n3.3\n\n\n6\nArmenia\n1996\nARM\n484.1\n69.8\nam\n3.3\n\n\n7\nArmenia\n1997\nARM\n501.2\n69.9\nam\n3.2\n\n\n8\nArmenia\n1998\nARM\n584.4\n70.5\nam\n3.2\n\n\n9\nArmenia\n1999\nARM\n575.6\n70.3\nam\n3.2\nshow the code\nimport plotly.express as px\nimport pandas as pd\ndata = pd.DataFrame(r.df)\n\npx.scatter(data, x=\"gdp_per_cap\", y=\"life_exp\", animation_frame=\"year\", \n  animation_group=\"country\",  size=\"pop\", color=\"country\", hover_name=\"country\",\n  log_x=True, size_max=45, range_x=[100,20000], range_y=[45,90])"
  },
  {
    "objectID": "gallery/gganimate_scatter.html#read-and-prepare-data",
    "href": "gallery/gganimate_scatter.html#read-and-prepare-data",
    "title": "scatterplot",
    "section": "Read and prepare data",
    "text": "Read and prepare data\n\n\nCode\n# gus \ncfilter &lt;- c(\"Kyrgyz Republic\", \"Armenia\", \"Tajikistan\", \"Turkmenistan\", \"Belarus\",\n             \"Kazakhstan\", \"Russian Federation\",\"Uzbekistan\", \"Belarus\", \"Azerbaijan\")\n# read data ################################################################\ngdp &lt;- read.csv2(\n  \"https://raw.githubusercontent.com/sultanovf/my_datasets/refs/heads/main/GDPperCap_19902024.csv\")\nlfe &lt;- read.csv2(\n  \"https://raw.githubusercontent.com/sultanovf/my_datasets/refs/heads/main/LifeExpectancy_19902024.csv\")\npop &lt;- read.csv2(\n  \"https://raw.githubusercontent.com/sultanovf/my_datasets/refs/heads/main/pop_gus.csv\")\n\n\n# gdp data ======================================================================\nyears &lt;- paste(1980:2029) #, sep=\",\", collapse= \",\"\nyears &lt;- unlist(strsplit(years, \",\"))\nnew_cnames &lt;- c(\"country\", \"cc\",  years)\ncolnames(gdp) &lt;- new_cnames\n# head(gdp)\n# ncol(gdp)\n\n# Formatting, comma to point, na, type from string to numeric ==================\n# \"no data\" to NA\ndata &lt;- \n  gdp |&gt; \n  mutate(across(everything(), na_if, \"no data\")) |&gt; \n  mutate_at(c(3:52), function(x) as.numeric(gsub(\",\", \".\", x))) |&gt; \n  mutate_if(is.numeric, function(x) round(x, digits = 1))\n# Show Data\n# glimpse(data)\n\n# Filter =================================================================\ndf_gdp &lt;-\n  data |&gt; \n  filter(country %in% cfilter) |&gt; \n  select(c(country, cc, \"1990\":\"2024\")) |&gt; \n  mutate(across(where(is.numeric), ~replace_na(., 0))) |&gt; \n  rowwise() |&gt; \n  mutate(\n    country = case_when(\n      country == \"Kyrgyz Republic\" ~ \"Kyrgyzstan\",\n      country == \"Russian Federation\" ~ \"Russia\",\n      TRUE ~ country\n      )\n    ) |&gt; \n  pivot_longer(\n    cols = !c(country, cc),\n    names_to = \"year\",\n    values_to = \"gdp_per_cap\"\n  ) |&gt; \n  mutate(\n    year = as.integer(year)\n  )\n\n# read LifeExp data ############################################################\n\nyrs &lt;- paste(1990:2024) #, sep=\",\", collapse= \",\"\nyrs &lt;- unlist(strsplit(yrs, \",\"))\nnew_cnames &lt;- c(\"country\", \"cc\",  yrs)\ncolnames(lfe) &lt;- new_cnames\n\n# head(gdp)\n# ncol(lfe)\n\n# check if there NA\n# colSums(is.na(lfe))\n# oder\n# na_counts &lt;- lapply(lfe, function(x) sum(is.na(x)))\n\ndat &lt;-\nlfe |&gt; \n  mutate_at(c(3:37), function(x) as.numeric(gsub(\",\", \".\", x))) |&gt; \n  mutate_if(is.numeric, function(x) round(x, digits = 1))\n\ndf_lfe &lt;- \n  dat |&gt; \n  filter(country %in% cfilter) |&gt; \n  rowwise() |&gt; \n  mutate(\n    country = case_when(\n      country == \"Kyrgyz Republic\" ~ \"Kyrgyzstan\",\n      country == \"Russian Federation\" ~ \"Russia\",\n      TRUE ~ country\n    )\n  ) |&gt; \n  mutate_at(c(3:37), function(x) as.numeric(gsub(\",\", \".\", x))) |&gt; \n  mutate_if(is.numeric, function(x) round(x, digits = 1)) |&gt; \n  pivot_longer(\n    cols = !c(country, cc),\n    names_to = \"year\",\n    values_to = \"life_exp\"\n  ) |&gt; \n  mutate(\n    year = as.integer(year)\n  )\n\n# read Pop data ################################################################\n\n#yrs &lt;- paste(1990:2024) #, sep=\",\", collapse= \",\"\n#yrs &lt;- unlist(strsplit(yrs, \",\"))\nnew_cnames_pop &lt;- c(\"country\", \"iso2\", \"cc\", \"year\", \"pop\")\ncolnames(pop) &lt;- new_cnames_pop\n\ndf_pop &lt;- \n  pop |&gt; \n  mutate_at(5, function(x) as.numeric(gsub(\",\", \".\", x))) |&gt; \n  mutate(\n    pop = round(pop/1000000, digits = 1)\n  ) |&gt; \n  mutate(\n    iso2 = tolower(iso2)\n  )\n\n# Merge Data Tables ############################################################\ngdp_lfe &lt;- merge(df_gdp, df_lfe, by = c(\"country\", \"year\", \"cc\"), all.x = TRUE, all.y = TRUE)\ndf &lt;- merge(gdp_lfe, df_pop, by = c(\"country\", \"year\", \"cc\"), all = TRUE)\n\ncolnames(df) &lt;- c(\"country\", \"year\",  \"cc\", \"gdp_per_cap\", \"life_exp\", \"mdh\", \"pop\")\n\n\n\nShow some sample rows\n\n\n\n\n\n\n\n\n\n\nCode\n# oder  {r, df_print = \"paged\"} # funktioniert\n# ohne chunk option oben:\nrmarkdown::paged_table(sample_n(df, 10)) # show sample 10 rows"
  },
  {
    "objectID": "gallery/gganimate_scatter.html#plotting-with-ggplot2-gganimate",
    "href": "gallery/gganimate_scatter.html#plotting-with-ggplot2-gganimate",
    "title": "scatterplot",
    "section": "Plotting with ggplot2 & gganimate",
    "text": "Plotting with ggplot2 & gganimate\n\n\nCode\n# Create Plot\np &lt;- ggplot(data = df) +\n  geom_flag(aes(\n    x = gdp_per_cap,\n    y = life_exp,\n    size = pop,\n    country = mdh\n  )) +\n  scale_country() +\n  scale_size(range = c(5, 15)) +\n  geom_text(aes(x = 17000, y = 46, label = \"plotted by FS/ tg: @R4Pythonistas\"),\n            stat = \"unique\",\n            size = 3, color = \"red\") +\n  scale_y_continuous(\n    limits = c(45,90),breaks = seq(45, 90, 5),\n    expand = expansion(c(0.02, 0.02))\n  ) +\n  scale_x_continuous(\n    limits = c(0, 20000), breaks = seq(0, 20000, 2000),\n    labels = function(x) paste0(x/1000, \"k\"),\n    expand = expansion(c(0.02, 0.02))) +\n  guides(size = \"none\") \n  \n\n# fOrmat and (animate)\n\np &lt;- \n  p +\n  labs(\n    title = \"MDH mamlakatlarida o'rtacha umr ko'rish va aholi jon boshiga YaIM, 1990-2024\",\n    caption = paste(\n    \"DataSources: International Monetary Fund(IMF), World Bank, Our World in Dat, World Population Review\\nplotted by Fazliddin Sultonov\"),\n    x = \"YaIM jon boshiga (k = Ming)\",\n    y = \"Kutiladigan o'rta yosh\") +\n  # geom_label(aes(label = paste(\"Yil:\", year)),\n  #            x = 15000, y = 60, size = 8, fill = \"white\", col = \"gray\")+  #\n  theme(\n    plot.title = element_text(\n      color = \"tomato\", size = 10, face = \"bold\", hjust = 0.5),\n    plot.caption = element_text(\n      color = \"dodgerblue\", size = 8, face = \"bold.italic\"),\n    plot.background = element_rect(fill = \"floralwhite\"), \n    panel.background = element_rect(fill = \"aliceblue\"),\n    legend.background = element_rect(fill = \"lightblue\")\n  ) #+\n # transition_reveal(year)\n\np &lt;- p +\n  transition_reveal(year) +\n  geom_label(aes(label = paste(\"Yil:\", year)),\n             x = 17000, y = 87, size = 8, fill = \"floralwhite\", col = \"lightblue\")\n  # labs(title = \"Yil: {frame_time}\") \n\n# Animate Plot\np_anim &lt;- \n  p |&gt;\n  animate(\n    duration = 20,\n    fps = 10,\n    start_pause = 5,\n    end_pause = 15,\n    hight = 460,\n    with = 860,\n    renderer = av_renderer() # for video ffmpeg_renderer()\n  )\n\np_anim"
  },
  {
    "objectID": "gallery/gganimate_scatter.html#plotting-with-ggplot2-plotly",
    "href": "gallery/gganimate_scatter.html#plotting-with-ggplot2-plotly",
    "title": "scatterplot",
    "section": "Plotting with ggplot2 & plotly",
    "text": "Plotting with ggplot2 & plotly\n\n\nCode\n# plotly with ggplot ===========================================================\n\nplt &lt;- ggplot(data = df,aes(\n  x = gdp_per_cap,\n  y = life_exp,\n  colour = country\n  )) +\n  #geom_rect(alpha = 0.5, frame = year) +\n  geom_point(aes(size = pop, frame = year)) +\n  scale_size(range = c(4, 12)) +\n  scale_y_continuous(\n    limits = c(45,90),breaks = seq(45, 90, 5),\n    expand = expansion(c(0.02, 0.02))\n  ) +\n  scale_x_continuous(\n    limits = c(0, 20000), breaks = seq(0, 20000, 2000),\n    labels = function(x) paste0(x/1000, \"k\"),\n    expand = expansion(c(0.02, 0.02)))+\n  labs(\n  title = \"MDH mamlakatlarida o'rtacha umr ko'rish va\\n aholi jon boshiga YaIM, 1990-2024\",\n  x = \"YaIM jon boshiga (k = Ming)\",\n  y = \"Kutiladigan o'rta yosh\") +\n  theme(\n    plot.title = element_text(\n      color = \"tomato\", size = 12, face = \"bold\", hjust = 0.0),\n    plot.caption = element_text(\n      color = \"dodgerblue\", size = 8, face = \"bold.italic\"),\n    plot.background = element_rect(fill = \"floralwhite\"), \n    panel.background = element_rect(fill = \"aliceblue\"),\n    legend.background = element_rect(fill = \"lightblue\")\n  )\n\n# layout\nfig &lt;- \n  ggplotly(plt) |&gt; \n  layout(\n    legend=list(title =list(text = \" GUS\")),\n    margin = list(l = 50, r = 50, b = 100, t = 50),\n    annotations = list(\n      x = 1, y = 0.02, text = \"DataSources: International Monetary Fund(IMF), World Bank, Our World in Dat, World Population Review\", \n           showarrow = F, xref='paper', yref='paper', \n           xanchor='right', yanchor='auto', xshift=0, yshift=0,\n           font=list(size=10, color=\"red\")),\n    images = list(\n      list(source = \"gallery_img/cis.png\",\n           xref = \"x\",\n           yref = \"y\",\n           x = 100,\n           y = 79,\n           sizex = 2,\n           sizey = 2,\n           sizing = \"stretch\",\n           opacity = 0.4,\n           layer = \"below\")\n      )\n  )\n\n# animation options\nfig &lt;- \n  fig |&gt; \n  animation_opts(\n    easing = \"elastic\", redraw = FALSE\n  ) |&gt; \n  animation_slider(\n    currentvalue = list(prefix = \"Yil: \", font = list(color=\"red\"))\n  )\n# show plot\nfig"
  },
  {
    "objectID": "gallery/gganimate_bar.html#load-data-from-github",
    "href": "gallery/gganimate_bar.html#load-data-from-github",
    "title": "barplot via gganimate",
    "section": "Load data from GitHub",
    "text": "Load data from GitHub\nData Source: worldbank\n\n\nCode\ndf &lt;- read.csv2(\"https://raw.githubusercontent.com/sultanovf/my_datasets/main/GDP_PerCapita_PPP_19902023.csv\")\nyears &lt;- paste(1990:2023) #, sep=\",\", collapse= \",\"\nyears &lt;- unlist(strsplit(years, \",\"))\nnew_cnames &lt;- c(\"CountryName\", \"CountryCode\",  years)\ncolnames(df) &lt;- new_cnames\n# Country names to plotting\ncountries &lt;- c(\"UAE\", \"Brazil\", \"Switzerland\", \"Germany\", \"France\", \"UK\", \"Indonesia\",\n               \"India\", \"Iran\", \"Iraq\", \"Italy\", \"Kyrgyzstan\", \"Russia\", \"Singapore\", \n               \"Sweden\", \"Tajikistan\", \"Turkiye\", \"USA\", \"Uzbekistan\", \"Kazakhstan\")\n\n# Change some country names\ndf &lt;- df |&gt; \n  rowwise() |&gt; \n  mutate(\n    CountryName = case_when(\n      CountryName == \"United Arab Emirates\" ~ \"UAE\",\n      CountryName == \"Kyrgyz Republic\" ~ \"Kyrgyzstan\",\n      CountryName == \"Iran, Islamic Rep.\" ~ \"Iran\",\n      CountryName == \"Russian Federation\" ~ \"Russia\",\n      CountryName == \"United Kingdom\" ~ \"UK\",\n      CountryName == \"United States\" ~ \"USA\",\n      TRUE ~ CountryName\n    )\n  ) |&gt; \n  filter(\n    CountryName %in% countries\n  ) |&gt; \n  mutate_if(is.numeric, f &lt;- function(x) round(x/1000, 2))\n\ndf |&gt; \n  kable() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountryName\nCountryCode\n1990\n1991\n1992\n1993\n1994\n1995\n1996\n1997\n1998\n1999\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n\n\n\n\nUAE\nARE\n107.95\n103.01\n101.03\n97.38\n99.37\n101.44\n101.53\n102.91\n97.03\n94.16\n98.71\n94.91\n92.42\n95.81\n100.25\n98.05\n94.11\n81.01\n70.25\n58.20\n55.72\n58.54\n58.99\n61.36\n63.31\n66.99\n70.11\n70.05\n70.41\n70.64\n66.59\n68.91\n73.72\n75.63\n\n\nBrazil\nBRA\n12.50\n12.41\n12.14\n12.54\n13.06\n13.40\n13.49\n13.74\n13.59\n13.46\n13.86\n13.87\n14.11\n14.10\n14.75\n15.05\n15.48\n16.25\n16.91\n16.73\n17.82\n18.36\n18.54\n18.93\n18.87\n18.04\n17.31\n17.40\n17.57\n17.65\n16.96\n17.67\n18.12\n18.55\n\n\nSwitzerland\nCHE\n64.59\n63.20\n62.48\n61.84\n62.13\n62.01\n62.03\n63.28\n65.00\n65.77\n67.99\n68.62\n68.06\n67.53\n68.88\n70.32\n72.73\n74.90\n76.04\n73.37\n74.96\n75.48\n75.56\n76.03\n76.88\n77.26\n78.00\n78.33\n79.98\n80.32\n78.02\n81.60\n83.02\n82.91\n\n\nGermany\nDEU\n42.57\n44.42\n44.93\n44.20\n45.10\n45.67\n45.90\n46.65\n47.59\n48.45\n49.80\n50.55\n50.36\n49.98\n50.58\n50.98\n52.99\n54.64\n55.27\n52.25\n54.52\n57.72\n57.85\n57.95\n58.98\n59.35\n60.18\n61.56\n61.98\n62.51\n60.07\n61.94\n62.61\n61.91\n\n\nFrance\nFRA\n40.54\n40.61\n41.05\n40.62\n41.42\n42.14\n42.58\n43.42\n44.81\n46.11\n47.59\n48.18\n48.37\n48.43\n49.43\n49.88\n50.75\n51.66\n51.50\n49.77\n50.49\n51.34\n51.26\n51.29\n51.53\n51.92\n52.35\n53.40\n54.20\n55.01\n50.72\n53.83\n54.99\n55.21\n\n\nUK\nGBR\n35.55\n35.05\n35.10\n35.88\n37.17\n38.01\n38.89\n40.70\n41.97\n43.11\n44.81\n45.79\n46.42\n47.66\n48.53\n49.52\n50.33\n51.25\n50.73\n48.03\n48.72\n48.89\n49.29\n49.84\n51.05\n51.78\n52.37\n53.40\n53.82\n54.40\n48.58\n52.84\n54.52\n54.13\n\n\nIndonesia\nIDN\n4.92\n5.16\n5.40\n5.66\n5.98\n6.37\n6.76\n6.96\n5.95\n5.91\n6.11\n6.25\n6.44\n6.66\n6.90\n7.21\n7.50\n7.88\n8.24\n8.51\n8.93\n9.36\n9.80\n10.22\n10.61\n11.01\n11.44\n11.90\n12.39\n12.90\n12.52\n12.90\n13.50\n14.07\n\n\nIndia\nIND\n2.19\n2.17\n2.24\n2.30\n2.40\n2.53\n2.67\n2.73\n2.84\n3.03\n3.09\n3.19\n3.25\n3.44\n3.66\n3.88\n4.13\n4.38\n4.45\n4.74\n5.07\n5.26\n5.48\n5.75\n6.10\n6.51\n6.97\n7.36\n7.75\n7.96\n7.43\n8.09\n8.59\n9.17\n\n\nIran\nIRN\n9.47\n10.27\n10.36\n10.14\n9.93\n10.03\n10.53\n10.52\n10.57\n10.62\n11.05\n11.13\n11.91\n12.82\n13.16\n13.36\n13.82\n14.73\n14.56\n14.51\n15.14\n15.34\n14.58\n14.15\n14.58\n14.05\n15.01\n15.20\n14.73\n14.12\n14.47\n15.04\n15.50\n16.15\n\n\nIraq\nIRQ\n10.69\n3.80\n4.89\n6.08\n6.01\n5.93\n6.38\n7.49\n9.79\n11.14\n12.60\n12.42\n11.04\n6.78\n10.11\n9.98\n10.46\n10.75\n11.41\n11.38\n11.73\n12.19\n13.27\n13.64\n13.19\n13.45\n14.93\n14.31\n14.34\n14.78\n12.69\n12.60\n13.27\n12.59\n\n\nItaly\nITA\n42.90\n43.53\n43.86\n43.46\n44.38\n45.66\n46.23\n47.05\n47.89\n48.66\n50.48\n51.44\n51.49\n51.33\n51.73\n51.89\n52.67\n53.18\n52.32\n49.33\n50.02\n50.29\n48.66\n47.21\n46.78\n47.19\n47.88\n48.75\n49.30\n50.11\n45.84\n49.90\n52.06\n52.70\n\n\nKazakhstan\nKAZ\n17.67\n15.63\n14.81\n13.49\n11.97\n11.21\n11.44\n11.82\n11.80\n12.23\n13.47\n15.32\n16.82\n18.32\n19.94\n21.68\n23.75\n25.57\n25.92\n25.72\n27.21\n28.80\n29.77\n31.10\n31.93\n31.85\n31.74\n32.60\n33.49\n34.55\n33.25\n33.89\n34.19\n35.45\n\n\nKyrgyzstan\nKGZ\n6.10\n5.52\n4.70\n3.97\n3.18\n2.97\n3.14\n3.40\n3.42\n3.49\n3.64\n3.80\n3.76\n3.98\n4.21\n4.16\n4.24\n4.56\n4.89\n4.98\n4.89\n5.12\n5.03\n5.47\n5.58\n5.68\n5.81\n5.96\n6.07\n6.21\n5.66\n5.80\n6.14\n6.40\n\n\nRussia\nRUS\n29.95\n28.35\n24.21\n22.12\n19.35\n18.55\n17.88\n18.16\n17.23\n18.39\n20.31\n21.44\n22.55\n24.30\n26.16\n27.94\n30.33\n32.96\n34.69\n31.98\n33.40\n34.80\n36.10\n36.63\n36.22\n35.39\n35.36\n35.93\n36.91\n37.70\n36.75\n38.94\n38.26\n39.75\n\n\nSingapore\nSGP\n45.37\n47.05\n48.69\n52.91\n56.97\n59.23\n61.12\n64.01\n60.52\n63.47\n68.02\n65.50\n67.45\n71.57\n77.70\n81.49\n86.09\n90.03\n86.95\n84.48\n95.04\n98.87\n100.75\n103.91\n106.60\n108.48\n110.93\n115.83\n119.34\n119.57\n115.30\n131.86\n132.47\n127.54\n\n\nSweden\nSWE\n39.97\n39.24\n38.56\n37.55\n38.74\n40.06\n40.63\n41.85\n43.63\n45.45\n47.54\n48.10\n48.99\n49.94\n51.90\n53.17\n55.34\n56.82\n56.12\n53.23\n55.92\n57.28\n56.52\n56.71\n57.64\n59.59\n60.07\n60.79\n61.26\n61.84\n60.06\n63.38\n64.62\n64.19\n\n\nTajikistan\nTJK\n4.16\n3.77\n2.63\n2.17\n1.68\n1.45\n1.18\n1.19\n1.24\n1.28\n1.37\n1.47\n1.59\n1.73\n1.88\n1.96\n2.06\n2.18\n2.31\n2.36\n2.46\n2.59\n2.72\n2.86\n2.98\n3.08\n3.22\n3.37\n3.55\n3.73\n3.81\n4.07\n4.31\n4.58\n\n\nTurkiye\nTUR\n12.50\n12.37\n12.76\n13.50\n12.65\n13.41\n14.17\n15.00\n15.12\n14.41\n15.18\n14.10\n14.80\n15.45\n16.73\n17.99\n18.99\n19.79\n19.70\n18.50\n19.75\n21.64\n22.39\n23.98\n24.83\n25.99\n26.50\n28.12\n28.58\n28.40\n28.65\n31.64\n33.06\n34.41\n\n\nUSA\nUSA\n44.40\n43.76\n44.68\n45.30\n46.55\n47.24\n48.45\n50.00\n51.64\n53.49\n55.06\n55.04\n55.46\n56.52\n58.15\n59.63\n60.70\n61.33\n60.82\n58.74\n59.82\n60.32\n61.25\n62.11\n63.21\n64.60\n65.30\n66.48\n68.10\n69.46\n67.27\n71.06\n72.17\n73.64\n\n\nUzbekistan\nUZB\n3.81\n3.71\n3.22\n3.07\n2.86\n2.78\n2.77\n2.86\n2.94\n3.03\n3.11\n3.19\n3.28\n3.38\n3.59\n3.79\n4.03\n4.35\n4.66\n4.96\n5.18\n5.43\n5.73\n6.05\n6.36\n6.70\n6.97\n7.16\n7.45\n7.75\n7.75\n8.16\n8.45\n8.77"
  },
  {
    "objectID": "gallery/gganimate_bar.html#pivot-table",
    "href": "gallery/gganimate_bar.html#pivot-table",
    "title": "barplot via gganimate",
    "section": "Pivot table",
    "text": "Pivot table\n\n\nCode\ndf_pivot &lt;- df |&gt; \n  pivot_longer(\n    cols = !c(CountryName, CountryCode),\n    names_to = \"Years\",\n    values_to = \"GDPperCap\") |&gt; \n  select(-CountryCode) |&gt; \n  mutate(\n    Years = as.integer(Years),\n    GDPperCap = round(GDPperCap, 2)\n  ) |&gt; \n  group_by(Years ) |&gt; \n  arrange(Years, GDPperCap) |&gt; \n  mutate(rank = 1:n()) |&gt; \n  ungroup()\n#\ndf_pivot |&gt; \n  as.tibble() |&gt; \n  head()\n\n\n#&gt; # A tibble: 6 × 4\n#&gt;   CountryName Years GDPperCap  rank\n#&gt;   &lt;chr&gt;       &lt;int&gt;     &lt;dbl&gt; &lt;int&gt;\n#&gt; 1 India        1990      2.19     1\n#&gt; 2 Uzbekistan   1990      3.81     2\n#&gt; 3 Tajikistan   1990      4.16     3\n#&gt; 4 Indonesia    1990      4.92     4\n#&gt; 5 Kyrgyzstan   1990      6.1      5\n#&gt; 6 Iran         1990      9.47     6"
  },
  {
    "objectID": "gallery/gganimate_bar.html#barplot",
    "href": "gallery/gganimate_bar.html#barplot",
    "title": "barplot via gganimate",
    "section": "Barplot",
    "text": "Barplot\n\n\nCode\nplt = ggplot(df_pivot, aes(\n    xmin = 0,\n    xmax = GDPperCap,\n    y = rank,\n    ymin = rank - 0.45,\n    ymax = rank + 0.45,\n    fill = CountryName,\n    label = round(GDPperCap, 0))) +\n  geom_rect(alpha = 0.5) +\n  geom_text(aes(x = GDPperCap, label = as.character(GDPperCap)),size = 2.0, colour = \"steelblue4\", hjust = \"left\") +\n  geom_text(aes(x = 0, label = CountryName),size = 2.5, colour = \"lightsteelblue4\", hjust = \"left\") +\n  scale_x_continuous(limits = c(0,140),breaks = seq(0, 135, 5),\n                     labels = function(x) paste(\"$\", x)) +\n  labs(\n    x = \"ВВП на душу населения, *(в тысячах)*\",\n    y = NULL,\n    title = \"ВВП на душу населения\") +\n  geom_label(aes(label = paste(\"Год:\", Years)),\n             x = 120, y = 2, size = 8, fill = \"white\", col = \"gray\") +\n  theme_classic() +\n  theme(legend.position = \"none\",\n    axis.line.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 10),\n    axis.title.x = element_markdown(color= \"lightskyblue4\", size = 10,),\n    #title = element_text(colour =  \"blue\", size = 10, hjust = 1),\n    plot.title = element_text(colour =  \"steelblue\", size = 15, face = \"bold\", hjust = 0.065)\n    )\n\n  #guides(fill = FALSE)\nplt"
  },
  {
    "objectID": "gallery/gganimate_bar.html#animate-plot",
    "href": "gallery/gganimate_bar.html#animate-plot",
    "title": "barplot via gganimate",
    "section": "Animate Plot",
    "text": "Animate Plot\n\n\nCode\nplt_animat = plt +\n  #geom_text(aes(label = round(GDPperCap, 2)),colour =  \"darkgray\", vjust=-0.5)+\n  facet_wrap(~Years) +\n  facet_null() +\n  transition_time(Years)\n  #labs(title = \"Year: {frame_time}\") \n  # theme(\n  #   title = element_markdown(colour =  \"gray\", size = 20)\n  # )\n\nplt_animat |&gt;\n  animate(\n    duration = 30,\n    fps = 10,\n    start_pause = 10,\n    end_pause = 20,\n  ) -&gt; my_plt\nmy_plt"
  },
  {
    "objectID": "gallery/boxplot.html",
    "href": "gallery/boxplot.html",
    "title": "Boxplot",
    "section": "",
    "text": "show the code\n# ==============================================================================\n## Create Box-Plot in R\n### Library Package\n# library(\"ggplot2\")\n\n### Create Data\ngroups &lt;- sample(c(\"GrupA\", \"GrupB\"), size = 100, replace = TRUE)\nvalues &lt;- sample(9:31, 100, replace = TRUE)\ndf &lt;- data.frame(groups, values)\n\n### Create Plots\nggplot(df, aes(x = groups, y = values, fill=groups)) +\n  stat_boxplot(geom = \"errorbar\", width = 0.25) + \n  geom_boxplot() +\n  stat_summary(\n    fun = \"mean\", geom = \"point\", shape = 18, size = 4, color = \"tomato1\"\n    ) +\n  scale_fill_manual(values=c(\"peachpuff\", \"mistyrose\")) +\n  labs(title = \"Sample Box-Plot in R (red point = mean) \\u00A9ф\",\n       x = \"Gruppalar\",\n       y = \"Qiymatlar\") +\n  theme_light()+\n  #theme_minimal() +\n  theme(legend.position = \"none\",\n    plot.title = element_text(color=\"steelblue4\", size=14, face=\"bold.italic\"),\n    axis.title.x = element_text(color=\"cadetblue4\", size=12, face=\"bold\"),\n    axis.title.y = element_text(color=\"tomato4\", size=12, face=\"bold\")) \n\n\n\n\n\n\n\n\n\n\n\n\nR base boxplot function\n# With R base boxplot function\nboxplot(\n  values ~ groups, d,\n  xlab = \"Gruppalar\",\n  ylab = \"Qiymatlar\",\n  main = \"A sample Box-Plot\",\n  col= \"azure\" )\nabline(h=means$values, text = \"mean\", col=\"tomato1\", lwd=1, lty = 2)\n\n\n\n\n\n\nshow the code\n## ============================================================================\n## Create Box-Plot in Python\n#### Import module\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n### Create DataF\ngroups = np.random.choice([\"GrupA\", \"GrupB\"], size = 100, replace = True)\nvalues = list(np.random.randint(9, 31, size = 100))\n\n### Create Plots\ndf = pd.DataFrame(list(zip(groups, values)), columns = [\"groups\", \"values\"])\nsns.boxplot(x=\"groups\", y=\"values\", data = df)\nplt.xlabel(\"Gruppalar\")\nplt.ylabel(\"Qiymatlar\")\nplt.title(\"Sample Box-Plot in Python \\u00A9ф\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Fazliddin Sultonov",
    "section": "",
    "text": "Educated is who knows where to find what he does not know.\n— Georg Simmel\n\n\nAssalomu alaykum! Kamina Fazliddin Sultonov, I am interested in data analysis, data science and visualization. As tools for this I am passionate about learning  and . While learning I take notes diligently . The notes to myself I will publish in this little blog. And I hope that might be of interest/use to some newbies like me, who want to learn in R or Python. Suggestions, feedbacks, critiques and compliments I always welcome, so feel free to contact me. Thanks! \n\n\n\n Back to top"
  },
  {
    "objectID": "gallery/geom_flag.html",
    "href": "gallery/geom_flag.html",
    "title": "plotting via ggimage",
    "section": "",
    "text": "Data Source: Wikipedia"
  },
  {
    "objectID": "gallery/geom_flag.html#load-clean-data",
    "href": "gallery/geom_flag.html#load-clean-data",
    "title": "plotting via ggimage",
    "section": "Load & Clean Data",
    "text": "Load & Clean Data\n\nWikipediadan jadvaln o’qib olish\n\n\nCode\n# load table from web\nurl_medal &lt;- \"https://en.wikipedia.org/wiki/2024_Summer_Olympics_medal_table\"\npage_medal &lt;- read_html(url_medal)\n\n# scrape table\npage_medal |&gt; \n  html_nodes(\"table\") |&gt; \n  html_table() -&gt; lst_parij24\n\ndf_par24 &lt;- lst_parij24[[4]]\n\nhead(df_par24) |&gt; \n  kable()\n\n\n\n\n\nRank\nNOC\nGold\nSilver\nBronze\nTotal\n\n\n\n\n1\nUnited States‡\n40\n44\n42\n126\n\n\n2\nChina\n40\n27\n24\n91\n\n\n3\nJapan\n20\n12\n13\n45\n\n\n4\nAustralia\n18\n19\n16\n53\n\n\n5\nFrance*\n16\n26\n22\n64\n\n\n6\nNetherlands\n15\n7\n12\n34\n\n\n\n\n\n\n\nJadvalga ishlov berish \n(Ustun nomlarini o’zgartirib davlat nomlaridagi kerakmas string larni olib tashlash)\n\n\nCode\ndf &lt;- df_par24 |&gt; \n  select(\n    Numer = Rank,\n    Davlat = NOC,\n    Oltin = Gold,\n    Kumush = Silver,\n    Bronza = Bronze,\n    Jami = Total\n  ) |&gt; \n  mutate(\n    Davlat = str_remove(Davlat, \"[‡*]\")\n  ) \n\ndf &lt;- df[-c(47,84, 93), ]\n\nhead(df) |&gt; \n  kable()\n\n\n\n\n\nNumer\nDavlat\nOltin\nKumush\nBronza\nJami\n\n\n\n\n1\nUnited States\n40\n44\n42\n126\n\n\n2\nChina\n40\n27\n24\n91\n\n\n3\nJapan\n20\n12\n13\n45\n\n\n4\nAustralia\n18\n19\n16\n53\n\n\n5\nFrance\n16\n26\n22\n64\n\n\n6\nNetherlands\n15\n7\n12\n34\n\n\n\n\n\n\n\nMapping \n(jadvalga countycode paketidagi isocodi ustunini qo’shish)\n\n\nCode\n# usul #1\n# df$cc &lt;- countrycode::countrycode(\n#   sourcevar = df$Davlat, \n#   origin = \"country.name\",\n#   destination = \"iso2c\")\n\n# usul #2 dplyr\ndata &lt;- df |&gt; \n  slice_head(n = 20) |&gt; \n  mutate(\n    cc = countrycode::countrycode(\n      sourcevar = Davlat,\n      origin = \"country.name.en\",\n      destination = \"iso2c\")\n      ) |&gt; \n  select(-Numer)\n\nhead(data) |&gt; \n  kable()\n\n\n\n\n\nDavlat\nOltin\nKumush\nBronza\nJami\ncc\n\n\n\n\nUnited States\n40\n44\n42\n126\nUS\n\n\nChina\n40\n27\n24\n91\nCN\n\n\nJapan\n20\n12\n13\n45\nJP\n\n\nAustralia\n18\n19\n16\n53\nAU\n\n\nFrance\n16\n26\n22\n64\nFR\n\n\nNetherlands\n15\n7\n12\n34\nNL\n\n\n\n\n\n\n\nPreparing \nJadvalni grafik yasash holatiga ob kelish\n\n\nCode\n# povot data\npv_data &lt;- data |&gt;\n  mutate(\n    cc = base::tolower(cc)\n  ) |&gt; \n  pivot_longer(\n    cols = c(\"Oltin\", \"Kumush\", \"Bronza\"),\n    names_to = \"Medal\",\n    values_to = \"Count\"\n  )\n\n# Grafikda umumiy medallar sonini kursatisch uchun\ndf_plt &lt;- pv_data |&gt; \n  group_by(Davlat) |&gt; \n  summarise(Total = sum(Count)) |&gt; \n  ungroup()\n\ndf_plt |&gt; \n  kable()\n\n\n\n\n\nDavlat\nTotal\n\n\n\n\nAustralia\n53\n\n\nBrazil\n20\n\n\nCanada\n27\n\n\nChina\n91\n\n\nFrance\n64\n\n\nGermany\n33\n\n\nGreat Britain\n65\n\n\nHungary\n19\n\n\nIreland\n7\n\n\nItaly\n40\n\n\nJapan\n45\n\n\nKenya\n11\n\n\nNetherlands\n34\n\n\nNew Zealand\n20\n\n\nNorway\n8\n\n\nSouth Korea\n32\n\n\nSpain\n18\n\n\nSweden\n11\n\n\nUnited States\n126\n\n\nUzbekistan\n13"
  },
  {
    "objectID": "gallery/geom_flag.html#plotting",
    "href": "gallery/geom_flag.html#plotting",
    "title": "plotting via ggimage",
    "section": "Plotting",
    "text": "Plotting\n\nCreate Plot \n(grafik yasash)\n\n\nCode\nmy_color &lt;- c(\"Oltin\" = \"gold\", \"Bronza\" = \"#cd7f32\", \"Kumush\" = \"#C0C0C0\")\nplt &lt;- ggplot(\n  data = pv_data, aes(\n    x = reorder(Davlat, Count), \n    y = Count, \n    fill = Medal, \n    label = Count)) +\n  geom_bar(stat = \"identity\") +\n  #scale_y_continuous(limits = c(0,130),breaks = seq(0, 130, 10)) +\n  geom_text(size = 2.7, colour = \"blue\",               # balken ichidagi text\n            position = position_stack(vjust = 0.5))+\n  geom_text(data = df_plt,                             # tashqaridagi text\n            aes(x = reorder(Davlat, Total), \n                y = Total, label = paste(\"= \", Total), \n                fill = NULL), \n            size = 3.0, family = \"serif\", fontface = \"bold\",\n            nudge_y = 5)+\n  scale_fill_manual(values = my_color) +  \n  coord_flip() +                                        # rotatsya axis\n  expand_limits(y = -3) +\n  theme_minimal()\nplt\n\n\n\n\n\n\n\n\n\nCode\n# to save as png\n# ggsave(\"plots/p_prefinal.png\", plot = plt)\n\n\n\n\nImproving \n(Grafikka jilov berish, sarlavha, text. rang, etc.)\n\n\nCode\nplt + \n  labs(title = \"Parij 2024:\",\n       subtitle = \"Medallar bo'yicha top yigirmata davlatlar\",\n       caption = \"Data Source: Wikipedia, Plotting by ФС: @sultanof.uzb\",\n       x = \"\",\n       y = \"medallar soni\") +\n  theme(plot.title = element_text(color = \"dodgerblue4\", size = 12,\n                                  face = \"bold\", hjust = 0.5),\n        plot.subtitle = element_text(color = \"dodgerblue4\", size = 10,\n                                  face = \"bold\", hjust = 0.5),\n        plot.caption = element_text(color = \"dodgerblue\", size = 10,\n                                    face = \"italic\"),\n        plot.background = element_rect(fill = \"aliceblue\"),\n        legend.title = element_blank(),\n        legend.background = element_blank(),\n        legend.position = \"top\") +\n  ggimage::geom_flag(aes(y = -3, image = cc), size = 0.07) -&gt; p_parij\np_parij"
  },
  {
    "objectID": "gallery/gganimate_line.html#load-data-from-github",
    "href": "gallery/gganimate_line.html#load-data-from-github",
    "title": "lineplot via gganimate",
    "section": "Load data from GitHub",
    "text": "Load data from GitHub\nData Source: United Nations, Department of Economic and Social Affairs, Population Division (2018). World Urbanization Prospects: The 2018\n\n\nCode\ndf &lt;- read.csv2(\"https://raw.githubusercontent.com/sultanovf/my_datasets/main/urban_population_19502025.csv\")\nyears &lt;- paste(1950:2025) #, sep=\",\", collapse= \",\"\nyears &lt;- unlist(strsplit(years, \",\"))\nnew_cnames &lt;- c(\"country\",  years)\ncolnames(df) &lt;- new_cnames\n# Country names to plotting\ncountries &lt;- c(\"Afghanistan\", \"Uzbekistan\", \"Kazakhstan\", \"Kyrgyzstan\", \"Tajikistan\", \"Turkmenistan\",\"Russian Federation\")\n\n\n\nData for Urban Population\n\n\nCode\ndf_urban &lt;- df\ndf_urban |&gt; \n  sample_n(3, replace = FALSE) |&gt; \n  kable() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\n1950\n1951\n1952\n1953\n1954\n1955\n1956\n1957\n1958\n1959\n1960\n1961\n1962\n1963\n1964\n1965\n1966\n1967\n1968\n1969\n1970\n1971\n1972\n1973\n1974\n1975\n1976\n1977\n1978\n1979\n1980\n1981\n1982\n1983\n1984\n1985\n1986\n1987\n1988\n1989\n1990\n1991\n1992\n1993\n1994\n1995\n1996\n1997\n1998\n1999\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n2024\n2025\n\n\n\n\nEstonia\n49.7\n50.5\n51.3\n52.0\n52.8\n53.6\n54.4\n55.2\n56.0\n56.8\n57.5\n58.3\n59.1\n59.8\n60.6\n61.3\n62.1\n62.8\n63.6\n64.3\n64.9\n65.5\n66.0\n66.5\n67.1\n67.6\n68.1\n68.6\n69.1\n69.5\n69.7\n69.9\n70.1\n70.3\n70.6\n70.8\n71.0\n71.2\n71.4\n71.4\n71.2\n71.0\n70.9\n70.7\n70.5\n70.3\n70.1\n69.9\n69.7\n69.5\n69.4\n69.2\n69.1\n69.0\n68.9\n68.7\n68.6\n68.5\n68.4\n68.2\n68.1\n68.0\n68.0\n68.1\n68.3\n68.4\n68.6\n68.7\n68.9\n69.1\n69.2\n69.4\n69.6\n69.8\n70.0\n70.2\n\n\nZimbabwe\n10.6\n10.8\n11.0\n11.2\n11.4\n11.6\n11.8\n12.0\n12.2\n12.4\n12.6\n12.8\n13.1\n13.6\n14.1\n14.6\n15.2\n15.7\n16.3\n16.9\n17.4\n17.9\n18.4\n18.9\n19.4\n19.9\n20.4\n20.8\n21.3\n21.9\n22.4\n22.9\n23.4\n24.1\n24.7\n25.4\n26.1\n26.8\n27.5\n28.2\n29.0\n29.7\n30.5\n30.9\n31.3\n31.7\n32.1\n32.5\n32.9\n33.3\n33.8\n34.2\n34.6\n34.5\n34.3\n34.1\n33.9\n33.7\n33.6\n33.4\n33.2\n33.0\n32.8\n32.7\n32.5\n32.4\n32.3\n32.2\n32.2\n32.2\n32.2\n32.3\n32.4\n32.5\n32.7\n32.9\n\n\nAntigua and Barbuda\n30.1\n31.0\n32.0\n32.9\n33.9\n34.9\n35.9\n36.9\n37.9\n39.0\n39.7\n39.0\n38.4\n37.8\n37.2\n36.6\n36.0\n35.4\n34.8\n34.2\n33.8\n33.9\n34.0\n34.1\n34.1\n34.2\n34.3\n34.4\n34.5\n34.5\n34.6\n34.7\n34.8\n34.9\n34.9\n35.0\n35.1\n35.2\n35.3\n35.3\n35.4\n35.5\n35.1\n34.7\n34.3\n34.0\n33.6\n33.2\n32.9\n32.5\n32.1\n31.7\n31.1\n30.5\n29.8\n29.2\n28.6\n28.0\n27.4\n26.8\n26.2\n25.7\n25.5\n25.4\n25.2\n25.0\n24.8\n24.7\n24.6\n24.5\n24.4\n24.4\n24.3\n24.3\n24.3\n24.4\n\n\n\n\n\n\n\nData for Rural Population\n\n\nCode\n# new daf for rural, values = 100 - values\ndf_rural &lt;- df # df rural\n\ndf_rural &lt;-\n  df_rural|&gt; \n  mutate_if(is.numeric, fun &lt;- function(x) 100-x)\n# show\ndf_rural |&gt; \n  sample_n(3, replace = FALSE) |&gt; \n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\n1950\n1951\n1952\n1953\n1954\n1955\n1956\n1957\n1958\n1959\n1960\n1961\n1962\n1963\n1964\n1965\n1966\n1967\n1968\n1969\n1970\n1971\n1972\n1973\n1974\n1975\n1976\n1977\n1978\n1979\n1980\n1981\n1982\n1983\n1984\n1985\n1986\n1987\n1988\n1989\n1990\n1991\n1992\n1993\n1994\n1995\n1996\n1997\n1998\n1999\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n2024\n2025\n\n\n\n\nGermany\n32.1\n31.7\n31.4\n31.0\n30.7\n30.3\n30.0\n29.6\n29.3\n29.0\n28.6\n28.3\n28.2\n28.2\n28.1\n28.0\n28.0\n27.9\n27.9\n27.8\n27.7\n27.7\n27.6\n27.6\n27.5\n27.4\n27.4\n27.3\n27.3\n27.2\n27.2\n27.0\n26.9\n26.9\n27.1\n27.3\n27.4\n27.2\n27.0\n27.0\n26.9\n26.7\n26.6\n26.5\n26.3\n26.1\n25.9\n25.7\n25.4\n25.2\n25.0\n24.8\n24.6\n24.4\n24.2\n24.0\n23.8\n23.6\n23.4\n23.2\n23.0\n22.8\n22.8\n22.8\n22.8\n22.8\n22.8\n22.7\n22.7\n22.6\n22.5\n22.5\n22.4\n22.2\n22.1\n22.0\n\n\nBelize\n44.7\n44.8\n45.0\n45.1\n45.2\n45.3\n45.4\n45.6\n45.7\n45.8\n46.0\n46.3\n46.6\n46.9\n47.2\n47.5\n47.8\n48.1\n48.5\n48.8\n49.0\n49.2\n49.4\n49.5\n49.7\n49.8\n50.0\n50.1\n50.3\n50.5\n50.6\n50.8\n51.0\n51.2\n51.4\n51.6\n51.8\n52.0\n52.2\n52.3\n52.5\n52.7\n52.9\n53.2\n53.4\n53.6\n53.8\n54.0\n54.2\n54.4\n54.6\n54.6\n54.6\n54.7\n54.7\n54.7\n54.7\n54.7\n54.7\n54.8\n54.8\n54.8\n54.8\n54.7\n54.7\n54.6\n54.5\n54.4\n54.3\n54.1\n54.0\n53.8\n53.6\n53.4\n53.2\n52.9\n\n\nDenmark\n32.0\n31.7\n31.4\n31.0\n30.7\n30.4\n29.6\n28.8\n28.0\n27.1\n26.3\n25.6\n24.9\n24.2\n23.6\n23.0\n22.4\n21.8\n21.3\n20.8\n20.3\n19.8\n19.3\n18.8\n18.3\n17.9\n17.4\n17.1\n16.8\n16.6\n16.3\n16.1\n16.0\n15.9\n15.8\n15.6\n15.5\n15.4\n15.3\n15.2\n15.2\n15.1\n15.1\n15.1\n15.0\n15.0\n15.0\n15.0\n14.9\n14.9\n14.9\n14.8\n14.8\n14.6\n14.4\n14.1\n13.9\n13.7\n13.5\n13.3\n13.2\n13.0\n12.9\n12.7\n12.6\n12.5\n12.4\n12.2\n12.1\n12.0\n11.9\n11.8\n11.6\n11.5\n11.4\n11.2"
  },
  {
    "objectID": "gallery/gganimate_line.html#pivot-table",
    "href": "gallery/gganimate_line.html#pivot-table",
    "title": "lineplot via gganimate",
    "section": "Pivot table",
    "text": "Pivot table\n\n\nCode\n# Pivot tables\npv_urban &lt;- \n  df_urban |&gt; \n  pivot_longer(\n    cols = !country,\n    names_to = \"year\",\n    values_to = \"urban\"\n  )\n\npv_rural &lt;- \n  df_rural |&gt; \n  pivot_longer(\n    cols = !country,\n    names_to = \"year\",\n    values_to = \"rural\"\n  )\n\ndf_merge &lt;- left_join(pv_urban, pv_rural, by = c(\"country\" ,\"year\"))\ndf_merge |&gt; sample_n(6)\n# show\n# df_merge |&gt; \n#   sample_n(size = 7, replace = FALSE) |&gt; \n#   kable()\n\n\n#&gt; # A tibble: 6 × 4\n#&gt;   country                          year  urban rural\n#&gt;   &lt;chr&gt;                            &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1 United Arab Emirates             1991   78.9  21.1\n#&gt; 2 Armenia                          2003   64.1  35.9\n#&gt; 3 Gambia                           2022   63.9  36.1\n#&gt; 4 Qatar                            1967   87.6  12.4\n#&gt; 5 Montenegro                       1970   26.9  73.1\n#&gt; 6 Democratic Republic of the Congo 2009   39.5  60.5"
  },
  {
    "objectID": "gallery/gganimate_line.html#prepare-dataframe-for-plot",
    "href": "gallery/gganimate_line.html#prepare-dataframe-for-plot",
    "title": "lineplot via gganimate",
    "section": "Prepare DataFrame for plot",
    "text": "Prepare DataFrame for plot\n\n\nCode\ndf_p &lt;- df_merge |&gt; \n  filter(\n    country %in% countries\n  ) |&gt; \n  pivot_longer(\n  cols = c(urban, rural),\n  names_to = \"pop\",\n  values_to = \"pct\"\n  ) |&gt; \n  mutate(year = as.integer(year)) # year must be integer for animated plotting(gganimate)\n  # arrange(desc(year))\n\ndf_p |&gt; sample_n(6)\n\n\n#&gt; # A tibble: 6 × 4\n#&gt;   country       year pop     pct\n#&gt;   &lt;chr&gt;        &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n#&gt; 1 Uzbekistan    1968 urban  36.1\n#&gt; 2 Tajikistan    2007 rural  73.5\n#&gt; 3 Turkmenistan  2015 urban  50.3\n#&gt; 4 Tajikistan    1975 rural  64.5\n#&gt; 5 Tajikistan    2023 urban  28.2\n#&gt; 6 Kyrgyzstan    2019 urban  36.6"
  },
  {
    "objectID": "gallery/gganimate_line.html#lineplot-facetted-by-countries",
    "href": "gallery/gganimate_line.html#lineplot-facetted-by-countries",
    "title": "lineplot via gganimate",
    "section": "Lineplot facetted by countries",
    "text": "Lineplot facetted by countries\n\n\nCode\n# Create plot facetted by countries\ndf_p |&gt; \n  filter(country != \"Russian Federation\") |&gt; \n  ggplot(aes(x = year, y = pct, color = pop)) +\n  geom_line() +\n  geom_point() + \n  transition_reveal(year) +\n  scale_y_continuous(limits = c(0,100),breaks = seq(0, 100, 20),\n                     labels = function(x) paste0(x, \"%\"),\n                     ) +\n  scale_x_continuous(limits = c(1950, 2025), breaks = seq(1950, 2025, 15)) +\n  facet_wrap(~country) -&gt; p_facetcountry\n# facet_wrap(~country, labeller = labeller(country = new_labels)) -&gt; p_facetcountry\n\n# format plot\np_facetcountry &lt;- p_facetcountry +\n  labs(title = \"Percentage of rural and urban population by selected countries\",\n       caption = \"Source: United Nations, Department of Economic and Social Affairs\",\n       x = \"Years, 1950 - 2025\",\n       y = \"Percentage of Population\") +\n  theme(plot.title = element_text(color = \"dodgerblue4\", size = 12, face = \"bold\", hjust = 0.5),\n        plot.caption = element_text(color = \"dodgerblue\", size = 8, face = \"italic\"),\n        plot.background = element_rect(fill = \"aliceblue\"), \n        legend.title = element_blank(),\n        legend.background = element_blank(),\n        legend.position = \"top\")\n\np_facetcountry\n\n# to save\n#gganimate::animate(p_facetcountry, renderer = gifski_renderer(), height=500, width=700)"
  },
  {
    "objectID": "gallery/gganimate_line.html#lineplot-facetted-by-population-urban-rural",
    "href": "gallery/gganimate_line.html#lineplot-facetted-by-population-urban-rural",
    "title": "lineplot via gganimate",
    "section": "Lineplot facetted by Population (urban & rural)",
    "text": "Lineplot facetted by Population (urban & rural)\n\n\nCode\n# Create plot facetted by population\ndf_p |&gt; \n  ggplot(aes(x = year, y = pct, color = country)) +\n  geom_line() +\n  geom_point() + \n  geom_text(aes(x = 2023, y = 96,\n                label = \"Made with \\U1F49F by ФС\"),\n            stat = \"unique\",\n            size = 2, color = \"red\") +\n  # annotate(\"text\", x=8, y=6, label= \"Made by ©СФ\") +\n  transition_reveal(year) +\n  scale_y_continuous(limits = c(0,100),breaks = seq(0, 100, 20),\n                     labels = function(x) paste0(x, \"%\"),\n  ) +\n  scale_x_continuous(limits = c(1950, 2025), breaks = seq(1950, 2025, 5)) +\n  facet_wrap(~pop, ncol = 1) -&gt; p_facetpop\n\n# format plot\np_facetpop +\n  labs(title = \"Urban countries bei Percentage of Population (urban & rural)\",\n       caption = \"Source: United Nations, Department of Economic and Social Affairs\",\n       x = \"Years, 1950 - 2025\",\n       y = \"Percentage of Population\") +\n  theme(plot.title = element_text(color = \"dodgerblue4\", size = 12, face = \"bold\", hjust = 0.5),\n        plot.caption = element_text(color = \"dodgerblue\", size = 8, face = \"bold.italic\"),\n        plot.background = element_rect(fill = \"aliceblue\"), \n        legend.title = element_blank(),\n        legend.background = element_blank(),\n        legend.position = \"bottom\")\n\n# To save\n# animate(p_facetpop, renderer = gifski_renderer(), height=500, width=700)\n# anim_save(\"C:/Users/sultanov/Documents/temp/gifs/p_facetpop.gif\")"
  },
  {
    "objectID": "gallery/gganimate_line.html#lineplot-for-individual-country-uzbekistan",
    "href": "gallery/gganimate_line.html#lineplot-for-individual-country-uzbekistan",
    "title": "lineplot via gganimate",
    "section": "Lineplot for individual country (Uzbekistan)",
    "text": "Lineplot for individual country (Uzbekistan)\n\n\nCode\n# Uzbekistan\ndf_p |&gt; \n  filter(country == \"Uzbekistan\") |&gt; \n  ggplot(aes(x = year, y = pct, color = pop)) +\n  geom_line() +\n  geom_point() + \n  geom_text(aes(x = 2022, y = 98,\n                label = \"Made with \\U1F49F by ФС\"),\n            stat = \"unique\",\n            size = 2.5, color = \"red\") +\n  transition_reveal(year) +\n  scale_y_continuous(limits = c(0,100),breaks = seq(0, 100, 10),\n                     labels = function(x) paste0(x, \"%\"),\n  ) +\n  # scale_x_continuous(limits = c(1950, 2025), breaks = seq(1950, 2025, 10),\n  #                    expand = expansion(c(0.02, 0.02))) +\n  scale_x_continuous(limits = c(1950, 2025), \n                     breaks = seq(1950, 2025, 5)) -&gt; p_uz\n \n# format plot\np_uz &lt;- p_uz +\n  labs(title = \"Percentage of rural and urband Population in Uzbekistan, 1950-2025\",\n       caption = \"Source: United Nations, Department of Economic and Social Affairs\",\n       x = \"Years, 1950 - 2025\",\n       y = \"Percentage of Population\") +\n  # annotate(\"text\", x=2024, y=95, label= \"Made by ©СФ\") +   # adds text to the plot\n  theme(plot.title = element_text(color = \"dodgerblue4\", size = 10, face = \"bold\", hjust = 0.5),\n        plot.caption = element_text(color = \"dodgerblue\", size = 8, face = \"bold.italic\"),\n        plot.background = element_rect(fill = \"aliceblue\"), \n        panel.background = element_rect(fill = \"ghostwhite\"),\n        legend.title = element_blank(),\n        legend.background = element_blank(),\n        legend.position = \"top\")\n\np_uz\n# To save\n# animate(p_uz, renderer = gifski_renderer(), height=400, width=600)\n# anim_save(\"C:/Users/sultanov/Documents/temp/gifs/p_uz.gif\")"
  },
  {
    "objectID": "gallery/ggimg.html",
    "href": "gallery/ggimg.html",
    "title": "plotting image data via ggimg",
    "section": "",
    "text": "Data Source: Daryo.uz"
  },
  {
    "objectID": "gallery/ggimg.html#section",
    "href": "gallery/ggimg.html#section",
    "title": "plotting image data via ggimg",
    "section": "",
    "text": "Code\nggplot(stars) +\n  geom_point_img(aes(\n    x = artists,\n    y = price,\n    img = img_path\n  ), size = 1.3) -&gt; p\n#\np +\n  geom_text(data = stars, aes(\n    x = artists, \n    y = price, \n    label = paste(price, \"$\")), \n    size = 4, \n    vjust = -3.0) +\n  scale_y_continuous(limits = c(0,5500), breaks = seq(0, 5500, by = 500),\n                     labels = function(x) paste0(x, \"$\")) +\n  labs(title = \"Xonandlarning birrovga borish narxi ©СФ\",\n       subtitle = \"Malumotlar \\\"Daryo.uz\\\" ga asoslangan\",\n       x = \"Sanatkorlar\",\n       y = \"\\\"Birrov\\\" narxi\") +\n  theme_minimal()+\n  theme(plot.title = element_text(color = \"dodgerblue4\", size = 14, face = \"bold\", hjust = 0.5),\n        plot.subtitle = element_text(color = \"dodgerblue\", size = 13, face = \"bold.italic\", hjust = 0.5),\n        axis.title.x = element_text(color=\"indianred4\", size = 12, face=\"bold\", vjust = 0.1),\n        axis.title.y = element_text(color=\"indianred4\", size = 12, face=\"bold\", vjust = 1.9),\n        axis.text.x = element_text(colour = \"slateblue\", size = 10, face = \"bold.italic\", vjust = 0.5),\n        axis.text.y = element_text(colour = \"darkblue\", size = 10, face = \"plain\", vjust = 0.5)\n        ) -&gt; pp\npp"
  },
  {
    "objectID": "gallery/ggimg.html#section-1",
    "href": "gallery/ggimg.html#section-1",
    "title": "plotting image data via ggimg",
    "section": "",
    "text": "Code\nimgg &lt;- \"gallery_img/stars/imgsb.png\"\np1 &lt;- ggbackground(pp, imgg)\np1"
  },
  {
    "objectID": "gallery/marriage.html",
    "href": "gallery/marriage.html",
    "title": "marriage & divorce",
    "section": "",
    "text": "Datasource: Statistics Agency under the President of the Republic of Uzbekistan | Datastorage: GitHub"
  },
  {
    "objectID": "gallery/marriage.html#data",
    "href": "gallery/marriage.html#data",
    "title": "marriage & divorce",
    "section": "data",
    "text": "data\n\n\nCode\ndata &lt;- read.csv2(\"https://raw.githubusercontent.com/sultanovf/my_datasets/main/nikohuz_2010_2023.csv\")\nyears &lt;- paste(2010:2023) #, sep=\",\", collapse= \",\"\nyears &lt;- unlist(strsplit(years, \",\"))\nnew_cnames &lt;- c(\"region\", \"status\", \"area\",  years)\ncolnames(data) &lt;- new_cnames\n\n\nrmarkdown::paged_table(sample_n(data, 10)) # show sample 10 rows\n# oder {r, df_print = \"paged\"}\n# sample_n(data_raw, 10"
  },
  {
    "objectID": "gallery/marriage.html#pivot-data",
    "href": "gallery/marriage.html#pivot-data",
    "title": "marriage & divorce",
    "section": "pivot data",
    "text": "pivot data\n\n\nCode\ndf&lt;- data\n# pivot data\ndf_pv&lt;-\n  df |&gt; \n  pivot_longer(\n    cols = !c(region, status, area),\n    names_to = \"year\",\n    values_to = \"value\"\n  )  \n\ndf_pv |&gt; \n  sample_n(7)\n\n\n#&gt; # A tibble: 7 × 5\n#&gt;   region             status   area    year  value\n#&gt;   &lt;chr&gt;              &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt; &lt;int&gt;\n#&gt; 1 Samarkand region   divorce  village 2021   2226\n#&gt; 2 Bukhara region     marriage city    2020   5422\n#&gt; 3 Kashkadarya region divorce  city    2023   1790\n#&gt; 4 Navoi region       divorce  city    2015    711\n#&gt; 5 Samarkand region   marriage city    2010  11116\n#&gt; 6 Navoi region       marriage city    2012   3867\n#&gt; 7 Jizzakh region     marriage village 2010   6870"
  },
  {
    "objectID": "gallery/marriage.html#prepare-data-for-plot",
    "href": "gallery/marriage.html#prepare-data-for-plot",
    "title": "marriage & divorce",
    "section": "prepare data for plot",
    "text": "prepare data for plot\n\n\nCode\ndf_pl &lt;-\n  df|&gt; \n  pivot_longer(\n    cols = !c(region, status, area),\n    names_to = \"year\",\n    values_to = \"value\"\n  ) |&gt; \n  group_by(year, status) |&gt; \n  summarise(value = sum(value)) |&gt; \n  mutate(\n    #frame = row_number(),\n    year = as.integer(year),\n    value = case_when(\n      status == \"divorce\" ~ round(value/1000, 1)*-1,\n      TRUE ~ round(value/1000, 1))\n    ) |&gt;\n  ungroup()\n\nhead(df_pl)\n\n\n#&gt; # A tibble: 6 × 3\n#&gt;    year status   value\n#&gt;   &lt;int&gt; &lt;chr&gt;    &lt;dbl&gt;\n#&gt; 1  2010 divorce  -14.3\n#&gt; 2  2010 marriage 273. \n#&gt; 3  2011 divorce  -15.1\n#&gt; 4  2011 marriage 269. \n#&gt; 5  2012 divorce  -14.3\n#&gt; 6  2012 marriage 280."
  },
  {
    "objectID": "gallery/marriage.html#pyramid-1",
    "href": "gallery/marriage.html#pyramid-1",
    "title": "marriage & divorce",
    "section": "pyramid #1",
    "text": "pyramid #1\n\n\nCode\n# Title/subtitle/datasource\ndata_source &lt;- \"©Statistics Agency under the President of the Republic of Uzbekistan\"\np_title &lt;- \"&lt;br&gt;Браки и разводы в Узбекистане в 2010-2023 гг.\"\np_subtitle &lt;- \"\"\n\n# caption\nsocial_caption &lt;- glue::glue(\n  \"&lt;span style = 'color:skyblue3;'&gt;&lt;i&gt;&lt;strong&gt;&lt;br&gt;DataSource: {data_source} &lt;br/&gt;&lt;/strong&gt;&lt;/i&gt;&lt;/span&gt;  Plot by:\n  &lt;span style='color: #C4302B; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{yt_icon};&lt;/span&gt;\n  &lt;span style='color: #C4302B'&gt;{yt_username}&lt;/span&gt; |\n  &lt;span style='color: #e1306c; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{ins_icon};&lt;/span&gt;\n  &lt;span style='color: #e1306c'&gt;{ins_username}&lt;/span&gt; |\n  &lt;span style='color: #24A1DE; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{tg_icon};&lt;/span&gt;\n  &lt;span style='color: #24A1DE'&gt;{tg_username}&lt;br&gt;&lt;/span&gt;\"\n)\n\n# caption\nsocial_caption_anim &lt;- glue::glue(\n  \"  &lt;span style='color: #C4302B; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{yt_icon};&lt;/span&gt;\n  &lt;span style='color: #C4302B'&gt;{yt_username}&lt;/span&gt; |\n  &lt;span style='color: #e1306c; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{ins_icon};&lt;/span&gt;\n  &lt;span style='color: #e1306c'&gt;{ins_username}&lt;/span&gt; |\n  &lt;span style='color: #24A1DE; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{tg_icon};&lt;/span&gt;\n  &lt;span style='color: #24A1DE'&gt;{tg_username}&lt;br&gt;&lt;/span&gt;\"\n)\n\nf_path &lt;- \"C:/Users/sultanov/Documents/fontawesome/otfs/\"\nsysfonts::font_add(\n  family = 'Font Awesome 6 Brands', \n  regular = paste0(f_path, \"Font Awesome 6 Brands-Regular-400.otf\"))\n\nshowtext::showtext_auto()\n\n\n\n\nCode\n# create plot\npl &lt;- \n  ggplot(df_pl, aes(x=year, y=value, fill=status)) +\n  geom_bar(position = position_dodge(width=1), stat='identity') +\n  scale_x_continuous(breaks = c(seq(2010,2023)), labels = c(seq(2010,2023, 1)))+\n  geom_label(aes(label = paste(abs(value), \"k\")),\n             colour = \"white\", fill = \"steelblue4\", fontface=\"bold\", size=3.5) +\n  # facet with ggpol\n  facet_share(~status, dir = \"h\", scales = \"free\", reverse_num = TRUE)+\n  coord_flip() +\n  # title, cap, ..\n  labs(\n    title = p_title,\n    caption = social_caption,\n    y = \"Число браков и разводов в тысячах\",\n    x = NULL\n  ) +\n  # theme, format\n  theme_update()+\n  theme(\n    plot.title = element_markdown(\n      size = 16, color = \"steelblue4\", face = \"bold\", hjust = 0.5),\n    plot.caption = ggtext::element_markdown(size = 14, hjust = 0.5),\n    legend.position = \"none\",\n    axis.title.x = element_text(size = 12),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.background = element_rect(fill = \"ghostwhite\"), \n    plot.background = element_rect(fill = \"azure2\"),\n    strip.background = element_rect(fill = \"linen\", color = \"steelblue\")\n  )\n\n# Show plot\npl"
  },
  {
    "objectID": "gallery/marriage.html#barplot",
    "href": "gallery/marriage.html#barplot",
    "title": "marriage & divorce",
    "section": "barplot",
    "text": "barplot\n\n\nCode\npl_2 &lt;-\n  ggplot(data = df_pl,\n         aes(x = year, y = value, fill = status)) +\n  geom_bar(stat = \"identity\") + #, position = \"dodge\"\n  scale_y_continuous(\n    breaks = c(seq(-300, 300, by = 50)), \n    #labels = c(seq(300, 0, -50), seq(50, 300, 50)),\n    labels = function(x) paste0(abs(x), \"k\")) +\n  scale_x_continuous(breaks = c(seq(2010,2023)), labels = c(seq(2010,2023, 1)))+\n  coord_flip() +\n  geom_label(aes(label=abs(value)), color = \"white\") +\n  labs(\n    title = p_title,\n    caption = social_caption,\n    y = NULL,\n    x = NULL) +\n  \n  theme_minimal()+\n  theme(\n    plot.title = element_textbox(\n      size = 14, color = \"steelblue4\", face = \"bold\", hjust = 0.5),\n    plot.caption = ggtext::element_markdown(size = 12, hjust = 0.5),\n    legend.position = \"top\",\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank()\n  )\n# show plot\npl_2"
  },
  {
    "objectID": "gallery/marriage.html#animated-plot-for-marriage",
    "href": "gallery/marriage.html#animated-plot-for-marriage",
    "title": "marriage & divorce",
    "section": "animated plot for marriage",
    "text": "animated plot for marriage\n\n\nCode\n# marriage\nplt_anim_mar &lt;-\n  df_pl |&gt; \n  filter(status == \"marriage\") |&gt; \n  mutate(value = abs(value)) |&gt;   # weil df_pl divor values nigativ\n  ggplot(aes(x = as_factor(year), y = value, fill = value))+\n  geom_col()+\n  scale_colour_brewer(type = \"div\", palette = \"BuGn\", direction = 1)+\n  scale_y_continuous(limits = c(0, 300),breaks = seq(0, 300, 50),\n                     labels = function(x) paste0(x, \"k\"))+\n  geom_text(aes(label =  round(value)),\n            vjust = 1.5, nudge_y = 0.5, color = \"white\", size = 4)+\n  labs(\n    title = \"Заключенные браки\", #: {closest_state}\n    #subtitle = \"{closest_state}\",\n    caption = social_caption_anim,\n    y = \"Количество браков (в тысячах, k = 1000)\",\n    x = NULL) +\n  theme_minimal()+\n  theme(\n    plot.title = element_text(size = 16, color = \"steelblue4\", hjust = 0.5),\n    plot.caption = element_textbox(size = 14, hjust = 0.5),\n    axis.title.y = element_text(size = 11, vjust = -0.5),\n    legend.position = \"none\",\n    panel.grid = element_blank(),\n    panel.grid.major.y = element_line(color = \"white\"),\n    panel.ontop = TRUE,\n    ) +\n  \n  #scale_fill_distiller(palette = \"red\", direction = -1) +\n  transition_states(year, wrap = FALSE, transition_length = 14)+\n  #ease_aes(\"cubic-in-out\")+\n  view_follow(fixed_y = TRUE)+\n  shadow_mark()\n\n#plt_anim\nanim1 &lt;-   \n  animate(\n    plt_anim_mar,\n    duration = 15,\n    start_pause = 5,\n    end_pause = 10,\n    renderer = gifski_renderer()\n  )\nanim1"
  },
  {
    "objectID": "gallery/marriage.html#animated-plot-for-divorce",
    "href": "gallery/marriage.html#animated-plot-for-divorce",
    "title": "marriage & divorce",
    "section": "animated plot for divorce",
    "text": "animated plot for divorce\n\n\nCode\n# divorce\nplt_anim_div &lt;-\n  df_pl |&gt; \n  filter(status == \"divorce\") |&gt; \n  mutate(value = abs(value)) |&gt;   # weil df_pl status=divorce values nigativ\n  ggplot(aes(x = as_factor(year), y = value, fill = value))+\n  geom_col()+\n  scale_fill_distiller(palette = \"Reds\", direction = 1)+\n  scale_y_continuous(limits = c(0, 50),breaks = seq(0, 50, 5),\n                     labels = function(x) paste0(x, \"k\"))+\n  geom_text(aes(label =  round(value,1)),\n            vjust = 2, nudge_y = 0.5, color = \"steelblue4\", size = 4)+\n  labs(\n    title = \"Разводы\", #: {closest_state}\n    caption = social_caption_anim,\n    y = \"Количество разводов (в тысячах, k = 1000)\",\n    x = NULL) +\n  theme_minimal()+\n  theme(\n    plot.title = element_text(size = 16, color = \"steelblue4\", hjust = 0.5),\n    plot.caption = element_markdown(size = 14, hjust = 0.5),\n    axis.title.y = element_text(size = 11, vjust = -0.5),\n    legend.position = \"none\",\n    panel.grid = element_blank(),\n    panel.grid.major.y = element_line(color = \"white\"),\n    panel.ontop = TRUE) +\n  \n  #scale_fill_distiller(palette = \"red\", direction = -1) +\n  transition_states(year, wrap = FALSE)+\n  #ease_aes(\"cubic-in-out\")+\n  view_follow(fixed_y = TRUE)+\n  shadow_mark()\n\n#plt_anim\nanim2 &lt;-   \n  animate(\n    plt_anim_div,\n    duration = 15,\n    start_pause = 5,\n    end_pause = 10,\n    renderer = gifski_renderer()\n  )\nanim2"
  },
  {
    "objectID": "gallery/price_bar.html",
    "href": "gallery/price_bar.html",
    "title": "animated barplot",
    "section": "",
    "text": "Datasource: Statistics Agency under the President of the Republic of Uzbekistan | Datastorage: GitHub"
  },
  {
    "objectID": "gallery/price_bar.html#data",
    "href": "gallery/price_bar.html#data",
    "title": "animated barplot",
    "section": "Data",
    "text": "Data\n\n\nCode\ndata_raw &lt;- read.csv2(\n  \"https://raw.githubusercontent.com/sultanovf/my_datasets/refs/heads/main/priceuz_202101-202411.csv\")\n\n  \nprice_uz &lt;-\n  data_raw |&gt; \n  select(-runame) |&gt; \n  add_column(runame, .after = \"enname\" )\n\ndatseq &lt;- as.character(seq(as.Date(\"2021-01-01\"),as.Date(\"2024-11-01\"), by = \"month\"))\nnew_colnames &lt;- c(\"uzname\", \"enname\", \"runame\", unlist(strsplit(datseq, \",\")))\ncolnames(price_uz) &lt;- new_colnames\n\n\nrmarkdown::paged_table(sample_n(price_uz, 10)) # show sample 10 rows\n# oder {r, df_print = \"paged\"}\n# sample_n(data_raw, 10"
  },
  {
    "objectID": "gallery/price_bar.html#dataclean",
    "href": "gallery/price_bar.html#dataclean",
    "title": "animated barplot",
    "section": "dataclean",
    "text": "dataclean\n\n\nCode\n# add column catecory\ndf_data &lt;- price_uz |&gt; \n  select(-enname) |&gt; \n  filter(uzname %in% filtermap) |&gt; \n  mutate(\n    category = case_when(\n      uzname %in% gosht ~ \"Мясо\",\n      uzname %in% sabzavot ~ \"Овощи\",\n      uzname %in% oziqovqat ~ \"Питание\",\n      uzname %in% yog ~ \"Mасло\",\n      TRUE ~ \"Другой\"\n    )\n  )\n\n# pivot data\ndf_piv &lt;-\n  df_data |&gt; \n  pivot_longer(\n    cols = !c(uzname, runame, category),\n    names_to = \"date\",\n    values_to = \"price\"\n  ) |&gt; \n  mutate(\n    date = as.Date(date)\n  ) \n\ndf_piv |&gt; \n  sample_n(7)\n\n\n#&gt; # A tibble: 7 × 5\n#&gt;   uzname       runame          category date        price\n#&gt;   &lt;chr&gt;        &lt;chr&gt;           &lt;chr&gt;    &lt;date&gt;      &lt;dbl&gt;\n#&gt; 1 Non          Хлеб            Питание  2024-10-01  6114.\n#&gt; 2 Guruch       Рис             Питание  2024-04-01 20045.\n#&gt; 3 Tovuq goshti Курица          Мясо     2022-10-01 26676.\n#&gt; 4 Mol goshti   Говядина        Мясо     2021-01-01 59082.\n#&gt; 5 Sariyog      Масло сливочное Mасло    2021-05-01 51568 \n#&gt; 6 Tovuq goshti Курица          Мясо     2023-11-01 31566.\n#&gt; 7 Non          Хлеб            Питание  2023-08-01  5776."
  },
  {
    "objectID": "gallery/price_bar.html#prepare-data-for-plot",
    "href": "gallery/price_bar.html#prepare-data-for-plot",
    "title": "animated barplot",
    "section": "Prepare Data for Plot",
    "text": "Prepare Data for Plot\n\n\nCode\ndf2 &lt;- \n  df_piv |&gt;\n  filter(\n    !(runame %in% c(\"Баранина\", \"Говядина\", \"Масло сливочное\", \"Курица\"))\n  ) |&gt; \n  arrange(date,price) |&gt;\n  group_by(date) |&gt;\n  # mutate(date = format(date, \"%Y %b\")) |&gt;\n  mutate(\n    images = case_when(\n      runame == \"Пшеница\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Рис\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Хлеб\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Масло(хлопковое)\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Масло(подсолнечное)\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Морковь\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Чеснок\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Лук\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Картофель\" ~ paste0(img_path,uzname,\".png\"),\n      runame == \"Сахар\" ~ paste0(img_path,uzname,\".png\"),\n      TRUE ~ uzname\n      \n    ),\n    frame = row_number(),\n    rank = 1:n(),\n    #ord_runame = (fct_reorder(runame, price))\n  ) |&gt;  ungroup()\n\nhead(df2)\n\n\n#&gt; # A tibble: 6 × 8\n#&gt;   uzname    runame    category date       price images               frame  rank\n#&gt;   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;    &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;int&gt; &lt;int&gt;\n#&gt; 1 Sabzi     Морковь   Овощи    2021-01-01 2073. gallery_img/product…     1     1\n#&gt; 2 Piyoz     Лук       Овощи    2021-01-01 2081. gallery_img/product…     2     2\n#&gt; 3 Non       Хлеб      Питание  2021-01-01 3137. gallery_img/product…     3     3\n#&gt; 4 Bugdoy    Пшеница   Питание  2021-01-01 3255. gallery_img/product…     4     4\n#&gt; 5 Kartoshka Картофель Овощи    2021-01-01 4033. gallery_img/product…     5     5\n#&gt; 6 Shakar    Сахар     Питание  2021-01-01 7360. gallery_img/product…     6     6"
  },
  {
    "objectID": "gallery/price_bar.html#plot-animatet-1",
    "href": "gallery/price_bar.html#plot-animatet-1",
    "title": "animated barplot",
    "section": "Plot animatet #1",
    "text": "Plot animatet #1\n\n\nCode\n# Title/subtitle/legendtitle\nt2 &lt;- paste(\"Цены на продукты питания\")\np2 &lt;- paste(\"категории: \") \n\n\nf_path &lt;- \"C:/Users/sultanov/Documents/fontawesome/otfs/\"\nfont_add('Font Awesome 6 Brands', paste0(f_path, \"Font Awesome 6 Brands-Regular-400.otf\"))\n\nshowtext::showtext_auto()\n\np_df2 &lt;-\n  df2 |&gt; \n  ggplot(aes(\n    x= rank,\n    y = price,\n    fill = category))+ #    color = runame\n  geom_col()+\n  geom_text(aes(label = as.character(price)), hjust = 0, size = 4) +\n  geom_image(aes(x = rank,  image = images),y = 0,   size = 0.1)+ \n  \n  \n  scale_y_continuous(\n    limits = c(0,40000),breaks = seq(0, 40000, 5000),\n    labels = function(x) paste0(x/1000, \"k\"),\n    expand = expansion(c(0.09, 0.02))) +\n  #expand_limits(y = 0)+\n  #scale_y_continuous(labels = scales::comma) + # Format y-axis values\n  #scale_x_reverse() +   # put rank 1 at the top/ Highest values on top\n  #guides(color = FALSE, fill = FALSE)+\n  \n  coord_flip(clip = \"off\", expand = FALSE) +\n  geom_label(aes(label = paste(\"Time:\",format(date, \"%Y %b\"))),\n             x = 1.6, y = 32000, size = 7, fill = \"floralwhite\", col = \"gray\")+\n  labs(title = t2,\n       subtitle = \"DataSource: ©Агентство статистики при Президенте Республики Узбекистан\",\n       caption = social_caption_map, \n       x = \"продукты\", \n       y = \"цены в тысячах(k = 1000)\",\n       fill = p2) +\n\n  theme_minimal()+\n  theme(plot.title = element_text(size = 16, hjust = 0.5 ),\n        plot.subtitle = element_text(size = 14, color = \"steelblue4\", hjust = 0.5),\n        plot.caption = ggtext::element_markdown(size = 12, hjust = 0.5),\n        legend.position = \"top\",\n        axis.text.y = element_blank(),\n        axis.title.y = element_text(vjust = 11, size = 9),\n        axis.title.x = element_text(size = 10),\n        legend.box.background =element_rect(\"floralwhite\")) +\n  \n  transition_states(date)+\n  ease_aes(\"cubic-in-out\") + #bounce-in cubic-in-out\n  enter_fade() +\n  exit_fade()\n\np_df2\n\n# anim_1 &lt;- p_df2 |&gt;\n#   animate(\n#     duration = 20,\n#     fps = 10,\n#     start_pause = 5,\n#     end_pause = 5,\n#     #height = 530,\n#     #width = 832,\n#     #rewind = TRUE,\n#     renderer = av_renderer()\n#   )\n# anim_1"
  },
  {
    "objectID": "gallery/price_bar.html#plot-animated-2",
    "href": "gallery/price_bar.html#plot-animated-2",
    "title": "animated barplot",
    "section": "Plot animated #2",
    "text": "Plot animated #2\n\n\nCode\np1_df2&lt;- df2 |&gt; \n  ggplot(aes(\n    xmin= 0,\n    xmax = price,\n    y = rank,\n    ymin = rank - 0.45,\n    ymax = rank + 0.45,\n    group = runame,\n    fill = category))+\n  geom_rect(alpha = 0.5) +\n  \n  facet_wrap(~date) +\n  facet_null() +\n  \n  scale_x_continuous(\n    limits = c(0,40000),breaks = seq(0, 40000, 5000),\n    labels = function(x) paste0(x/1000, \"k\"),\n    expand = expansion(c(0.05, 0.02)))+\n\n  geom_image(aes(x=price, image = images), x= 0, size = 0.1)+\n  geom_text(aes(label = paste(\"Time:\", format(date, \"%Y %b\"))),\n             x = 32000, y = 1.5, size = 6, color = \"tomato4\")+\n  \n  \n  geom_label(aes(x = price, label = as.character(price)), colour = \"white\")+\n  \n  labs(title = t2, \n       subtitle = \"DataSource: ©Агентство статистики при Президенте Республики Узбекистан\",\n       caption = social_caption_map,\n       x = \"цены в тысячах (k = 1000)\", y = \"продукты\", \n       fill = p2)+   # legend title\n  theme_minimal()+\n  theme(\n    plot.title = element_text(size = 16, color = \"steelblue4\", hjust = 0.5),\n    plot.subtitle = element_text(size = 14, color = \"tomato4\", hjust = 0.5),\n    plot.caption = element_textbox_simple(\n      size = 12,\n      lineheight = 1,\n      padding = margin(5.5, 5.5, 5.5, 5.5),\n      margin = margin(0, 0, 5.5, 0),\n      hjust = -0.5,\n      fill = \"cornsilk\"), #\n    axis.ticks.y = element_blank(), \n    axis.text.y = element_blank(),\n    # panel.grid.major.y = element_blank(),\n    # panel.grid.minor.y = element_blank(),\n    legend.position = \"top\",\n    legend.box.background =element_rect(\"floralwhite\")) +\n  \n  transition_reveal(date)+\n  enter_fade() +\n  exit_fade()\n\np1_df2\n\n# anim_2 &lt;- p1_df2 |&gt;\n#   animate(\n#     duration = 20,\n#     fps = 10,\n#     start_pause = 5,\n#     end_pause = 5,\n#     # height = 530, #530\n#     #width = 844, #633\n#     #rewind = TRUE,\n#     renderer = av_renderer()\n#   )\n# anim_2"
  },
  {
    "objectID": "gallery/price_bar.html#saved-as-video",
    "href": "gallery/price_bar.html#saved-as-video",
    "title": "animated barplot",
    "section": "Saved as Video",
    "text": "Saved as Video\n\nVideo"
  },
  {
    "objectID": "gallery/socialnetwork.html",
    "href": "gallery/socialnetwork.html",
    "title": "social network in GIS",
    "section": "",
    "text": "Datasource: World Population Review | Internet"
  },
  {
    "objectID": "gallery/socialnetwork.html#data",
    "href": "gallery/socialnetwork.html#data",
    "title": "social network in GIS",
    "section": "data",
    "text": "data\n\n\nCode\ndata_sng &lt;- data.frame(\n  SN = c(\"TikTok\", \"Instagram\", \"Telegram\", \"Facebook\", \"WhatsApp\"),\n  ARM = c(NA, 1.4, NA, 2.3, 0.8),\n  AZE = c(6.1, 4.3, 5.0, 5.1, 2.5),\n  BLR = c(5.6, 3.9, 2.4, 4.3, 2.1),\n  KAZ = c(14.1, 12.4, 12.5, 13.2, 8.0),\n  KGZ = c( 4.9, 2.9, NA, 3.3, 1.6),\n  RUS = c(58.2, 63.0, 35.1, 70.6, 66.7),\n  TJK = c(NA, 1.6, NA, 1.8, 1.4),\n  TKM = c(NA, 0.2, NA, 0.2, 0.6),\n  UZB = c(3.1, 9.4, 18.0, 10.1, 5.1)\n)\n\n\n\nrmarkdown::paged_table(data_sng) # show sample 10 rows\n# oder {r, df_print = \"paged\"}\n# sample_n(data_raw, 10"
  },
  {
    "objectID": "gallery/socialnetwork.html#fill-nas-with-column-mean",
    "href": "gallery/socialnetwork.html#fill-nas-with-column-mean",
    "title": "social network in GIS",
    "section": "fill NAs (with column mean)",
    "text": "fill NAs (with column mean)\n\n\nCode\ndata &lt;- \n    data_sng |&gt;\n    mutate(\n        row_nr = row_number()) |&gt; \n  pivot_longer(-c(SN, row_nr),\n    names_to = \"col_id\",\n    values_to = \"val\") |&gt; \n  group_by(col_id) |&gt; \n  mutate(val = ifelse(is.na(val), round(mean(val,na.rm = TRUE),1), round(val,1))) |&gt; \n  pivot_wider(names_from=\"col_id\", values_from = \"val\") |&gt; \n  ungroup()\n\nrmarkdown::paged_table(data)"
  },
  {
    "objectID": "gallery/socialnetwork.html#proportion-of-total-population",
    "href": "gallery/socialnetwork.html#proportion-of-total-population",
    "title": "social network in GIS",
    "section": "proportion of total population",
    "text": "proportion of total population\n\n\nCode\npop &lt;- c(\n  \"ar\" = 2.9, \"az\" = 10.3, \"be\" = 9.1, \"kz\" = 20.6, \"kg\" = 7.2, \n  \"ru\" = 144.8, \"tj\" = 10.6, \"tm\" = 7.5, \"uz\" = 36.4)\n\ndata_pct &lt;-\n  data |&gt;\n  rowwise() |&gt;\n  mutate(\n    ARM = round((ARM/pop[\"ar\"]) *100, 1),\n    AZE = round((AZE/pop[\"az\"]) *100, 1),\n    BLR = round((BLR/pop[\"be\"]) *100, 1),\n    KAZ = round((KAZ/pop[\"kz\"]) *100, 1),\n    KGZ = round((KGZ/pop[\"kg\"]) *100, 1),\n    RUS = round((RUS/pop[\"ru\"]) *100, 1),\n    TJK = round((TJK/pop[\"tj\"]) *100, 1),\n    TKM = round((TKM/pop[\"tm\"]) *100, 1),\n    UZB = round((UZB/pop[\"uz\"]) *100, 1))\n\ndata_pct\n\n\n#&gt; # A tibble: 5 × 11\n#&gt; # Rowwise: \n#&gt;   SN        row_nr   ARM   AZE   BLR   KAZ   KGZ   RUS   TJK   TKM   UZB\n#&gt;   &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1 TikTok         1  51.7  59.2  61.5  68.4  68.1  40.2  15.1   4     8.5\n#&gt; 2 Instagram      2  48.3  41.7  42.9  60.2  40.3  43.5  15.1   2.7  25.8\n#&gt; 3 Telegram       3  51.7  48.5  26.4  60.7  44.4  24.2  15.1   4    49.5\n#&gt; 4 Facebook       4  79.3  49.5  47.3  64.1  45.8  48.8  17     2.7  27.7\n#&gt; 5 WhatsApp       5  27.6  24.3  23.1  38.8  22.2  46.1  13.2   8    14"
  },
  {
    "objectID": "gallery/socialnetwork.html#prepare-data-for-plotting",
    "href": "gallery/socialnetwork.html#prepare-data-for-plotting",
    "title": "social network in GIS",
    "section": "prepare data for plotting",
    "text": "prepare data for plotting\n\n\nCode\ndata_pct$frame &lt;- 1:5\n#data_pct\nfor(i in 1:nrow(data_pct)){\n  data_pct$frame[i] &lt;- list(data_pct$frame[i][[1]]:5)\n}\n#data_pct\ndata_pct &lt;- unnest(data_pct, frame)\n#data_pct\n\n# Data Frame for Plot\ndf_pct &lt;-  gather(data_pct, variable, value, -c(frame, SN, row_nr))\nhead(df_pct)\n\n\n#&gt; # A tibble: 6 × 5\n#&gt;   SN        row_nr frame variable value\n#&gt;   &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;dbl&gt;\n#&gt; 1 TikTok         1     1 ARM       51.7\n#&gt; 2 TikTok         1     2 ARM       51.7\n#&gt; 3 TikTok         1     3 ARM       51.7\n#&gt; 4 TikTok         1     4 ARM       51.7\n#&gt; 5 TikTok         1     5 ARM       51.7\n#&gt; 6 Instagram      2     2 ARM       48.3"
  },
  {
    "objectID": "gallery/socialnetwork.html#plotting",
    "href": "gallery/socialnetwork.html#plotting",
    "title": "social network in GIS",
    "section": "plotting",
    "text": "plotting\n\n\nCode\n# Title/subtitle/datasource\ndata_source &lt;- \"World Population Review | Internet\"\np_title &lt;- \"&lt;br&gt;Часть соцсеть пользователей в общей населения в странах СНГ\"\np_subtitle &lt;- \"\"\n\n# caption\nsocial_caption &lt;- glue::glue(\n  \"&lt;span style = 'color:skyblue3;'&gt;&lt;i&gt;&lt;strong&gt;&lt;br&gt;DataSource: {data_source} &lt;br/&gt;&lt;/strong&gt;&lt;/i&gt;&lt;/span&gt;  Plot by:\n  &lt;span style='color: #C4302B; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{yt_icon};&lt;/span&gt;\n  &lt;span style='color: #C4302B'&gt;{yt_username}&lt;/span&gt; |\n  &lt;span style='color: #e1306c; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{ins_icon};&lt;/span&gt;\n  &lt;span style='color: #e1306c'&gt;{ins_username}&lt;/span&gt; |\n  &lt;span style='color: #24A1DE; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{tg_icon};&lt;/span&gt;\n  &lt;span style='color: #24A1DE'&gt;{tg_username}&lt;br&gt;&lt;/span&gt;\"\n)\n\n# caption\nsocial_caption_anim &lt;- glue::glue(\n  \"&lt;span style='color: #C4302B; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{yt_icon};&lt;/span&gt;\n  &lt;span style='color: #C4302B'&gt;{yt_username}&lt;/span&gt; |\n  &lt;span style='color: #e1306c; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{ins_icon};&lt;/span&gt;\n  &lt;span style='color: #e1306c'&gt;{ins_username}&lt;/span&gt; |\n  &lt;span style='color: #24A1DE; font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{tg_icon};&lt;/span&gt;\n  &lt;span style='color: #24A1DE'&gt;{tg_username}&lt;br&gt;&lt;/span&gt;\"\n)\n\n\n\n\nCode\n# flag image path\nimgpat &lt;- \"gallery_img/flags/\"\ncntry &lt;- c(\n  \"ARM\" = \"AM\", \"AZE\" = \"AZ\", \"BLR\" =\"BY\", \"KAZ\" = \"KZ\", \"KGZ\" =\"KG\", \n  \"RUS\" = \"RU\", \"TJK\" =\"TJ\", \"TKM\" = \"TM\", \"UZB\" = \"UZ\")\n\n# read images\nxlabels &lt;- c()\nfor(i in 1:length(cntry)){\n  imgname &lt;- names(cntry[i])\n  xlabels &lt;- c(xlabels, paste0(\"&lt;img src='\", imgpat, cntry[[i]], \".png' width='50' hight ='25'  /&gt;&lt;br&gt;**\", imgname, \"**\"))\n}\n\n# custom color\nmy_color &lt;- c(\"TikTok\" = \"#2AF0EA\", \"Instagram\" = \"#E1306C\", \"Telegram\" = \"#24A1DE\", \"Facebook\" = \"#1877F2\", \"WhatsApp\" = \"#25D366\")\n\n# plot\ngg_pct &lt;- \n  ggplot(data = df_pct, aes(x = variable, y = value, fill = SN)) + \n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  scale_y_continuous(\n    limits = c(0,80 ),\n    breaks = seq(0, 80, 5),\n    labels = function(x) paste0(x,\"%\")) +\n  scale_x_discrete(name = NULL, labels = xlabels) +\n  geom_text(aes(label = as.character(\" \")), vjust = 1, size = 4)+\n  #titles\n  labs(\n    title = p_title, \n    #subtitle = data_source,\n    caption = social_caption,\n    x = NULL, y = NULL) +\n  scale_fill_manual(name = \"Cоцсеть:\", values =  my_color) +\n  # format\n  theme_minimal() +\n  theme(\n    plot.title = element_markdown(size = 16, color = \"steelblue4\", face = \"bold\", hjust = 0.5),\n    plot.caption = ggtext::element_markdown(size=14, hjust = 0.5),\n    axis.text.x = element_markdown(), # x-axis flags\n    axis.line = element_blank(),\n    legend.position = \"top\", legend.direction=\"horizontal\",legend.box = \"horizontal\",\n    panel.border = element_blank(),\n    plot.background = element_rect(fill = \"seashell2\"), #paleturquoise \"seashell1\"\n    panel.background = element_rect(fill = \"ghostwhite\"), #floralwhite\n    panel.grid.minor = element_blank()\n  )\n\n# Show plot\ngg_pct"
  },
  {
    "objectID": "gallery/socialnetwork.html#animated-plot",
    "href": "gallery/socialnetwork.html#animated-plot",
    "title": "social network in GIS",
    "section": "animated plot",
    "text": "animated plot\n\n\nCode\ngganim_pct &lt;-\n  gg_pct +\n  transition_states(frame, wrap = FALSE, transition_length = 6) +\n  enter_fade()\n\n# animate gif\nanim_pct &lt;- animate(\n  gganim_pct,\n  duration = 10,\n  start_pause =5,\n  end_pause = 10,\n  renderer = gifski_renderer()\n)\n\n# show plot\nanim_pct"
  },
  {
    "objectID": "gallery.html",
    "href": "gallery.html",
    "title": "A picture paints a thousand words",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\npopulation in GIS countries\n\n\n\nbarplot\n\nR\n\nggplot2\n\ngganimate\n\nCGPfunctions\n\nrangeplot\n\nslopegraph\n\ntreemap\n\n\n\npopulation in CIS countries in bar plot, range plot and treemap (animated) using ggplot2 and gganimate\n\n\n\nFazliddin Sultonov\n\n\nApril, 2025\n\n\n\n\n\n\n\n\n\n\n\nsocial networks in GIS\n\n\n\nbarplot\n\nR\n\nggplot2\n\ngganimate\n\nggpol\n\n\n\nplot of share of social network users population in CIS countries using ggplot2 and gganimate\n\n\n\nFazliddin Sultonov\n\n\nMarch, 2025\n\n\n\n\n\n\n\n\n\n\n\nmarriage & divorce\n\n\n\nbarplot\n\nR\n\nggplot2\n\ngganimate\n\nggpol\n\n\n\nplotting (animated) the marriages and divorces over the years in Uzbekistan using ggplot2 and gganimate\n\n\n\nFazliddin Sultonov\n\n\nMarch, 2025\n\n\n\n\n\n\n\n\n\n\n\nanimated barplot\n\n\n\nbarplot\n\nR\n\nggplot2\n\ngganimate\n\ngeom_image\n\n\n\n#part_2: an animated barplot for the development of food price of some products in Uzbekistan over the years and months using ggplot2 and gganimate\n\n\n\nFazliddin Sultonov\n\n\nFebruary, 2025\n\n\n\n\n\n\n\n\n\n\n\nanimated lineplot\n\n\n\nlineplot\n\nR\n\nggplot2\n\ngganimate\n\ngeom_image\n\n\n\n#part_1: an animated lineplot for the price development of of meat products in Uzbekistan over year and months using ggplot2 and gganimate\n\n\n\nFazliddin Sultonov\n\n\nFebruary, 2025\n\n\n\n\n\n\n\n\n\n\n\nmapplot\n\n\n\nbarplot\n\nmap\n\nR\n\nPython\n\nggplot2\n\nplotly\n\npandas\n\nfunnel chart\n\n\n\ncreate a mapplot, bar chart and funnel chart from a real dataset using ggplot2 and plotly\n\n\n\nFazliddin Sultonov\n\n\nDecember, 2024\n\n\n\n\n\n\n\n\n\n\n\nscatterplot\n\n\n\nscatterplot\n\nR\n\nPython\n\ngganimate\n\nggplot2\n\nplotly\n\n\n\n(animated) scatterplot with ggplot and plotly in R and Python using the example of GDP per Capita and Life expectancy for CIS countries\n\n\n\nFazliddin Sultonov\n\n\nDecember, 2024\n\n\n\n\n\n\n\n\n\n\n\nplotting via ggimage\n\n\n\ngeom_flag\n\nR\n\nggplot2\n\nggimage\n\n\n\ngeom_flags from package ggimage enables using flags in ggplot2\n\n\n\nFazliddin Sultonov\n\n\nNovember, 2024\n\n\n\n\n\n\n\n\n\n\n\nplotting image data via ggimg\n\n\n\nggimg\n\nR\n\nggplot2\n\nggimage\n\n\n\nggimg displays images associated with each row of a dataset on the plot.\n\n\n\nFazliddin Sultonov\n\n\nOctober, 2024\n\n\n\n\n\n\n\n\n\n\n\nlineplot via gganimate\n\n\n\ngganimate\n\nR\n\nggplot2\n\nlineplot\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to animate of plots.\n\n\n\nFazliddin Sultonov\n\n\nOctober, 2024\n\n\n\n\n\n\n\n\n\n\n\nbarplot via gganimate\n\n\n\ngganimate\n\nR\n\nggplot2\n\nbarplot\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to animate of plots.\n\n\n\nFazliddin Sultonov\n\n\nJuly, 2024\n\n\n\n\n\n\n\n\n\n\n\nboxplot\n\n\n\nboxblot\n\nR\n\nPython\n\n\n\nboxplot is the most used chart type to compare distribution of several groups\n\n\n\nFazliddin Sultonov\n\n\nJune, 2024\n\n\n\n\n\n\n\n\n\n\n\ngt table\n\n\n\ngt table\n\nR\n\nDT\n\n\n\n{gt} package allows to make beautiful tables using the R programming language\n\n\n\nFazliddin Sultonov\n\n\nJune, 2024\n\n\n\n\n\n\nNo matching items\n\n  \n\n Back to top"
  },
  {
    "objectID": "posts/DataStructures/datastructures_de.html#data-structures-in-r",
    "href": "posts/DataStructures/datastructures_de.html#data-structures-in-r",
    "title": "R & Python: Data Structures\n in German",
    "section": "Data Structures in R",
    "text": "Data Structures in R\nWichtige Datenstrukturen in R könen dadurch, wie viele Dimensionen ein Objekt hat - ein demensional (Vektor), zwei demensional (Matrix) und mehr (Arrays) und dadurch, ob die Elemente eines Objekts homogen - alle Elemente von gleicher Art z.B. nur Text, Zahlen sind, oder ob die Elemente heterogen - alle Elemente unterschiedlich sind, gekenzeichnet werden. Anhand dieser Merkmalen kann man die zentralen Objektarten wie folgt zusammenfassen (Sauer 2019):\n\n\n\nDimension\nHomogen\nHeterogen\n\n\n\n\n1d\nVector\nList\n\n\n2d\nMatrix\nDataframe\n\n\nnd\nArray\n\n\n\n\nVektoren sind eine der wichtigsten Datensrtukturen in R und stellen ein zentrales Elemnt in R-Objekten dar. Es gibt vier Arten von Atomar- bzw. Reinvektoren: Logical, Integer, Double und Character (welche stings entält), wobei Integer und Double sich zum Datentyp Numeric zusammenfassen lassen. Hier eine Übersicht von atomaren Vektoren nach (Wickham 2019).\n\n\n\nAtomar Vectors"
  },
  {
    "objectID": "posts/DataStructures/datastructures_de.html#data-structute-in-python",
    "href": "posts/DataStructures/datastructures_de.html#data-structute-in-python",
    "title": "R & Python: Data Structures\n in German",
    "section": "Data Structute in Python",
    "text": "Data Structute in Python\nDatenstrukturen können also als „Container“ betrachtet werden, die Daten nach Typ organisieren und gruppieren. Die sogenannten wichtigen Built-in Data Structures in Python sind Liste (list), Menge (set), Dictionaries (dict) und Tupel (tuple). Jeder Datentypen haben eigene Struktur und Eigenschaften\n - lists  - ditionaries  - tuples  - sets\nDarüber hinaus gibt Arrays und Dataframes(Tabellen):  - arrays von NumPy (Numerical Python)  - DataFrame von Pandas\nIm Folgenden sind die Data Structures in R und Python grafisch dargestellt.\n\n\n\n\nQuelle: Internet \n\n\nQuelle: Internet"
  },
  {
    "objectID": "posts/DataStructures/datastructures_de.html#vector-in-r-and-arrays-series-in-python",
    "href": "posts/DataStructures/datastructures_de.html#vector-in-r-and-arrays-series-in-python",
    "title": "R & Python: Data Structures\n in German",
    "section": "vector in R and arrays & Series in Python",
    "text": "vector in R and arrays & Series in Python\nVektoren in R sind eindimensional und homogen. Mit dieser Eigenschaft haben sie Gemeinsamkeit mit 1d-NumPy-Arrays und Pandas Series in Python. Vektoren in R sind auch ähnlich wie die Liste in Python, aber nur dann, wenn die Daten in der Liste von Python den gleichen Typ haben.\n\n\nCreating\n\n\n\n\n– with c() (like [] in Python)\n\n\n\nshow the code\nv1 &lt;- c(1, 7, 2, 4, 5, 8, 2, 9); v1\nclass(v1)\nv2 &lt;- c(\"a\", \"b\", \"c\", \"z\", \"f\"); v2\nclass(v2)\nv3 &lt;- vector(\"logical\", 5); v3\nclass(v3)\nv4 &lt;- numeric(7); v4\nclass(v4)\n\n\n#&gt; [1] 1 7 2 4 5 8 2 9\n#&gt; [1] \"numeric\"\n#&gt; [1] \"a\" \"b\" \"c\" \"z\" \"f\"\n#&gt; [1] \"character\"\n#&gt; [1] FALSE FALSE FALSE FALSE FALSE\n#&gt; [1] \"logical\"\n#&gt; [1] 0 0 0 0 0 0 0\n#&gt; [1] \"numeric\"\n\n\n\n– with seq(from, to, by) (like range(from, to, by) in Python or arange() from NumPy)\n\n\n\nshow the code\nseq1 &lt;- 2:9; seq1                            # from 2 to 9\nseq2 &lt;- (1:5); seq2                          # from 1 to 5\nseq3 &lt;- seq(from = 3, to = 10, by = 3); seq3 # step = 3\nseq4 &lt;- seq(3, 10, length.out = 5); seq4     # count = 5\nseq5 &lt;- seq(11, 17, along.with = seq4); seq5 # seq of same length with seq4\n\n\n#&gt; [1] 2 3 4 5 6 7 8 9\n#&gt; [1] 1 2 3 4 5\n#&gt; [1] 3 6 9\n#&gt; [1]  3.00  4.75  6.50  8.25 10.00\n#&gt; [1] 11.0 12.5 14.0 15.5 17.0\n\n\n\n– with rep() (like np.repeat() from NumPy or pd.rep() from Pandas)\n\n\n\nshow the code\nrep1 &lt;- rep(1:3, times = 3); rep1 # repeating seq 3 times\nrep2 &lt;- rep(1:3, each = 3); rep2  # repeating each obj 3 times\n\n\n#&gt; [1] 1 2 3 1 2 3 1 2 3\n#&gt; [1] 1 1 1 2 2 2 3 3 3\n\n\n\n– with sample() or runif() (like random.choice() from NumPy)\n\n\n\nshow the code\nsmp1 &lt;- sample(seq(10), size = 5, replace = FALSE); smp1\nvec &lt;- c(\"negative\",\"neutral\", \"positive\")\nsmp2 &lt;- sample(vec, size = 5, replace = TRUE); smp2\n# vector with 5 elements:\nrun1 &lt;- runif(5); run1\nrun2 &lt;- runif(3, min = 1, max = 10); run2\nrun3 &lt;- floor(runif(15, min=1, max=100)); run3\n# normal distribution\nrn &lt;- rnorm(5); rn\n\n\n#&gt; [1]  1  8 10  6  9\n#&gt; [1] \"neutral\"  \"positive\" \"positive\" \"negative\" \"negative\"\n#&gt; [1] 0.2332719 0.4469084 0.9075884 0.2411691 0.6932269\n#&gt; [1] 2.734668 4.615119 9.273173\n#&gt;  [1] 75 80 22 37 76 89 47 36 21 49 25 19 73 46 40\n#&gt; [1] -0.6840332  0.7098267 -0.8828714 -0.5181750  0.2727017\n\n\n\n\n\n– with [] like c() in R\n\n\n\nshow the code\nimport numpy as np\n\nv1_p = [1, 7, 2, 4, 5, 8, 2, 9]; print(v1_p)\ntype(v1_p)\nv2_p = np.full((5), False); print(v2_p)\ntype(v2_p)\nv3_p = np.zeros((7), int); print(v3_p)\ntype(v3_p)\nv4_p = np.ones((7), int); print(v4_p) # rep(1,7) in R\ntype(v4_p)\n\n\n#&gt; [1, 7, 2, 4, 5, 8, 2, 9]\n#&gt; &lt;class 'list'&gt;\n#&gt; [False False False False False]\n#&gt; &lt;class 'numpy.ndarray'&gt;\n#&gt; [0 0 0 0 0 0 0]\n#&gt; &lt;class 'numpy.ndarray'&gt;\n#&gt; [1 1 1 1 1 1 1]\n#&gt; &lt;class 'numpy.ndarray'&gt;\n\n\n\n– with arange() like seq() in R\n\n\n\nshow the code\nar1 = [x for x in range(5)]; ar1                # pythonlist\nar2 = [x for x in range(2,10)]; ar2             # python list\nar3 = np.arange(2,10); ar3                      # NumPy 1d array\nar4 = np.arange(3, 10, 3); ar4                  # step = 3 \nar5 = np.linspace(3, 10, 5, retstep = True);ar5 # count = 5, with step = 1.75    \n\n\n#&gt; [0, 1, 2, 3, 4]\n#&gt; [2, 3, 4, 5, 6, 7, 8, 9]\n#&gt; array([2, 3, 4, 5, 6, 7, 8, 9])\n#&gt; array([3, 6, 9])\n#&gt; (array([ 3.  ,  4.75,  6.5 ,  8.25, 10.  ]), 1.75)\n\n\n\n– with np.repeat() or pd.Series.repeat() like rep() in R\n\n\n\nshow the code\nimport pandas as pd\n\nrep1 =  list(range(1,4))*3; rep1             # Python\nrep2 = np.tile(np.arange(1,4), 3); rep2      # NumPy: repeating seq 3 times\nrep3 = np.repeat(np.arange(1,4), 3); rep3    # NumPy: repeating each obj 3 times\nrep4 = pd.Series(range(1,4)).repeat(2); rep4 # Pandas Series: repeating each obj 2 times\n\n\n#&gt; [1, 2, 3, 1, 2, 3, 1, 2, 3]\n#&gt; array([1, 2, 3, 1, 2, 3, 1, 2, 3])\n#&gt; array([1, 1, 1, 2, 2, 2, 3, 3, 3])\n#&gt; 0    1\n#&gt; 0    1\n#&gt; 1    2\n#&gt; 1    2\n#&gt; 2    3\n#&gt; 2    3\n#&gt; dtype: int64\n\n\n\n– with random() like sample() or runif() in R\n\n\n\nshow the code\nfrom numpy import random\nlis = [\"negative\",\"neutral\", \"positive\"]\nrd1 = random.choice(lis, size=5, replace = True); print(rd1)\nrd2 = random.rand(5); rd2                 # 5 random numbers\nrd3 = random.randint(100, size=(5)); rd3  # integer random numbers from 0 to 100\nrd4 = random.randn(4); rd4                # standard normal distribution\n\n\n#&gt; ['neutral' 'neutral' 'neutral' 'neutral' 'negative']\n#&gt; array([0.37621427, 0.340763  , 0.43995926, 0.61406061, 0.32292481])\n#&gt; array([32, 26, 10, 59, 86])\n#&gt; array([ 0.47682804,  0.89101471, -0.21079475, -0.00142282])\n\n\n\n\n\n\n\n\nSlicing\nEine der wichtigsten nützlichsten Operationen, die man auf Vektoren, Listen und eindimensionale Arrays anwenden kann, ist Indexierung. Dabei kann man einzelnes Element oder Teilmenge von Elementen durch ihre Position (Index) auswählen.\n\n\n\nIndex vom ersten Element ist in R – 1 und in Python beginnt mit 0. Die Länge eines Vektors, einer Liste oder eines 1d-Arrays kann in R mit der Funktion length(Obj) und in Python mit len(Obj) ermittelt werden.\n\n\n\n\n\nIndexes in R and Python\n\n\n\n\n\n# In Python\nlst = [1,3,5,7]\nlst[0]     # first element\nlst[1]     # second element\nlst[-1]    # last element\nlst[::-1]  # backward\n# In R\n# Used Variable lst created in Python Chunk\npy$lst[1]                # first element\npy$lst[2]                # second element\npy$lst[[length(py$lst)]] # last element\nrev(py$lst)              # backward\n\n\n\n\n#&gt; 1\n#&gt; 3\n#&gt; 7\n#&gt; [7, 5, 3, 1]\n\n\n\n\n#&gt; [1] 1\n#&gt; [1] 3\n#&gt; [1] 7\n#&gt; [1] 7 5 3 1\n\n\n\n\nHier noch weitere Beispiele für Teilmengen und logisches Indexieren. Bei der logischen Indexierung werden die Elemente zurückgegeben, deren logischer Wert gleich TRUE ist.\n\n\n\n\n\n\n\nshow the code\nage &lt;- c(18, 26, 32, 41, 55, 22, 35, 37, 20, 25)\nage[1:5]             # from first until fifth element\nage[3:7]             # from third until seventh element\nage[5:length(age)]   # from fifth until last element\nage[c(2,5,7)]        # second, fifth and seventh element\nage &lt; 30             # logic \nage[age &lt; 30]        # age under 30\nage[which(age &lt; 30)] # with which()\n\n\n#&gt; [1] 18 26 32 41 55\n#&gt; [1] 32 41 55 22 35\n#&gt; [1] 55 22 35 37 20 25\n#&gt; [1] 26 55 35\n#&gt;  [1]  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE\n#&gt; [1] 18 26 22 20 25\n#&gt; [1] 18 26 22 20 25\n\n\n\nElemente können auch beim Namen angesprochen werden, aber nur dann, wenn sie benannt sind. Das könnte mann auch in Series von Pandas machen, in dem man Element durch den Indexnamen auswählt:\n\n\n\nshow the code\nnote &lt;- c(\"best\" = 5, \"medium\" = 4, \"good\"= 3, \"bad\" = 2); note\nnote[\"medium\"]         # by indexname\nnote[c(\"good\", \"bad\")] # by indexname multiple elements\nnote[3]                # by index\n\n\n#&gt;   best medium   good    bad \n#&gt;      5      4      3      2 \n#&gt; medium \n#&gt;      4 \n#&gt; good  bad \n#&gt;    3    2 \n#&gt; good \n#&gt;    3\n\n\n\n\n\n\n\n\nshow the code\nage = np.array(r.age)    # create array from r vector age\nage[:5]                  # from first until fifth element\nage[2:7]                 # from third until seventh element\nage[4:]                  # from fifth until last element\n[age[2], age[5], age[7]] # second, fifth and seventh elem\nage &lt; 30                 # logic \nage[age &lt; 30]            # age under 30\nage[np.where(age&lt;30)]    # with np.where()\n\n\n#&gt; array([18., 26., 32., 41., 55.])\n#&gt; array([32., 41., 55., 22., 35.])\n#&gt; array([55., 22., 35., 37., 20., 25.])\n#&gt; [32.0, 22.0, 37.0]\n#&gt; array([ True,  True, False, False, False,  True, False, False,  True,\n#&gt;         True])\n#&gt; array([18., 26., 22., 20., 25.])\n#&gt; array([18., 26., 22., 20., 25.])\n\n\n\nAuch bei Series kann man Element oder Elemente durch ihre Indexen oder Indexnamen ansprechen, das geht wie bei named vectors in R\n\n\n\nshow the code\nnote = pd.Series(range(2,6), index = [\"bad\", \"good\", \"medium\", \"best\"]); note\nnote[\"good\"]  # by indexname\nnote[[\"best\", \"bad\"]] # by indexname multiple elements\nnote.iloc[2]          # by index\nnote.iloc[[1,2,3]]    # by index multiple elements\n\n\n#&gt; bad       2\n#&gt; good      3\n#&gt; medium    4\n#&gt; best      5\n#&gt; dtype: int64\n#&gt; 3\n#&gt; best    5\n#&gt; bad     2\n#&gt; dtype: int64\n#&gt; 4\n#&gt; good      3\n#&gt; medium    4\n#&gt; best      5\n#&gt; dtype: int64"
  },
  {
    "objectID": "posts/DataStructures/datastructures_de.html#matrix-in-r-and-2d-array-in-python",
    "href": "posts/DataStructures/datastructures_de.html#matrix-in-r-and-2d-array-in-python",
    "title": "R & Python: Data Structures\n in German",
    "section": "matrix in R and 2d-Array in Python",
    "text": "matrix in R and 2d-Array in Python\nMatrizen in R sind zweidimensionale Vektoren, deren Elemente numerisch sind, also homogen. Sie werden durch die Funktion matrix(data, nrow, ncol) erstellt. In Python gibt es keine Funktion explizit für die Erstellung von Matrizen. Matrizen in Python sind im Prinzip 2d-NumPy-Arrays. Für die Slicing kommen hier auch gleiche Methoden wie bei Vektoren oder 1d-NumPy-Arrys (vorheriges Kapitel) zur Anwenung, eben werden neben Rowindex auch Columnindex in rechteckigen Klammern [] eingegeben.\n\n\n\n\n\n\n\nshow the code\nmatrix_c &lt;- matrix(seq(12), nrow = 3, ncol = 4, byrow = FALSE )\ncat(\"3x4-Matix filling by columns (matrix_c):\\n\");print(matrix_c)\n# Dimension of matrix_c\nglue(\"Dimension of matrix_c: {dim(matrix_c)}\")\n# Counts of rows & Cols from matrix_c\nglue(\"Shape of matrix_c: ({nrow(matrix_c)}, {ncol(matrix_c)})\")\nmatrix_r &lt;- matrix(seq(12), nrow = 4, ncol = 3, byrow = TRUE )\ncat(\"\\n4x3-Matix filling by rows (matrix_r):\\n\");print(matrix_r)\n# Dimension of matrix_r\nglue(\"Dimension of matrix_r: {dim(matrix_r)}\")\n# Counts of rows & Cols from matrix_r\nglue(\"Shape of matrix_r: ({nrow(matrix_r)}, {ncol(matrix_r)})\")\n#\ncat(\"\\nSlicing:\\n\")\nmatrix_c[2,3]        # row 2, col 3\nmatrix_c[,4]         # column 4\nmatrix_c[, c(2, 4)]  # columns 2 and 4\nmatrix_r[2,]         # row 2\n# Name cols & rows\ncat('\\nname the columns and rows of matrix \"matrix_r\":\\n')\ncolnames(matrix_r) &lt;- c(\"col1\", \"col2\", \"col3\")\nrownames(matrix_r) &lt;- c(\"row1\", \"row2\", \"row3\", \"row4\")\nmatrix_r\n\n\n#&gt; 3x4-Matix filling by columns (matrix_c):\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    4    7   10\n#&gt; [2,]    2    5    8   11\n#&gt; [3,]    3    6    9   12\n#&gt; Dimension of matrix_c: 3\n#&gt; Dimension of matrix_c: 4\n#&gt; Shape of matrix_c: (3, 4)\n#&gt; \n#&gt; 4x3-Matix filling by rows (matrix_r):\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    2    3\n#&gt; [2,]    4    5    6\n#&gt; [3,]    7    8    9\n#&gt; [4,]   10   11   12\n#&gt; Dimension of matrix_r: 4\n#&gt; Dimension of matrix_r: 3\n#&gt; Shape of matrix_r: (4, 3)\n#&gt; \n#&gt; Slicing:\n#&gt; [1] 8\n#&gt; [1] 10 11 12\n#&gt;      [,1] [,2]\n#&gt; [1,]    4   10\n#&gt; [2,]    5   11\n#&gt; [3,]    6   12\n#&gt; [1] 4 5 6\n#&gt; \n#&gt; name the columns and rows of matrix \"matrix_r\":\n#&gt;      col1 col2 col3\n#&gt; row1    1    2    3\n#&gt; row2    4    5    6\n#&gt; row3    7    8    9\n#&gt; row4   10   11   12\n\n\n\n\n\n\n\n\nshow the code\nmatriks_c = np.arange(1,13).reshape(3,4, order = \"F\")\nprint(f\"3x4-Matix filling by columns (matriks_c):\\n{matriks_c}\")\n# Dimension of matrix matriks_c\nprint(f\"Dimension of matrix matriks_c: {matriks_c.ndim}\")\n# Counts of rows & Cols from matriks_c\nprint(f\"Shape of matriks_c: {matriks_c.shape}\")\n# np.shape(matriks_c)[0]; np.shape(matriks_c)[1]\nmatriks_r = np.arange(1,13).reshape(4,3, order = \"C\")\nprint(f\"\\n4x3-Matix filling by rows (matriks_r):\\n{matriks_r}\")\n# Dimension of matrix matriks_r\nprint(f\"Dimension of matrix matriks_r: {matriks_r.ndim}\")\n# Counts of rows & Cols from matriks_r\nprint(f\"Shape of matriks_r: {matriks_r.shape}\")\n# np.shape(matriks_r)[0]; np.shape(matriks_r)[1]\n#\nprint(\"\\nSlicing:\")\nmatriks_c[1,2]      # row 2, col 3\nmatriks_c[:, 3]     # column 4\nmatriks_c[:, [1,3]] # columns 2 and 4\nmatriks_r[1, :]     # row 2\n# Name cols & rows\nprint('\\nname the columns and rows of matrix \"matriks_r\":')\ncolnames = [\"col1\", \"col2\", \"col3\"]\nrownames = [\"row1\", \"row2\", \"row3\", \"row4\"]\npd.DataFrame(matriks_r, columns = colnames, index = rownames)\n\n\n#&gt; 3x4-Matix filling by columns (matriks_c):\n#&gt; [[ 1  4  7 10]\n#&gt;  [ 2  5  8 11]\n#&gt;  [ 3  6  9 12]]\n#&gt; Dimension of matrix matriks_c: 2\n#&gt; Shape of matriks_c: (3, 4)\n#&gt; \n#&gt; 4x3-Matix filling by rows (matriks_r):\n#&gt; [[ 1  2  3]\n#&gt;  [ 4  5  6]\n#&gt;  [ 7  8  9]\n#&gt;  [10 11 12]]\n#&gt; Dimension of matrix matriks_r: 2\n#&gt; Shape of matriks_r: (4, 3)\n#&gt; \n#&gt; Slicing:\n#&gt; 8\n#&gt; array([10, 11, 12])\n#&gt; array([[ 4, 10],\n#&gt;        [ 5, 11],\n#&gt;        [ 6, 12]])\n#&gt; array([4, 5, 6])\n#&gt; \n#&gt; name the columns and rows of matrix \"matriks_r\":\n#&gt;       col1  col2  col3\n#&gt; row1     1     2     3\n#&gt; row2     4     5     6\n#&gt; row3     7     8     9\n#&gt; row4    10    11    12"
  },
  {
    "objectID": "posts/DataStructures/datastructures_de.html#mehrdiminsionale-arrays",
    "href": "posts/DataStructures/datastructures_de.html#mehrdiminsionale-arrays",
    "title": "R & Python: Data Structures\n in German",
    "section": "Mehrdiminsionale Arrays",
    "text": "Mehrdiminsionale Arrays\n(Mehrdimensionale)Arrays in R werden mit der Funktion array(vector, dim = c(nrow, ncol, nmat)) erstellt. Dabei ist vector Datenreihe vom gleichen Typ, nrow und ncol sind Zeilen- und Spaltennummer, nmat gibt die Dimension an, also die Zahl von nrow*ncol Matrizen im Array.\nFür die Erstellung von Arrays in Python gibt es mehrere Funktionen wie numpy.arange(), numpy.zeros(), numpy.ones(). Im Folgenden wird ein 3d-Array in R und Python sowie Slicing und Summenberechnung dargestellt.\nIm Folgenden wird ein Beispiel für 3d-Array visuell und Slicing und Summenberechnung bei diesem Array praktisch dargestellt.\n\n\n\n\n\n\n\n3d Array with twice 3x4 2d-Arrays\n\n\nSlicing  Wie bei Vektoren, oder 1d- oder 2d-Arrays kann auch bei 3d-Arrays ein Element oder eine Teilmenge aus dem Array abgeschnitten werden. Dabei werden Index von dem Element oder Indizies von der Teilmenge in bekannten rechteckigen Klammern [] eingegeben. Im Beispiel hat der Array shape = (3, 4, 2). Das gibt die Funktion in R dim(array) und in Python array.shape zurück. im Beispiel gibt 3 - Zeilen, 4 - Spalten und 2 - Dimension an. D.h., der Array hat 2 Matrizen jeweils mit 3 Zeilen und 4 Spalten. Beim Indexieren muss man dementsprechen in richtige Position eingeben. Z.B. arr_r[, , 2] gibt den zweiten Matrix mit allen Zeilen und Spalten zurück.\n\n\n\nshow the code\n# Create 3d-array\narr_r &lt;- array(c(0:23), dim = c(4,3,2))\narr_r &lt;- aperm(arr_r, perm = c(2,1,3)); arr_r\ncat(\"Shape: \",dim(arr_r), \"\\n\")\ncat(\"\\n1st matrix/2d-Array of the 3d-Array (arr_r):\\n\")\narr_r[, , 1]\ncat(\"\\nElement in 2nd row and 1st col of the 2nd matrix from 3d-Array (arr_r):\\n\")\narr_r[2, 1, 2]\ncat(\"\\n3rd column elements of the 2nd matrix from 3d-Array (arr_r):\\n\")\narr_r[, c(3), 2]\ncat(\"\\n2nd row elements of the 1st matrix from 3d-Array (arr_r):\\n\")\narr_r[c(2), , 1]\ncat(\"\\nCheck if elemnt (9) exist in the array:\\n\")\n9 %in% arr_r\n\n\n#&gt; , , 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    1    2    3\n#&gt; [2,]    4    5    6    7\n#&gt; [3,]    8    9   10   11\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   12   13   14   15\n#&gt; [2,]   16   17   18   19\n#&gt; [3,]   20   21   22   23\n#&gt; \n#&gt; Shape:  3 4 2 \n#&gt; \n#&gt; 1st matrix/2d-Array of the 3d-Array (arr_r):\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    1    2    3\n#&gt; [2,]    4    5    6    7\n#&gt; [3,]    8    9   10   11\n#&gt; \n#&gt; Element in 2nd row and 1st col of the 2nd matrix from 3d-Array (arr_r):\n#&gt; [1] 16\n#&gt; \n#&gt; 3rd column elements of the 2nd matrix from 3d-Array (arr_r):\n#&gt; [1] 14 18 22\n#&gt; \n#&gt; 2nd row elements of the 1st matrix from 3d-Array (arr_r):\n#&gt; [1] 4 5 6 7\n#&gt; \n#&gt; Check if elemnt (9) exist in the array:\n#&gt; [1] TRUE\n\n\n\nOperationen  Um die Summe bei Arrays in R zu berechnen, kann man die Funktion rowSums()- Summe von Zeilen, colSums()- Summe von Spalten benutzen, es gibt auch in R die Funktion sum() wie in Python, diese kann man hier mit der Funktion apply benutzen.\n\n\n\nshow the code\narr_r\ncat(\"Sum by row-wise with rowSums:\\n\")\nrowSums(arr_r)\ncat(\"\\nSum by row-wise with apply, same like rowSums:\\n\")\napply(arr_r, c(1), sum)\ncat(\"\\nSum by column-wise with colSums:\\n\")\ncolSums(arr_r)\ncat(\"\\nSum by column-wise with apply\\n\")\napply(arr_r, c(2), sum)\n\n\n#&gt; , , 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    1    2    3\n#&gt; [2,]    4    5    6    7\n#&gt; [3,]    8    9   10   11\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   12   13   14   15\n#&gt; [2,]   16   17   18   19\n#&gt; [3,]   20   21   22   23\n#&gt; \n#&gt; Sum by row-wise with rowSums:\n#&gt; [1]  60  92 124\n#&gt; \n#&gt; Sum by row-wise with apply, same like rowSums:\n#&gt; [1]  60  92 124\n#&gt; \n#&gt; Sum by column-wise with colSums:\n#&gt;      [,1] [,2]\n#&gt; [1,]   12   48\n#&gt; [2,]   15   51\n#&gt; [3,]   18   54\n#&gt; [4,]   21   57\n#&gt; \n#&gt; Sum by column-wise with apply\n#&gt; [1] 60 66 72 78\n\n\n\n\n\n\n\n\n3d Array with twice 3x4 2d-Arrays\n\n\nSlicing  Die Funktion array.shape geibt shape = (2, 3, 4) von dem Array im Beispiel oben im Bild zurück. D.h., als erstes die Dimension - 2, als zweites Zeilen - 3 und als viertes Spalten - 4 zurückgegeben. D.h., der Array hat 2 Matrizen jeweils mit 3 Zeilen und 4 Spalten. Man möge sich einen Zauberwürfel vorstellen. Wenn man diesen in der Mitte in Scheiben schneidet und in zwei teilt, wäre jeder Teil ein Matrix oder 2d-Array. Man könnte auch diese Teile als Schicht (layer/sheet) vorstellen. Beim Indexieren muss man dementsprechen in richtige Position eingeben. Z.B. arr_r[1, :, :] gibt den zweiten Matrix mit allen Zeilen und Spalten zurück.\n\n\n\n\n\n\nShape is displayed differently in R and Python\n\n\n\n\n\nIn R wird die Reihenfolge in Shape anders dargestellt als in Python für gleichen Array, shape in R = (3, 4, 2), shape in Python = (2, 3, 4). In R werden erst Zeilen, dann Spalten und als letztes Dimension) dargestellt. In Python kommt erst Dimension, dann Zeilen und Spalten.\n\n\n\n\n\n\nshow the code\n# create 3d-Array\narr3d = np.arange(24).reshape(2,3,4);arr3d\nprint(f\"\\nShape: {arr3d.shape}\")\nprint(f\"\\n1st 2d-Array (sheet,matrix, layer) of the 3d-Array (arr3d):\")\narr3d[0, :, :] # or arrd[0]\nprint(f\"\\n3rd column elements of the 2nd sheet from 3d-Array (arr3d):\")\narr3d[1, :, 2]\nprint(f\"\\n2nd row elements of the 1st sheet from 3d-Array (arr3d):\")\narr3d[0, 1, :]\nprint(f\"\\nElement (20) in 3rd row and 1st col of the 2nd sheet from 3d-Array (arr3d):\")\narr3d[1, 2, 0]\nprint(f\"\\nElements (22, 23) from 3rd row and columns 3 and 4 in the 2nd sheet:\")\narr3d[0, 2, 2:]\nprint(f\"\\nElement (9) in 3rd row and 2nd col of the 1st sheet from 3d-Array (arr3d):\")\narr3d[0, 2, 1]\nprint(f\"\\nElement (11) in 3rd row and last col of the 1st sheet from 3d-Array (arr3d):\")\narr3d[0, 2, 3]\n\n\n#&gt; array([[[ 0,  1,  2,  3],\n#&gt;         [ 4,  5,  6,  7],\n#&gt;         [ 8,  9, 10, 11]],\n#&gt; \n#&gt;        [[12, 13, 14, 15],\n#&gt;         [16, 17, 18, 19],\n#&gt;         [20, 21, 22, 23]]])\n#&gt; \n#&gt; Shape: (2, 3, 4)\n#&gt; \n#&gt; 1st 2d-Array (sheet,matrix, layer) of the 3d-Array (arr3d):\n#&gt; array([[ 0,  1,  2,  3],\n#&gt;        [ 4,  5,  6,  7],\n#&gt;        [ 8,  9, 10, 11]])\n#&gt; \n#&gt; 3rd column elements of the 2nd sheet from 3d-Array (arr3d):\n#&gt; array([14, 18, 22])\n#&gt; \n#&gt; 2nd row elements of the 1st sheet from 3d-Array (arr3d):\n#&gt; array([4, 5, 6, 7])\n#&gt; \n#&gt; Element (20) in 3rd row and 1st col of the 2nd sheet from 3d-Array (arr3d):\n#&gt; 20\n#&gt; \n#&gt; Elements (22, 23) from 3rd row and columns 3 and 4 in the 2nd sheet:\n#&gt; array([10, 11])\n#&gt; \n#&gt; Element (9) in 3rd row and 2nd col of the 1st sheet from 3d-Array (arr3d):\n#&gt; 9\n#&gt; \n#&gt; Element (11) in 3rd row and last col of the 1st sheet from 3d-Array (arr3d):\n#&gt; 11\n\n\n\nOperationen  Um die Summe bei Arrays in Paython zu berechnen, muss axis eingegeben werden, je nachdem, auf welche Weise man die Summe berechnen will. Gibt man 0 ein, wird die Summe über n-Matrizen gebildet. Bei 1 wird die Summe über spaltenweise und bei 2 zeilenweise berechnet.\n\n\n\nshow the code\nprint(\"a 3d-array - arr3d:\")\narr3d\nprint(\"\\nShape:\")\narr3d.shape\nprint(f\"\\nSum by sheets (axis =0):\")\nnp.sum(arr3d, axis = 0) # or arr3d.sum(axis=0)\nprint(f\"\\nSum by column-wise (axis = 1):\")\narr3d.sum(axis=1)\nprint(f\"\\nSum by row-wise (axis = 2):\")\nnp.sum(arr3d, axis = 2)\n\n\n#&gt; a 3d-array - arr3d:\n#&gt; array([[[ 0,  1,  2,  3],\n#&gt;         [ 4,  5,  6,  7],\n#&gt;         [ 8,  9, 10, 11]],\n#&gt; \n#&gt;        [[12, 13, 14, 15],\n#&gt;         [16, 17, 18, 19],\n#&gt;         [20, 21, 22, 23]]])\n#&gt; \n#&gt; Shape:\n#&gt; (2, 3, 4)\n#&gt; \n#&gt; Sum by sheets (axis =0):\n#&gt; array([[12, 14, 16, 18],\n#&gt;        [20, 22, 24, 26],\n#&gt;        [28, 30, 32, 34]])\n#&gt; \n#&gt; Sum by column-wise (axis = 1):\n#&gt; array([[12, 15, 18, 21],\n#&gt;        [48, 51, 54, 57]])\n#&gt; \n#&gt; Sum by row-wise (axis = 2):\n#&gt; array([[ 6, 22, 38],\n#&gt;        [54, 70, 86]])"
  },
  {
    "objectID": "posts/DataStructures/datastructures_de.html#lists-in-r-and-lists-dicts-in-python",
    "href": "posts/DataStructures/datastructures_de.html#lists-in-r-and-lists-dicts-in-python",
    "title": "R & Python: Data Structures\n in German",
    "section": "lists in R and lists & dicts in Python",
    "text": "lists in R and lists & dicts in Python\n\nlists in R\nUnterschied zwischen der Liste und dem Vektor in R besteht darin, dass sie nicht homogen sein müssen und die Länge der Elemente unterschiedlich sein können. Zur Erstellung gibt es Funktion list() in R. Beim Indexieren werden die doppelte rechteckige Klammer [[]] benutzt (im Vergleich zum Vektor []).\n\n# create a list\nlst_r &lt;- list(1, c(2, 3), \n               c(TRUE, FALSE), \n               c(\"I\", \"love\", \"R\"), \"Hello R\")\n#\nlst_r\n#&gt; [[1]]\n#&gt; [1] 1\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 2 3\n#&gt; \n#&gt; [[3]]\n#&gt; [1]  TRUE FALSE\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"I\"    \"love\" \"R\"   \n#&gt; \n#&gt; [[5]]\n#&gt; [1] \"Hello R\"\ncat(\"Type: \", class(lst_r), \"\\n\")\n#&gt; Type:  list\n# Atribute of the list:\nstr(lst_r)\n#&gt; List of 5\n#&gt;  $ : num 1\n#&gt;  $ : num [1:2] 2 3\n#&gt;  $ : logi [1:2] TRUE FALSE\n#&gt;  $ : chr [1:3] \"I\" \"love\" \"R\"\n#&gt;  $ : chr \"Hello R\"\n#\n# Check element (Hello R) is in the list\n\"Hello R\" %in% lst_r\n#&gt; [1] TRUE\n#\n# Change the 1st element (1) to 42\nlst_r[[1]] &lt;- 42\nlst_r[[1]]\n#&gt; [1] 42\n#\n# Remove the last element (Hello R) of the list\nlst_r[[length(lst_r)]] &lt;- NULL\nlst_r\n#&gt; [[1]]\n#&gt; [1] 42\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 2 3\n#&gt; \n#&gt; [[3]]\n#&gt; [1]  TRUE FALSE\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"I\"    \"love\" \"R\"\n#\n# Check element (Hello R) is in the list\n\"Hello R\" %in% lst_r\n#&gt; [1] FALSE\n#\n# Remove the 1st (42) and 2nd elements ([2, 3]) \n(lst_r[-c(1,2)]) # Outer bracket for execute code direct\n#&gt; [[1]]\n#&gt; [1]  TRUE FALSE\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"I\"    \"love\" \"R\"\n\nDie Elemente von der Liste in R können auch benannt sein (wie in dictionaries in Python). Dabei kann man auf die Elemente durch [[]] oder durch den Operator $ (Dollar-Zeichen) zugreifen. In R kann man die Liste ändern oder entfernen, indem man dem Index von dem zu updatenden Element zu ändernde Wert zuweist.\n\nlst_named &lt;- list(\n  \"age\" = 19,\n  \"sex\" = \"m\",\n  \"it_skills\" = c(\"R\", \"Python\", \"Java\")\n)\n#\n# 1st element\nlst_named[[1]]\n#&gt; [1] 19\n#\n# 3rd element\nlst_named[[3]]\n#&gt; [1] \"R\"      \"Python\" \"Java\"\n#\n# 2nd element of the 3rd element\nlst_named[[3]][2]\n#&gt; [1] \"Python\"\n#\n# 2nd element by name\nlst_named[[\"sex\"]]       \n#&gt; [1] \"m\"\n#\n# 3rd element via $\nlst_named$it_skills\n#&gt; [1] \"R\"      \"Python\" \"Java\"\n#\n# 2nd element from 3rd element from the list\nlst_named$it_skills[2]\n#&gt; [1] \"Python\"\n#\n# Names of the list\nnames(lst_named)\n#&gt; [1] \"age\"       \"sex\"       \"it_skills\"\n\nMan kann in die Liste in R neues Element durch append() - Funktion hinzufügen oder sie in eine andere Datenstruktur wie Vektor oder Data Fareme (wenn sie ein named list ist) umwandeln.\n\n# Add an element(\\\"Python\\\" and \\\"C++\\\") into the list(lst_r):\nappend(lst_r, c(\"Python\", \"C++\"))\n#&gt; [[1]]\n#&gt; [1] 42\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 2 3\n#&gt; \n#&gt; [[3]]\n#&gt; [1]  TRUE FALSE\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"I\"    \"love\" \"R\"   \n#&gt; \n#&gt; [[5]]\n#&gt; [1] \"Python\"\n#&gt; \n#&gt; [[6]]\n#&gt; [1] \"C++\"\n#\n# Convert to vector\nunlist(lst_r)\n#&gt; [1] \"42\"    \"2\"     \"3\"     \"TRUE\"  \"FALSE\" \"I\"     \"love\"  \"R\"\n#\n# Create alist\nemp_list &lt;- list(\n  emp_name = c(\"Max\", \"Ali\", \"Vali\"),\n  emp_age = c(45, 34, 27),\n  emp_salary = c(5.300, 3.700, 3.300)\n)\n# \n# Type of emp_list:\nclass(emp_list)\n#&gt; [1] \"list\"\n#\n# Convert to data frame\nemp_df &lt;- data.frame(emp_list); emp_df\n#&gt;   emp_name emp_age emp_salary\n#&gt; 1      Max      45        5.3\n#&gt; 2      Ali      34        3.7\n#&gt; 3     Vali      27        3.3\n#\n# Type of emp_df\nclass(emp_df)\n#&gt; [1] \"data.frame\"\n\n\n\nlists in Python\nWie in R können auch die Elemente/Objekte in einer Liste in Python unterschiedliche Länge und Typen haben. Wenn alle Element der Liste in Python den gleichen Type haben, das ist diese vergleichbar mit dem Vektor in R.\n\n# Create a list\nlst_py = [1, [1, 2], True, [\"I\", \"love\", \"Python\"], \"Hello Python\"]\nprint(lst_py)\n#&gt; [1, [1, 2], True, ['I', 'love', 'Python'], 'Hello Python']\nprint(\"\\nType: \", type(lst_py))\n#&gt; \n#&gt; Type:  &lt;class 'list'&gt;\n#\n# Check element (Hello Python) is in the list\n\"Hello Python\" in lst_py\n#&gt; True\n#\n# Change the 1st element (1) to 42\nlst_py[0] = 42; lst_py\n#&gt; [42, [1, 2], True, ['I', 'love', 'Python'], 'Hello Python']\n#\n# Remove the last element (Hello Python) from the list\nlst_py.pop(); lst_py  # pop() removes the last element in the list!!\n#&gt; 'Hello Python'\n#&gt; [42, [1, 2], True, ['I', 'love', 'Python']]\n#\n# Remove the 2nd element ([1, 2]) with pop()\nlst_py.pop(1); lst_py\n#&gt; [1, 2]\n#&gt; [42, True, ['I', 'love', 'Python']]\n#\n# Remove the 1st element (42) with del\ndel lst_py[-0]\n#\n# Remove by name\nlst_py.remove(True)\nlst_py\n#&gt; [['I', 'love', 'Python']]\n\nNeues Element in die Liste in Python kann durch append()- Funktion (wie in R) hinzugefügt werden. Die Listen kann man auch in Python wie in R in andere Datenstruktur umwandeln, in NumPy-Array, Pndas-Series oder Pandas-DataFrame.\n\n# Create a list\nls1 = [\"Ali\", \"Vali\", \"Gani\"]; ls1\n#&gt; ['Ali', 'Vali', 'Gani']\n#\n# Add a new element (Max) into the list\n# append() adds the new item to the end of the list\nls1.append(\"Max\"); ls1\n#&gt; ['Ali', 'Vali', 'Gani', 'Max']\n#\n# insert() adds an element to the list at the specified index\nls1.insert(1, \"Ivan\") # inserted at index 1 (2nd position)\n#\n# Conver to a Pandas Series\nls_pd = pd.Series(ls1); ls_pd\n#&gt; 0     Ali\n#&gt; 1    Ivan\n#&gt; 2    Vali\n#&gt; 3    Gani\n#&gt; 4     Max\n#&gt; dtype: object\ntype(ls_pd)\n#&gt; &lt;class 'pandas.core.series.Series'&gt;\n#\n# Conver to a A Numpy 1d-Ayrray\nls_np = np.array(ls1); ls_np\n#&gt; array(['Ali', 'Ivan', 'Vali', 'Gani', 'Max'], dtype='&lt;U4')\ntype(ls_np)\n#&gt; &lt;class 'numpy.ndarray'&gt;\n#\n# Convert to a Pandas DataFrame\nls2 = [3, 4, 5, 8, 2]\nls_df = pd.DataFrame(list(zip(ls1,ls2)), columns = [\"ls1\", \"ls2\"])\nls_df\n#&gt;     ls1  ls2\n#&gt; 0   Ali    3\n#&gt; 1  Ivan    4\n#&gt; 2  Vali    5\n#&gt; 3  Gani    8\n#&gt; 4   Max    2\n\n\n\ndicts in Python and lists in R\nWie oben bereits erwähnt, in R müssen die Elemente einer Liste nicht vom gleichen Typ im Vergleich zu den Vektoren sein. Die Elemente in einer Liste in R können aber auch benannt sein, das nennt man dann named list. In Python dagegen können die Elemente nicht benannt sein, dafür aber gibt es in Python dictionanries, die gleiche Struktur wie named list in R haben. Dictionary in Python besteht aus d = {key : value} Struktur. Der Key bzw Schlüssel ist unique und immutable. Meistens werden für den Schlüssel strings benutzt. Die gleiche Struktur hat man in R, wenn man die Elemente in der Liste benennt: d = list(name = value). Zugriff auf einzelnes Element erfolgt durch d[\"key\"] in Python und durch d[\"name\"] oder d$name in R.\n\n\n\n\n\n\nnamed list vs vector in R\n\n\n\n\n\nIn R können sowohl lists (l &lt;- list(\"a\" = 1, \"b\" = b, \"c\" = c(\"a\", \"b\", \"c\"))) als auch vectors (v &lt;- c(\"a\" = 1, \"b\" = 2, \"c\" = 3)) benannt werden. Der Unterscheid ist, dass die Values in Vektor den gleichen Typ haben muss und in der Liste unterschieliche Typen haben kann.\n\n\nshow the code\ncat(\"Named vector with values of the same type:\\n\")\nv &lt;- c(\"a\" = 1, \"b\" = 2, \"c\" = 3); v\ncat(\"Type: \", class(v))\ncat(\"\\n\\nNamed list with values of different types:\\n\")\nl &lt;- list(\"a\" = 1, \"b\" = \"b\", \"c\" = c(\"a\", \"b\", \"c\")); l\ncat(\"Type: \", class(l))\n\n\n#&gt; Named vector with values of the same type:\n#&gt; a b c \n#&gt; 1 2 3 \n#&gt; Type:  numeric\n#&gt; \n#&gt; Named list with values of different types:\n#&gt; $a\n#&gt; [1] 1\n#&gt; \n#&gt; $b\n#&gt; [1] \"b\"\n#&gt; \n#&gt; $c\n#&gt; [1] \"a\" \"b\" \"c\"\n#&gt; \n#&gt; Type:  list\n\n\nWenn ich in den Vektor “v” von oben die Werte mit unterschiedlichen Typen (bsp. 1, b, 3) eingebe, dann speichert bzw. gibt R alle Values als character bzw string zurück, also die 1 und 3 in character umgewandelt\n\nv1 &lt;- c(\"a\" = 1, \"b\" = \"b\", \"c\" = 3); v1\n#&gt;   a   b   c \n#&gt; \"1\" \"b\" \"3\"\nclass(v1)\n#&gt; [1] \"character\"\n\nAus Interesse habe ich den Namen die Werte wie folgt zugewiesen: a = 1, b = b und c = c(1, 2, 3). Also hier haben wir drei Namen und 5 Werte. Erstaunlicherweise hat R den Namen c automatisch erweitert wie c1, c2, c3, bis alle Werte bannt sind. Dafür mag ich ja auch den R ;).\n\nv2 &lt;- c(\"a\" = 1, \"b\" = \"b\", \"c\" = c(1, 2, 3)); v2\n#&gt;   a   b  c1  c2  c3 \n#&gt; \"1\" \"b\" \"1\" \"2\" \"3\"\n\n\n\n\nFolgendes Beispiel mit den Aktienkursen (Stand: 27.04.2024, von OnVista) möge es besser zum Ausdruck bringen.\n\n\n\n\n\n\n\nshow the code\nshare_name &lt;- c(\"AMZN\", \"AAPL\", \"MBG\", \"TSLA\", \"BYD\", \"BABA\", \"SAP\")\nshare_value &lt;- c(179.62, 169.30, 74.36, 168.29, 25.36, 75.55, 174.00)\n#\ncat(\"Create a named list from vectors:\\n\")\ndic_r &lt;- setNames(as.list(share_value), share_name); dic_r\ncat(\"\\nshare price from BYD. slice with [[]]:\\n\")\ndic_r[[\"BYD\"]]\ncat(\"\\nshare price from Tesla. slice with $\\n\")\ndic_r$TSLA\ncat(\"\\nTyp from dic_r: \", class(dic_r))\ncat(\"\\nAdd an element (BMW3) to the list(dic_r[['BMW3']] &lt;- 99.15):\\n\")\ndic_r[[\"BMW3\"]] &lt;- 99.15\ncat(\"Is BMW3 there?\\n\")\ndic_r[\"BMW3\"] %in% dic_r\ndic_r[[\"BMW3\"]]\n#\ncat(\"\\nRemove an element (MBG) from the list (dic_r$MBG &lt;- NULL):\\n\")\ndic_r$MBG &lt;- NULL\ncat(\"Is MBG there?\\n\")\ndic_r[\"MBG\"] %in% dic_r\n# convert to python\ncat(\"\\nConvert the list (dic_r) to Python object (dic_py)\\n\")\ndic_py &lt;- r_to_py(dic_r)\ndic_py\ncat(\"\\nType from dic_py:\\n\")\nclass(dic_py)\n\n\n#&gt; Create a named list from vectors:\n#&gt; $AMZN\n#&gt; [1] 179.62\n#&gt; \n#&gt; $AAPL\n#&gt; [1] 169.3\n#&gt; \n#&gt; $MBG\n#&gt; [1] 74.36\n#&gt; \n#&gt; $TSLA\n#&gt; [1] 168.29\n#&gt; \n#&gt; $BYD\n#&gt; [1] 25.36\n#&gt; \n#&gt; $BABA\n#&gt; [1] 75.55\n#&gt; \n#&gt; $SAP\n#&gt; [1] 174\n#&gt; \n#&gt; \n#&gt; share price from BYD. slice with [[]]:\n#&gt; [1] 25.36\n#&gt; \n#&gt; share price from Tesla. slice with $\n#&gt; [1] 168.29\n#&gt; \n#&gt; Typ from dic_r:  list\n#&gt; Add an element (BMW3) to the list(dic_r[['BMW3']] &lt;- 99.15):\n#&gt; Is BMW3 there?\n#&gt; [1] TRUE\n#&gt; [1] 99.15\n#&gt; \n#&gt; Remove an element (MBG) from the list (dic_r$MBG &lt;- NULL):\n#&gt; Is MBG there?\n#&gt; [1] FALSE\n#&gt; \n#&gt; Convert the list (dic_r) to Python object (dic_py)\n#&gt; {'AMZN': 179.62, 'AAPL': 169.3, 'TSLA': 168.29, 'BYD': 25.36, 'BABA': 75.55, 'SAP': 174.0, 'BMW3': 99.15}\n#&gt; \n#&gt; Type from dic_py:\n#&gt; [1] \"python.builtin.dict\"   \"python.builtin.object\"\n\n\n\n\n\n\n\n\nshow the code\nprint(\"share price at 27.04.2024:\")\nfor k,v in r.dic_py.items():\n  print(f\"{k} : {v}\")\nprint(\"\\nKeys:\", r.dic_py.keys())\nprint(\"Values:\", r.dic_py.values())\nprint(f\"\\nShare of Tesla: {r.dic_py[\"TSLA\"]}\")\nprint(\"\\nAdd MBG to the dictionary(r.dic_py['MBG'] = 74.36):\")\nr.dic_py[\"MBG\"] = 74.36\nprint(\"\\nIs MBG in the dictionary?\")\n\"MBG\" in r.dic_py\nprint(\"\\nDelete BYD from dictionary(del r.dic_py['BYD']):\")\ndel r.dic_py[\"BYD\"]\nprint(\"\\nIs BYD in the dictionary?\")\n\"BYD\" in r.dic_py\n\n\n#&gt; share price at 27.04.2024:\n#&gt; AMZN : 179.62\n#&gt; AAPL : 169.3\n#&gt; TSLA : 168.29\n#&gt; BYD : 25.36\n#&gt; BABA : 75.55\n#&gt; SAP : 174.0\n#&gt; BMW3 : 99.15\n#&gt; \n#&gt; Keys: dict_keys(['AMZN', 'AAPL', 'TSLA', 'BYD', 'BABA', 'SAP', 'BMW3'])\n#&gt; Values: dict_values([179.62, 169.3, 168.29, 25.36, 75.55, 174.0, 99.15])\n#&gt; \n#&gt; Share of Tesla: 168.29\n#&gt; \n#&gt; Add MBG to the dictionary(r.dic_py['MBG'] = 74.36):\n#&gt; \n#&gt; Is MBG in the dictionary?\n#&gt; True\n#&gt; \n#&gt; Delete BYD from dictionary(del r.dic_py['BYD']):\n#&gt; \n#&gt; Is BYD in the dictionary?\n#&gt; False\n\n\n\n\n\n\nZum Zugrif auf Elemente in einem Dictionary in Python gibt es neben dem Method dict[\"key\"]noch das Method dict.get(\"key\", \"default\"). Die beiden Methode liefern das gleiche Ergebnis. Unterschied besteht darin, ob der gesuchte Key in diectionary vorhanden ist oder nicht. Wenn Key nicht vorhanden ist, erhält man beim ersten Method den KeyError, das wird mit get() umgegangen. Standardmäsig wird None zurückgegeben, das kann man aber feststellen.\n\n\nshow the code\nbsp_dic = {\n  \"Ali\" : 25,\n  \"Max\" : 44,\n  \"Vali\": 33\n}; bsp_dic\nprint(\"With []:\")\nprint(f\"Alini yoshi: {bsp_dic[\"Ali\"]}\")\nprint(\"\\nWith get():\")\nprint(f\"Alini yoshi: {bsp_dic.get(\"Ali\")}\")\nlstName = [\"Ali\", \"Gani\", \"Max\", \"Vali\", \"Brandon\"]; lstName\nprint(\"\\nIterate with devault value, if key not exis\")\nfor n in lstName:\n  # for k, v in bsp_dic.items():\n  print(f\"{n} - {bsp_dic.get(n, 'Mavjud emas!')}\" )\n\n\n#&gt; {'Ali': 25, 'Max': 44, 'Vali': 33}\n#&gt; With []:\n#&gt; Alini yoshi: 25\n#&gt; \n#&gt; With get():\n#&gt; Alini yoshi: 25\n#&gt; ['Ali', 'Gani', 'Max', 'Vali', 'Brandon']\n#&gt; \n#&gt; Iterate with devault value, if key not exis\n#&gt; Ali - 25\n#&gt; Gani - Mavjud emas!\n#&gt; Max - 44\n#&gt; Vali - 33\n#&gt; Brandon - Mavjud emas!"
  },
  {
    "objectID": "posts/DataStructures/datastructures_de.html#sets-and-tuples-in-python",
    "href": "posts/DataStructures/datastructures_de.html#sets-and-tuples-in-python",
    "title": "R & Python: Data Structures\n in German",
    "section": "sets and tuples in Python",
    "text": "sets and tuples in Python\nIn Python gibt es weitere Strukturen von Daten, set{} und tuple().\n\nset{} in Python\nDie gruppierten Elemente lassen sich in Python unter anderem auch durch set darstellen: die Elemente im geschweiften Klammern set{} eingeben oder in set()- Funktion übergeben. Besonderheit in diesem Konzept ist, dass die Elemente unique sind, d.h. ein Objekt kommt in Mengen nur einmal vor. In R gibt es die Funktion unique(), die doppelt vorkommende Elemente in einem Vektor entfernt. Desweiteren sind sie ungeordnet und besitzen keine Indizes, über die man auf Elemente zugreifen kann. Die Menge mit set - mutable, also veränderlich und mit frozenset -immutable, aslo nicht veränderbar.\nDie Methoden in von sets in Python wie union, intersection oder difference gibt es auch in R, die man bei Vektoren anwenden kann.\n\n\n\n\n\n\n# set() - returns the vector without duplicate values\nmy_lst = [2, 3, 1, 5, 3, 9, 3, 2, 7]; my_lst\n#&gt; [2, 3, 1, 5, 3, 9, 3, 2, 7]\nmy_set = set(my_lst); my_set\n#&gt; {1, 2, 3, 5, 7, 9}\n#\n# Create a set\nx = {1, 2, 3, 4, 5, 6}; x\n#&gt; {1, 2, 3, 4, 5, 6}\ny = set([4, 5, 6, 7, 8, 9]); y\n#&gt; {4, 5, 6, 7, 8, 9}\nprint(type(x), type(y))\n#&gt; &lt;class 'set'&gt; &lt;class 'set'&gt;\n#\n# union() - combine x and y without duplicates\nx.union(y)\n#&gt; {1, 2, 3, 4, 5, 6, 7, 8, 9}\n#\n# intersection() - which obj in both sets\nx.intersection(y)\n#&gt; {4, 5, 6}\n#\n# difference() - objects in x, but not in y\nx.difference(y)\n#&gt; {1, 2, 3}\n#\n# difference() - objects in y, but not in x\ny.difference(x)\n#&gt; {8, 9, 7}\n\n\n\n\n\n\n# Typ of python sets\nclass(py$x)\n#&gt; [1] \"python.builtin.set\"    \"python.builtin.object\"\nclass(py$y)\n#&gt; [1] \"python.builtin.set\"    \"python.builtin.object\"\n#\n# unique() - returns the vector without duplicate values\nmy_vec &lt;- c(2, 3, 1, 5, 3, 9, 3, 2, 7); my_vec\n#&gt; [1] 2 3 1 5 3 9 3 2 7\nuniq_vec &lt;- unique(my_vec); uniq_vec\n#&gt; [1] 2 3 1 5 9 7\n#\n# create vectros\nx_r &lt;- c(1, 2, 3, 4, 5, 6); x_r\n#&gt; [1] 1 2 3 4 5 6\ny_r &lt;- c(4, 5, 6, 7, 8, 9); y_r\n#&gt; [1] 4 5 6 7 8 9\n#\n# union() - combine x_r and y_r without duplicates\nunion(x_r, y_r)\n#&gt; [1] 1 2 3 4 5 6 7 8 9\n#\n# intersection() - which obj in both vectors\nintersect(x_r, y_r)\n#&gt; [1] 4 5 6\n#\n# setdiff() - objects in x_r, but not in y_r\nsetdiff(x_r, y_r)\n#&gt; [1] 1 2 3\n#\n# setdiff() - objects in y_r, but not in x_r\nsetdiff(y_r, x_r)\n#&gt; [1] 7 8 9\n\n\n\n\n\n\n\ntuple() in Python\nEin Tupel fasst mehrere (mit unterschiedlichen Typen) Elemente zu einem Objekt. Sie werden mit Komma getrennten Elementen in Klammern t = (obj1, obj2, ...), auch ohne Klammenr t = obj1, obj2, ... oder mit der Funktion tuple(obj) erzeugt. Im Vergleich zu den Listen sind Teuples immutable, man sagt auch unveränderbare Liste. Wenn man sie einmal erstellt, lassen sie sich nicht ändern, wenn das Ändern notwendig ist, kann man sie in die Liste umwandeln und nach der Änderung wieder zurück in den Tupel. Sie können auch in/mit Dictionaries verwendet werden.\n\n# create a tuple\nt1 = 1, 5, 6, 6, 3; print(\"t1: \", t1)\n#&gt; t1:  (1, 5, 6, 6, 3)\nt2 = (2, 4, 2, 5, 6); print(\"t2: \", t2)\n#&gt; t2:  (2, 4, 2, 5, 6)\nt3 = tuple([3, 4, 5, 6, 1]); print(\"t3: \", t3)\n#&gt; t3:  (3, 4, 5, 6, 1)\n#\n# tuples in dict keys\nkoordinat = {\n  (0,0) : 100,\n  (1,1) : 200,\n  (0,1) : 75\n}; koordinat\n#&gt; {(0, 0): 100, (1, 1): 200, (0, 1): 75}\n# add istem\nkoordinat[(1,0)] = 125; koordinat\n#&gt; {(0, 0): 100, (1, 1): 200, (0, 1): 75, (1, 0): 125}\n#\n# tuples in dict values\ngreats = {\n  \"Navoi\" : (\"Hirot\", 1441),\n  \"Bobur\" : (\"Andijon\",1483),\n  \"Temur\" : (\"Shahrisabz\", 1336)\n}; greats\n#&gt; {'Navoi': ('Hirot', 1441), 'Bobur': ('Andijon', 1483), 'Temur': ('Shahrisabz', 1336)}\n#\n# iterate dict\nfor great, (place, year) in greats.items():\n  print(f\"{great} - was born in {place} in {year}.\")\n#&gt; Navoi - was born in Hirot in 1441.\n#&gt; Bobur - was born in Andijon in 1483.\n#&gt; Temur - was born in Shahrisabz in 1336."
  },
  {
    "objectID": "posts/DataStructures/datastructures_de.html#data.frames-in-r-and-pandas.dataframe-in-python",
    "href": "posts/DataStructures/datastructures_de.html#data.frames-in-r-and-pandas.dataframe-in-python",
    "title": "R & Python: Data Structures\n in German",
    "section": "data.frames in R and pandas.DataFrame in Python",
    "text": "data.frames in R and pandas.DataFrame in Python\nDataframes sind möchlicherweise die häufigste Art, die Daten in R und Python zu speichern, zu bearbeiten und zu analyisieren. Als DF (DataFrame) kann man sich eine Tabelle mit vier Ecken (Zeilen und Spalten) vorstellen, die gängigsten sind Excel Sheets. Die Zeilen stellen die Fälle oder Beobachtungen (engl. observations) und Spalten die Variable oder auch in der Statistik Merkmale (engl. futures) dar. Rechts ist Data Frame durch eine kleine Tabelle dargestellt. Die Tabelle hat 10 Zeilen (Beobachtungen = Namen) und 3 Spalten (Variable = Name, Geburtsjahr und Geburtsort).\n\n\n\n\n\n\nnames\nbyear\nbplace\n\n\n\n\nNavoi\n1441\nHirot\n\n\nBobur\n1483\nAndijon\n\n\nTemur\n1336\nShahrisabz\n\n\nCholpon\n1898\nAndijon\n\n\nQodiriy\n1894\nToshkent\n\n\nUlugbek\n1394\nSamarqand\n\n\nXorazmi\n783\nXiva\n\n\nBeruniy\n1048\nXorazm\n\n\nTermiziy\n824\nTermiz\n\n\nBuxoriy\n810\nBuxoro\n\n\n\n\nData Frames sind in R praktisch eine benannte Liste von Vektoren (in Python wären pandas.Series) gleicher Länge, wobei jeder Vektor (Series) eine Spalte darstellt. Dataframes in R und Python besitzen einige Gemeinsamkeiten (Brown 2023), die dataframes voraussetzen.\n\njede Spalte muss gleiche Länge haben\nalle Elemente in der Spalte müssen gleichen Typ haben\nElemente in der Zeile können unterschiedlichen Type haben\nZeilen und Spalten können unterschiedlich benannt werden\n\nSie werden in R mit data.frame() und in Python mit pandas pandas.DataFrame() erzeugt.\n\nCreate a DF\n\n\n\n\n\n\nnames &lt;- c(\"Navoi\", \"Bobur\", \"Temur\", \"Cholpon\", \"Qodiriy\", \n           \"Ulugbek\", \"Xorazmi\", \"Beruniy\", \"Termiziy\", \"Buxoriy\")\nbyear &lt;- c(1441, 1483, 1336, 1898, 1894, 1394, 783, 1048, 824, 810) \nbplace &lt;- c(\"Hirot\", \"Andijon\", \"Shahrisabz\", \"Andijon\", \"Toshkent\",\n            \"Samarqand\", \"Xiva\", \"Xorazm\", \"Termiz\", \"Buxoro\")\n# Create a DataFrame -----------------------------------------\ndf &lt;- data.frame(names, byear, bplace)\n# Type -------------------------------------------------------\nclass(df)\n#&gt; [1] \"data.frame\"\n# nums of rows and cols --------------------------------------\ndim(df)  # like shape in pandas\n#&gt; [1] 10  3\n# num of rows ------------------------------------------------\nnrow(df)\n#&gt; [1] 10\n# num of columns ---------------------------------------------\nncol(df)\n#&gt; [1] 3\n# structur of DataFrame --------------------------------------\n# str(df) or\npillar::glimpse(df) # like pandas.DataFrame.info()\n#&gt; Rows: 10\n#&gt; Columns: 3\n#&gt; $ names  &lt;chr&gt; \"Navoi\", \"Bobur\", \"Temur\", \"Cholpon\", \"Qodiriy\", \"Ulugbek\", \"Xo…\n#&gt; $ byear  &lt;dbl&gt; 1441, 1483, 1336, 1898, 1894, 1394, 783, 1048, 824, 810\n#&gt; $ bplace &lt;chr&gt; \"Hirot\", \"Andijon\", \"Shahrisabz\", \"Andijon\", \"Toshkent\", \"Samar…\n# First n lines, default = 6 ---------------------------------\nhead(df, n = 3)\n#&gt;   names byear     bplace\n#&gt; 1 Navoi  1441      Hirot\n#&gt; 2 Bobur  1483    Andijon\n#&gt; 3 Temur  1336 Shahrisabz\n# Last n lines -----------------------------------------------\ntail(df, n=2)\n#&gt;       names byear bplace\n#&gt; 9  Termiziy   824 Termiz\n#&gt; 10  Buxoriy   810 Buxoro\n# colnames ---------------------------------------------------\ncolnames(df)\n#&gt; [1] \"names\"  \"byear\"  \"bplace\"\n# rows -------------------------------------------------------\nrownames(df)\n#&gt;  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n\n\n\n\n\n\n# create pandas DataFrame from created df in r -------\ndf_pd = pd.DataFrame(r.df)\ndf_pd[\"byear\"] = df_pd[\"byear\"].astype(int)\n# Type -----------------------------------------------\ntype(df_pd)\n#&gt; &lt;class 'pandas.core.frame.DataFrame'&gt;\n# nums of rows and cols ------------------------------\ndf_pd.shape   # like dim() in r\n#&gt; (10, 3)\n# num of rows ----------------------------------------\nlen(df_pd)\n#&gt; 10\n# num of columns -------------------------------------\nlen(df_pd.columns)\n#&gt; 3\n# structur of DataFrame ------------------------------\ndf_pd.info()   # like str() in r\n#&gt; &lt;class 'pandas.core.frame.DataFrame'&gt;\n#&gt; RangeIndex: 10 entries, 0 to 9\n#&gt; Data columns (total 3 columns):\n#&gt;  #   Column  Non-Null Count  Dtype \n#&gt; ---  ------  --------------  ----- \n#&gt;  0   names   10 non-null     object\n#&gt;  1   byear   10 non-null     int32 \n#&gt;  2   bplace  10 non-null     object\n#&gt; dtypes: int32(1), object(2)\n#&gt; memory usage: 332.0+ bytes\n# First n lines, default = 5 -------------------------\ndf_pd.head(n = 3)\n#&gt;    names  byear      bplace\n#&gt; 0  Navoi   1441       Hirot\n#&gt; 1  Bobur   1483     Andijon\n#&gt; 2  Temur   1336  Shahrisabz\n# Last n lines ---------------------------------------\ndf_pd.tail(n = 2)\n#&gt;       names  byear  bplace\n#&gt; 8  Termiziy    824  Termiz\n#&gt; 9   Buxoriy    810  Buxoro\n# colnames -------------------------------------------\ndf_pd.columns\n#&gt; Index(['names', 'byear', 'bplace'], dtype='object')\n# rows -----------------------------------------------\ndf_pd.index\n#&gt; RangeIndex(start=0, stop=10, step=1)\n\n\n\n\n\n\n\nAccess a (the) element(s)\n\n\n\n\n\n\n# 1st row, 1st col -------------------------------\ndf[1,1]\n#&gt; [1] \"Navoi\"\n# 1-3 rows, all cols -----------------------------\ndf[1:3, ]\n#&gt;   names byear     bplace\n#&gt; 1 Navoi  1441      Hirot\n#&gt; 2 Bobur  1483    Andijon\n#&gt; 3 Temur  1336 Shahrisabz\n# all rows, 1-2 cols -----------------------------\ndf[, 1:2]\n#&gt;       names byear\n#&gt; 1     Navoi  1441\n#&gt; 2     Bobur  1483\n#&gt; 3     Temur  1336\n#&gt; 4   Cholpon  1898\n#&gt; 5   Qodiriy  1894\n#&gt; 6   Ulugbek  1394\n#&gt; 7   Xorazmi   783\n#&gt; 8   Beruniy  1048\n#&gt; 9  Termiziy   824\n#&gt; 10  Buxoriy   810\n# 3 rows, col bplace -----------------------------\ndf[1:3, 3]\n#&gt; [1] \"Hirot\"      \"Andijon\"    \"Shahrisabz\"\n# rows where col bplace = \"Andijon\" --------------\ndf[df$bplace == \"Andijon\", ]\n#&gt;     names byear  bplace\n#&gt; 2   Bobur  1483 Andijon\n#&gt; 4 Cholpon  1898 Andijon\n# rows where col byear &lt; 1000 -------------------\ndf[df$byear &lt; 1000, ]\n#&gt;       names byear bplace\n#&gt; 7   Xorazmi   783   Xiva\n#&gt; 9  Termiziy   824 Termiz\n#&gt; 10  Buxoriy   810 Buxoro\n\n\n\n\n\n\n# 1st row, 1st col -------------------------------------\ndf_pd.iloc[0,0]         # iloc by postion(s)\n#&gt; 'Navoi'\n# 1-3 rows, all cols -----------------------------------\ndf_pd.iloc[:3, ]\n#&gt;    names  byear      bplace\n#&gt; 0  Navoi   1441       Hirot\n#&gt; 1  Bobur   1483     Andijon\n#&gt; 2  Temur   1336  Shahrisabz\n# all rows, 1-2 cols -----------------------------------\ndf_pd.iloc[:, :2]\n#&gt;       names  byear\n#&gt; 0     Navoi   1441\n#&gt; 1     Bobur   1483\n#&gt; 2     Temur   1336\n#&gt; 3   Cholpon   1898\n#&gt; 4   Qodiriy   1894\n#&gt; 5   Ulugbek   1394\n#&gt; 6   Xorazmi    783\n#&gt; 7   Beruniy   1048\n#&gt; 8  Termiziy    824\n#&gt; 9   Buxoriy    810\n# 3 rows, col bplace -----------------------------------\ndf_pd.loc[:3, \"bplace\"]  # loc by labels(s)\n#&gt; 0         Hirot\n#&gt; 1       Andijon\n#&gt; 2    Shahrisabz\n#&gt; 3       Andijon\n#&gt; Name: bplace, dtype: object\n# 1-2 rows, cols names and bplace ----------------------\ndf_pd.loc[:2, [\"names\",\"byear\"]] # or df_pd.bplace\n#&gt;    names  byear\n#&gt; 0  Navoi   1441\n#&gt; 1  Bobur   1483\n#&gt; 2  Temur   1336\n# rows where col bplace = \"Andijon\" --------------------\ndf_pd.loc[df_pd[\"bplace\"] == \"Andijon\"]\n#&gt;      names  byear   bplace\n#&gt; 1    Bobur   1483  Andijon\n#&gt; 3  Cholpon   1898  Andijon\n# rows where col byear &lt; 1000 --------------------------\ndf_pd.loc[df_pd.byear &lt; 1000]\n#&gt;       names  byear  bplace\n#&gt; 6   Xorazmi    783    Xiva\n#&gt; 8  Termiziy    824  Termiz\n#&gt; 9   Buxoriy    810  Buxoro\n# ------------------------------------------------------\n\n\n\n\n\n\n\nChange Row- and Colnames\n\n\n\n\n\n\n\nshow the code\ncat(\"Rownames:\\n\", rownames(df))  # rownames \ncat(\"\\nColnames:\", colnames(df)) # colnames\n#\nnew_rname &lt;- paste(\"person\",1:10, sep=\"_\", collapse= \",\")\nnew_rname &lt;- unlist(strsplit(new_rname, \",\"))\ncat(\"\\n\\nNew Rowsname:\\n\", new_rname)\n\ncat(\"\\nDF with modified rownames:\\n\")\n# change the rownames\nrownames(df) &lt;- (new_rname)\nhead(df, n = 2)\n# change the colnames\n# Method1: colnames(c(names of new columns))\n# Method2: setNames(df, c(names of new columns)) \n# Here will be used Method2\n# change colname\ndf &lt;- setNames(df, c(\"Ism\", \"Tug\\'ilgan yil\", \"Tug\\'ilgan joy\"))\ncat(\"\\n\\nDF with modified colnames:\\n\")\nhead(df, n = 2)\n#\ncat(\"\\n\\nSet key in DF with data.table:\\n\")\ndt &lt;- data.table(df)\nsetkey(dt, Ism)      # Like Index in pandas\n#call(\"Key: \", key(dt))\nhead(dt, n = 2)\n\n\n#&gt; Rownames:\n#&gt;  1 2 3 4 5 6 7 8 9 10\n#&gt; Colnames: names byear bplace\n#&gt; \n#&gt; New Rowsname:\n#&gt;  person_1 person_2 person_3 person_4 person_5 person_6 person_7 person_8 person_9 person_10\n#&gt; DF with modified rownames:\n#&gt;          names byear  bplace\n#&gt; person_1 Navoi  1441   Hirot\n#&gt; person_2 Bobur  1483 Andijon\n#&gt; \n#&gt; \n#&gt; DF with modified colnames:\n#&gt;            Ism Tug'ilgan yil Tug'ilgan joy\n#&gt; person_1 Navoi          1441         Hirot\n#&gt; person_2 Bobur          1483       Andijon\n#&gt; \n#&gt; \n#&gt; Set key in DF with data.table:\n#&gt; Key: &lt;Ism&gt;\n#&gt;        Ism Tug'ilgan yil Tug'ilgan joy\n#&gt;     &lt;char&gt;         &lt;num&gt;        &lt;char&gt;\n#&gt; 1: Beruniy          1048        Xorazm\n#&gt; 2:   Bobur          1483       Andijon\n\n\n\n\n\n\n\n\n\ndata.frame() vs data.table()\n\n\n\n\n\nEs gibt unterschiedliche Funktionen in R für Data Frames. Im Grunde genommen, sind data.frame() und data.table sind gleiche. Mann kann sich data.table als data.frame mit erweiterte Funktionen vorstellen. Die Funktion data.frame ist in R-base, dh. wenn mann R installiert, ist diese mit Basisfunktionen mitdabei. Dagegegn muss data.table als Package installiert und eingelesen werden, wie man pandas in Python erst importieren muss. Es gibt aber auch weiter Packages in R, die mehr Kompfort und Funktionalitäte bei der Bearbeitung der Tabellen bietet wie tibble, tidyverse, dplyr ect.\n\n\n\n\n\n\n\n\nshow the code\nprint(f\"Rownames(index):\\n{list(df_pd.index)}\")\nprint(f\"\\nColnames: {list(df_pd.columns)}\")\n#\nnew_pname = [\"user_\" + str(idx) for idx in list(df_pd.index)]\nprint(f\"\\nNew Rowsname:\\n{new_pname}\")\nprint(\"\\nDF with modified rownames:\")\ndf_pd.index = new_pname\ndf_pd.head(n = 2)\nprint(\"\\nDF with modified colnames:\")\ndf_pd.columns = [\"Ism\", \"Tug\\'ilgan yil\", \"Tug\\'ilgan joy\"]\ndf_pd.head(n = 2)\nprint(\"\\n\\nSet a column as index:\")\n# like key in data.table in r\ndf_pd.set_index(\"Ism\", inplace = True, append = True)\ndf_pd.head(n = 2)\n\n\n#&gt; Rownames(index):\n#&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n#&gt; \n#&gt; Colnames: ['names', 'byear', 'bplace']\n#&gt; \n#&gt; New Rowsname:\n#&gt; ['user_0', 'user_1', 'user_2', 'user_3', 'user_4', 'user_5', 'user_6', 'user_7', 'user_8', 'user_9']\n#&gt; \n#&gt; DF with modified rownames:\n#&gt;         names  byear   bplace\n#&gt; user_0  Navoi   1441    Hirot\n#&gt; user_1  Bobur   1483  Andijon\n#&gt; \n#&gt; DF with modified colnames:\n#&gt;           Ism  Tug'ilgan yil Tug'ilgan joy\n#&gt; user_0  Navoi           1441         Hirot\n#&gt; user_1  Bobur           1483       Andijon\n#&gt; \n#&gt; \n#&gt; Set a column as index:\n#&gt;               Tug'ilgan yil Tug'ilgan joy\n#&gt;        Ism                               \n#&gt; user_0 Navoi           1441         Hirot\n#&gt; user_1 Bobur           1483       Andijon\n\n\n\n\n\n\nData Frames, wie schon erwähnt, wahrscheinlich die meist benutzten Datenstrukturen sowohl in R als auch in Python. Daher wurde das Thema hier kurz dargestellt und Fokus nur auf Basisfunktionen gelegt. Dazu wird es ein eigenes Thema geben."
  },
  {
    "objectID": "posts/DataTypes/datatypes_de.html",
    "href": "posts/DataTypes/datatypes_de.html",
    "title": "R & Python: Types of Data\n in German",
    "section": "",
    "text": "Zuerst kurze Darstellung, wie das Ganze hier aufgebaut ist, wie der Input(Codeblock), Output(Ergebnis), Hinweis, … aussehen, also die"
  },
  {
    "objectID": "posts/DataTypes/datatypes_de.html#struktur",
    "href": "posts/DataTypes/datatypes_de.html#struktur",
    "title": "R & Python: Types of Data\n in German",
    "section": "Struktur",
    "text": "Struktur\nDer Input und Output für R und Python können nebeneinander oder in Tabsets, wobei R-Sourse in hellcyan und Python-Sourse in gelb dargestellt werden. Zeilenanfang im Output ist mit #&gt; belegt.\n\n\n\n\n\n\ncat(\"Hallo R Lover!\")\n#&gt; Hallo R Lover!\n\n\n\n\n\n\nprint(\"Hallo Python Lover!\")\n#&gt; Hallo Python Lover!\n\n\n\n\n\nWo ich was Wichtiges zusagen habe, habe ich dementsprechend gefärbt und markiert:\n\n\n\n\n\n\nExpand for more\n\n\n\n\n\nWenn die Sachen in R und Python nicht in den Vergleich gezogen werden und z.B. wenn ich nur eine Variable erzeuge oder Berechnungen ausführe, werden die Code-Blocks nicht gefärbt dargestellt.\n\n\nshow the code\n# Den Variablen a und b die Werte 42, 13 zuweisen und sie zusammen addieren\na = 42\nb = 13\na + b\n\n\n#&gt; 55\n\n\nDas Paket reticulate hilft die in Python erzeugten Variablen weiterhin in R zu benutzen z.B. Berechnungen durchzuführen.\n\n\nshow the code\n# Die Variablen a und b miteinander multiplizieren\npy$a * py$b\n\n\n#&gt; [1] 546\n\n\n\n\n\nWenn ich was lerne, schreibe ich mir auf oder mache ich mir Notizen, ist nicht jedermanns Sache;). Hier gebe ich nur das wieder, was ich bei meinem Lernen verstanden habe und hoffe, dass das ein oder anderem, der R oder Python lernen möchte, von Interesse/Nutzen sein könnte. Die grammatische und/oder orthographischen Fehler im Text bitte ich vorab zu entschuldigen;). In diesem Sinne stelle ich zunächst vor,"
  },
  {
    "objectID": "posts/DataTypes/datatypes_de.html#worum-es-geht",
    "href": "posts/DataTypes/datatypes_de.html#worum-es-geht",
    "title": "R & Python: Types of Data\n in German",
    "section": "Worum es geht",
    "text": "Worum es geht\nIn diesem Stück geht es darum, was die Typen von Daten sind, warum sie unterschieden werden. Mehr werde ich versuchen, zu zeigen wie R und Python mit Datentypen umgehen. Ich habe mich auf Wichtige aus Richtigen konzentriert und habe versucht, die Datentypen mir aufzunehmen, mit denen man auch meistens zu tun haben könnte. Auf solche Datentypen, über die ich erstmal gelesen habe, wahrscheinlich auch zukunftig nicht brauchen werde wie komplexe Datentypen oder solche Raw Typen in R oder byts in Python, habe keine Beachtung geschenkt. Wie gesagt, habe ich mein Lernfokus auf die Datentypen, die ich für gebräuchlch halte, gelegt.\nSo möchte ich aber zuerst kurz erklären,"
  },
  {
    "objectID": "posts/DataTypes/datatypes_de.html#was-die-datentypen-sind",
    "href": "posts/DataTypes/datatypes_de.html#was-die-datentypen-sind",
    "title": "R & Python: Types of Data\n in German",
    "section": "Was die Datentypen sind",
    "text": "Was die Datentypen sind\nEs geht darum, welche Unterscheidungsmöglichkeiten es zwischen verschiedenen Arten von Daten gibt und warum die Datentypen überhaupt unterschieden werden. Ich denke gleich an der Unterscheidung zwischen Zahlen und Zeichenketten, mit denen man im Alltag am meisten zu tun hat, wenn man mit Daten arbeitet. Die Unterscheidung ist auch insofern von Bedeutung, wenn wir mit den Daten weiter arbeiten, Berechnungen durchführen wollen. Dabei werden die Daten in Variablen gespeichert, damit das Programm diese Daten anprechen kann. Also der Komputer muss verstehen ob es sich z.B. um die Zahlen oder Text handelt, wenn er was damit anstellen muss. Diese Variable können wir in R oder Python Objekte nennen. Der Typ dieser Objekte bestimmt, auf welche Art und Weise die Daten gespeichert und dargestellt werden. So ermöglicht beispielweise der Typ Integer eine ganze Zahl 42 als z.B var zu speichern und diese Zahl wird durch das Objekt var repräsentiert. Im Gegensatz zu vielen Programmiersprachen muss man bei Python und R den Typ nicht angeben oder deklarieren. Sie emitteln automatisch, um welchen Typ es sich handelt, wenn man ein Objekt erstellt. Daher fallen sie unter OOP(Object Oriented Programming)-Programmiersprachen.\nJetzt weiß ich mehr oder weniger, was Data Type ist . Im Folgenden handelt es sich um"
  },
  {
    "objectID": "posts/DataTypes/datatypes_de.html#häufig-verwendete-basic-data-types-in-python-und-r",
    "href": "posts/DataTypes/datatypes_de.html#häufig-verwendete-basic-data-types-in-python-und-r",
    "title": "R & Python: Types of Data\n in German",
    "section": "Häufig verwendete Basic Data Types in Python und R",
    "text": "Häufig verwendete Basic Data Types in Python und R\nWie ich oben gesagt habe, werden Daten sowohl in R als auch in Python als Objekte gespeichert. Jedes Objekt bekommt einen Namen durch Zuweisung eines Werts diesem Namen. So kann ich z.B. die Zahl 42 mit dem Namen val, oder das Wort “world” mit dem Namen txt speichern. R oder Python erkennt beispielweise, dass 42 eine Zahl ist, also numerisch. Diese Zahl kann als Integer dargestellt werden. Aber beim Speichern dieser numerischen Zahl verhalten sich Python und R anders, R speichert sie als numeric, was Gleitkommazahl oder Float ist. Wenn ich die Zahl als Integer haben will, muss ich R dazu zwingen. Python macht umgekehrt, speichert diese Zahl als int, wenn ich als Float haben will, muss ich den Typ angeben bzw umwandeln.\nHier ist ein Überblick über die gängigen Basic Data Types in Python und R (In Anlehnung an Wouter van Atteveldt 2022):\n\n\n\n\n\n\n\n\n\n\n\nExample\n\nExample\nDescription\n\n\n\n\ninteger\n42L\nint\n42\nganze Zahlen\n\n\ndouble\n42.33\nfloat\n42.33\nreelle Zahlen, Kommazahlen\n\n\ncharacter\n“Text”\nstr\n“Text”\nZeichenketten, Texte\n\n\nlogical\nTRUE, FALSE\nbool\nTrue, False\ndie Wahrheitswerte\n\n\n\nInteger und Double werden in R als numeric zusammengefasst bzw. dargestellt. Aus der Tabelle kann ich sagen, dass ich mit drei grundlegenden gängigen Datentypen in Python und R am meisten zu tun habe. Das sind: numerische - zusammengesetzt aus Integer und Float, logische und textuelle Datentypen.\nJetzt gehen wir einzelne Typen durch.\n\ninteger/int\nInteger stellt eine ganze Zahl dar, z.B. 7, -7. In R wird die ganze Zahl mit einem L hinter der Zahl gekennzeichnet. Warum L dahinter stehen soll, weiß auch nicht;). R soll ja bekanntlich auf Programmiersprache C aufgebaut sein und da soll L für long integer stehen. In Python werden die ganze Zahlen normal als integer gespeichert.\nri1 &lt;- 11L\nri2 &lt;- -12L\nri3 &lt;- 13.0\nri4 &lt;- \"123\"\nprint(class(ri1))\n#&gt; [1] \"integer\"\nprint(class(ri2))\n#&gt; [1] \"integer\"\nprint(class(ri3))\n#&gt; [1] \"numeric\"\nprint(class(ri4))\n#&gt; [1] \"character\"\npi1 = 11\npi2 = -12\npi3 = 13.0\npi4 = \"123\"\nprint(type(pi1))\n#&gt; &lt;class 'int'&gt;\nprint(type(pi2))\n#&gt; &lt;class 'int'&gt;\nprint(type(pi3))\n#&gt; &lt;class 'float'&gt;\nprint(type(pi4))\n#&gt; &lt;class 'str'&gt;\n\n\n\nR\n\n\nPython\n\n\n\nUm herauszufinden oder anzeigen zu lassen, welchen Typ ein Objekt hat, gibt es Funktion class() in R und type() in Python. In R werden Objekte mit &lt;- und in Python mit = zugewiesen. Generell geht eas auch in R mit =, aber mit Pfeil ist üblich\n\n\n\n\n\n\nMore about assignment in R: &lt;- or = ?\n\n\n\n\n\nIn R ist üblich, Objekte mit &lt;- zuzuweisen, während man in Python mit = zuweist. Generell geht auch in R mit Gleichheitszeichen. Aber man bevorzugt Zuweisungspfeil. Gleichheitszeichen wird zur Zuweisung eher innerhalb einer Funktion benutzt. Hier eine kleine Demonstration:\nDen Vektor von 1 bis 15 weise ich vec zu und rechne ich Summe:\n\nsum(vec = 1:9)\n\n#&gt; [1] 45\n\n\nWenn ich das Objekt vec abfrage, kommt Fehlermeldung, weil dieses Objekt nur in der Funktion existiert:\n\nprint(vec)\n\n#&gt; Error in eval(expr, envir, enclos): Objekt 'vec' nicht gefunden\n\n\nDas Gleiche mache ich mit &lt;-\n\nsum(vec &lt;- 1:9)\n#&gt; [1] 45\nprint(vec)\n#&gt; [1] 1 2 3 4 5 6 7 8 9\n\nDer Zuweisungspfeil wird aber meistens empfohlen und verwendet. Hier zum Nachlesen: Style guide von Hadley Wickham und hier: Google’s R Style Guide\n\n\n\n \\(~~\\) – \\(~~\\) Prüfen, ob der Typ des Objekts integer ist\nIn R kann man den Typ des Objekts durch die Funktion is.integer() oder inherits(object, \"type\") prüfen.\n\nR\n\n# Check in R if a number is integer\nis.integer(ri1)            # Is 11L integer?\n#&gt; [1] TRUE\ninherits(ri2, \"integer\")   # Is -12 integer?\n#&gt; [1] TRUE\nis.integer(ri3)            # Is 13.0 integer?\n#&gt; [1] FALSE\nis.integer(ri4)            # Is \"123\" integer?\n#&gt; [1] FALSE\ninherits(ri4, \"character\") # Is \"123\"character?\n#&gt; [1] TRUE\n\n\n– in integer umwandeln\nWie gesagt, ohne L speichert R die Zahl als numeric, also als Kommazahl bzw. Float (Sieh Objekt ri3 im BSP oben). Ich muss R dazu bringen, dass er die Zahl als Integer behandelt. Dafür kann ich die Funktion as.integer() benutzen.\n\nR\n\n\nshow the code\n# Making R treat the object as an integer\nprint(class(ri3))              # Type of 13.0\nprint(class(ri4))              # Type of \"123\"\nprint(class(as.integer(ri3)))  # Forsing 13.0 to integer\nprint(class(as.integer(ri3)))  # Forsing \"123\" to integer\nprint(class(FALSE))            # Type of FALSE\nprint(class(TRUE))             # Type of True\nprint(as.integer(FALSE))       # FALSE as Integer\nprint(as.integer(TRUE))        # TRUE as Integer\n\n\n#&gt; [1] \"numeric\"\n#&gt; [1] \"character\"\n#&gt; [1] \"integer\"\n#&gt; [1] \"integer\"\n#&gt; [1] \"logical\"\n#&gt; [1] \"logical\"\n#&gt; [1] 0\n#&gt; [1] 1\n\n\n\n \\(~~\\) – \\(~~\\) Prüfen, ob der Typ des Objekts int ist Um zu prüfen gibt es in Python auch mehrere Wege: durch die Funktion isinstance(object, type) (wie inherits(object, \"\"type\") bei R) oder kann mann auch prüfen, indem man den Objekttyp dem Datentyp gleichsetzt z.B. type(objekt) ==/is int(). Es gibt auch die Funktion is_integer(). Diese Funktion ist zum Checken, ob Float vom Typ Integer ist, bei anderer Typen funktioniert nicht, zumindest tat bei mir nicht. Außerdem braucht man dafür Modul sumpy, denkeich, worauf ich hier verzichtet habe. Daher habe ich nicht tief gesucht, denn ich kenne ja schon einen Weg, der nach Rom führt. \n\nPython\n\n# Check in Python if a number is integer\nisinstance(pi1, int) # Is 11 integer?\n#&gt; True\ntype(pi2) == int     # Is -12 integer?\n#&gt; True\nisinstance(pi3, int) # Is 13.0 integer?\n#&gt; False\ntype(pi4) is int     # Is '123' integer?\n#&gt; False\n\n\n– in int umwandeln\nPython speichrt die Zahlen als Integer. Wenn ich sie als Float will, muss ich den Typ umwandeln in Float. Wenn ich Daten von Typ z.B. Text, Float oder Logical habe, kann ich ihn umwandeln in Integer in Python, indem ich Objekt in die Funktion int() übergebe.\n\nPython\n\n\nshow the code\n# Making Python treat the object as an integer\nprint(type(pi3))        # Type of 13.0\nprint(type(pi4))        # Type of \"123\"\nprint(type(int(pi3)))   # Forsing 13.0 to integer\nprint(type(int(pi3)))   # Forsing \"123\" to integer\nprint(type(False))      # Type of FALSE\nprint(type(True))       # Type of True\nprint(int(False))       # FALSE as Integer\nprint(int(True))        # TRUE as Integer\n\n\n#&gt; &lt;class 'float'&gt;\n#&gt; &lt;class 'str'&gt;\n#&gt; &lt;class 'int'&gt;\n#&gt; &lt;class 'int'&gt;\n#&gt; &lt;class 'bool'&gt;\n#&gt; &lt;class 'bool'&gt;\n#&gt; 0\n#&gt; 1\n\n\n\n\n\nnumeric/float\nDie Kommazahlen mit Nachkommastellen sind die Floats. R speichert die Zahlen normalerweise als Float (ohne diese L nach der Zahl). Generell werden Zahlen in R als numeric dargestellt. Sie können auch Integer oder Float sein. Beispielweise speichert R die Zahl 10 als Float, mit der Funktion class() stellt er den Typ als numeric dar. Es gibt auch noch eine Funktion in R, mit der man den Typ prüfen kann: typeof(). Diese gibt den Typ von 10 als double an, vermutlich kommt das auch von der C Sprache. Ich denke, durchs folgende Beispiel wird deutlicher, was ich meine;).\n\n\nshow the code\n# class() und typeof()\nclass(10)    # numeric\ntypeof(10)   # double\nclass(10L)   # integer\ntypeof(10L)  # integer\nclass(10.0)  # numeric\ntypeof(10.0) # double\n\n\n#&gt; [1] \"numeric\"\n#&gt; [1] \"double\"\n#&gt; [1] \"integer\"\n#&gt; [1] \"integer\"\n#&gt; [1] \"numeric\"\n#&gt; [1] \"double\"\n\n\n– Prüfen, ob der Typ des Objekts numeric/float ist\nWie beim Integer, kann man hier auch ähnliche Funktionen benutzen is.numeric() oder is.double() oder auch inherits(obj, \"type\") für R, und gleiche wie oben für Python.\nrf1 &lt;- 3.14\nrf2 &lt;- 17\nrf3 &lt;- 20L\nprint(class(rf2))  # class()-Type of 17\n#&gt; [1] \"numeric\"\nprint(class(rf3))  # class()-Type of 20L\n#&gt; [1] \"integer\"\nprint(typeof(rf2)) # typeof()-Type of 17\n#&gt; [1] \"double\"\nprint(typeof(rf3)) # typeof()-Type of 20L\n#&gt; [1] \"integer\"\nis.numeric(rf1)    # Is 3.14 numeric?\n#&gt; [1] TRUE\nis.double(rf2)     # Is 17 double?\n#&gt; [1] TRUE\nis.numeric(rf3)    # Is 20L numeric?\n#&gt; [1] TRUE\nis.integer(rf3)    # Is 20L integer?\n#&gt; [1] TRUE\npf1 = 3.14\npf2 = 17\npf3 = 20\nprint(type(pf1))      # Type of 3.14\n#&gt; &lt;class 'float'&gt;\nprint(type(pf2))      # Type of 17\n#&gt; &lt;class 'int'&gt;\nprint(type(pf3))      # Type of 20\n#&gt; &lt;class 'int'&gt;\nisinstance(pf1, float)# Is 3.14 float?\n#&gt; True\nisinstance(pf1, int)  # Is 3.14 int?\n#&gt; False\ntype(pf2) is float    # Is 17 float?\n#&gt; False\ntype(pf3) == float    # Is 20 float?\n#&gt; False\nisinstance(pf2, float)# Is 17 float?\n#&gt; False\n\n\n\nR\n\n\nPython\n\n\n\n– in numeric/float umwandeln\nDas Gleiche gilt auch hier, wenn ich den Datentyp in numeric oder float haben will.\nIn R benutze ich dafur die Funktion as.numeric() oder as.double.\n\nR\n\n\nshow the code\n# Making R treat the object as an integer\nprint(class(rf2))              # Type of 17\nprint(class(rf3))              # Type of 20L\nprint(class(as.numeric(rf2)))  # Forsing 17 to nomeric\nprint(class(as.double(rf3)))   # Forsing 20L to nomeric\nprint(as.numeric(FALSE))       # FALSE as numeric\nprint(as.double(TRUE))         # TRUE as numeric\n\n\n#&gt; [1] \"numeric\"\n#&gt; [1] \"integer\"\n#&gt; [1] \"numeric\"\n#&gt; [1] \"numeric\"\n#&gt; [1] 0\n#&gt; [1] 1\n\n\n\nIn Python kann ich dies mit der Funktion float() anstellen.\n\nPython\n\n\nshow the code\n# Making Python treat the object as an integer\nprint(type(pf2))        # Type of 17\nprint(type(pf3))        # Type of 20\nprint(type(float(pf2))) # Forsing 17 to float\nprint(type(float(pf3))) # Forsing 20 to float\nprint(float(False))     # FALSE as float\nprint(float(True))      # TRUE as float\n\n\n#&gt; &lt;class 'int'&gt;\n#&gt; &lt;class 'int'&gt;\n#&gt; &lt;class 'float'&gt;\n#&gt; &lt;class 'float'&gt;\n#&gt; 0.0\n#&gt; 1.0\n\n\n\n\n\ncharacter/str\nWie der Name schon sagt, solche Daten sind Strings, die Zeichen, Buchstaben enthalten. In R werden sie als character und in Python als str charakteresiert. Mit Strings hat man in der Praxis auch wie mit numerischen Daten häufig zu tun. Beispielweise können im zu analysierenden Datensatz auch kategoriale Variablen: “männlich”, “weiblich” vorhanden sein usw.\nStrings können im doppelten Apostroph 'text' oder in Anführungszeichen oder Gänsefüßchen \"text\" angegeben werden/sein in R auch in Python. Die Funktion für die Länge des Strings ist für R: nchar() und für Python len().\n\n\n\n\n\n\n# Examples for Characters\nrt1 &lt;- \"123\"\nrt2 &lt;- \"Hello\" \nrt3 &lt;- \"World\"\nglue::glue(\"Class of rt1: {class(rt1)}\")\n# Adding Strings \nglue::glue(\"Mit der Funktion glue(): {rt2} {rt3}\")\npaste(\"Mit der Funktion paste():\", rt2, rt3, sep = \" \")\n# Compare Strings\nrt2 == \"Hello\"\nrt2 == \"HELLO\"\nrt1 == 123\n# Length of String\nglue(\"Länge von \\\"123\\\": {nchar(rt1)}\")\nglue(\"Länge von \\\"Hello\\\": {nchar(rt2)}\")\n\n#&gt; Class of rt1: character\n#&gt; Mit der Funktion glue(): Hello World\n#&gt; [1] \"Mit der Funktion paste(): Hello World\"\n#&gt; [1] TRUE\n#&gt; [1] FALSE\n#&gt; [1] TRUE\n#&gt; Länge von \"123\": 3\n#&gt; Länge von \"Hello\": 5\n\n\n\nR hat es schwer mit Zusammenaddieren von Strings und multiplizieren von Strings mit einer Zahl.\n\n\n\n\n\n\nMore about string operations in R\n\n\n\n\n\nWenn man in R zwei Strings zusammen addieren will oder String mit einer Zahl multiplizieren will, gibt R Error zurück, also kann es nicht. Vielleich gibt es irgendein Paket, das dies ermöglichen, müsste man mal schauen. Also einfach Addieren von zwei Strings wie in Python geht in R nicht. Mit der Funktion glue() aus dem Paket glue oder mit der Funktion paste konnte ich zwei Strings zusammen addierend anzeigen lassen. Diese Funktion gibt es auch im Paket stringr kann so angewendet werden: stringr::str_glue(). Die Funktion glue(\"The value of text is {text}) ist wie f-String in Python print(f\"The value of text is {text}\").\n\nrt1 + rt2\n#&gt; Error in rt1 + rt2: nicht-numerisches Argument für binären Operator\nrt3 * 3\n#&gt; Error in rt3 * 3: nicht-numerisches Argument für binären Operator\n\n\n\n\n\n\n\n\n# Examples for Characters\npt1 = \"123\"\npt2 = \"Hello\" \npt3 = \"world\"\nprint(f\"Type of pt1: {type(pt1)}\")\n# Adding Strings\nprint(pt2 + \" \" + pt3) # or\nprint(f\"{pt2} {pt3}\")\n# Multiply a string by 3\npt3*3\n# Compare\npt2 == \"Hello\"\npt2 == \"HELLO\"\npt1 == 123\n# Length of String\nprint(f\"Länge von \\\"123\\\": {len(pt1)}\")\nprint(f\"Länge von \\\"Hallo\\\": {len(pt2)}\")\n\n#&gt; Type of pt1: &lt;class 'str'&gt;\n#&gt; Hello world\n#&gt; Hello world\n#&gt; 'worldworldworld'\n#&gt; True\n#&gt; False\n#&gt; False\n#&gt; Länge von \"123\": 3\n#&gt; Länge von \"Hallo\": 5\n\n\n\n\n\n\nStrings sing ein umfangreiches Thema. Hier waren nur Sachen bezogen auf Datentyp. Vielleicht wird es zudem ein separates Notizbuch geben .\n\n\nlogical/bool\nDie Objekt vom logischen Typ können die Werte WAHR/FALSCH oder 1/0 annehmen. Diese werden in R als logical und in Python als bool gespeichert. Schreibweisen unterscheiden sich auch, geschrieben bzw. dargestellt werden sie in R mit Großbuchstaben: TRUE/FALSE und in Python klein geschrieben mit Großbuchstaben am Anfang: True/False.\nrt &lt;- TRUE\nrf &lt;- FALSE\nclass(rt)        # Type of TRUE\n#&gt; [1] \"logical\"\nclass(rf)        # Type of FALSE\n#&gt; [1] \"logical\"\nis.logical(rt)   # Is TRUE logical\n#&gt; [1] TRUE\nas.character(rt) # TRUE as character\n#&gt; [1] \"TRUE\"\nas.character(rf) # FALSE as character\n#&gt; [1] \"FALSE\"\nas.integer(rt)   # TRUE as integer\n#&gt; [1] 1\nas.integer(rf)   # FALSE as integer\n#&gt; [1] 0\nrt & rf          # rt AND rf\n#&gt; [1] FALSE\nrt | rf          # rt OR rf\n#&gt; [1] TRUE\n!rt              # Is not TRUE\n#&gt; [1] FALSE\npt = True\npf = False\ntype(pt)  # Type of True\n#&gt; &lt;class 'bool'&gt;\ntype(pf)  # Type of False\n#&gt; &lt;class 'bool'&gt;\ntype(pt) is bool # Is bool\n#&gt; True\nstr(pt)   # True as String\n#&gt; 'True'\nstr(pf)   # False as String\n#&gt; 'False'\nint(pt)   # True as Integer\n#&gt; 1\nint(pf)   # False as Integer\n#&gt; 0\npt and pf # pt AND pf\n#&gt; False\npt or pf  # pt OR pf\n#&gt; True\nnot pt    # Is not True\n#&gt; False\n\n\n\nR\n\n\nPython\n\n\n\nHoffentlich ist mir gelungen, meine Notizen einigermaßen verständänlich und anständig darzustellen . Next Topic will be about data structures."
  },
  {
    "objectID": "posts/function/funksiya_uz.html#intro",
    "href": "posts/function/funksiya_uz.html#intro",
    "title": "R & Python: Functions\n in Uzbek",
    "section": "Intro",
    "text": "Intro\nBa’zan biror bir yechim ustida ishlanganda bir xil amalni yoki ifodani ko’p joylarda takroran qo’llashga to’g’ri keladi. Shunaqa hollarda funksiyalar qo’l keladi. Funksiya – bu dastur davomida bir yoki bir necha marta bajarilishi zarur yoki mumkin bo’lgan ko’rsatmalarning (kodlardan iborat qatorlaningr) nomlangan ketma-ketligidir. Funksiya faqat chaqirilganda ishlaydi va ma’lum bir vazifani bajarishda ishlatiladi.\nFunksiyagaga uning nomi bilan murojat qilinadi. Uning ortida bir qator yoki bir necha qatordan iborat kod bo’lishi mumkin. Dastur davomida ma’lum bir kodlarni qayta-qayta yozmaslik uchun biz ularni jamlab, bitta funksiya ichiga joylashimiz va dastur davomida bu kodlarga funksiya nomi orqali murojat qilishimiz mumkin (Narzullaev 2020)."
  },
  {
    "objectID": "posts/function/funksiya_uz.html#writing-function",
    "href": "posts/function/funksiya_uz.html#writing-function",
    "title": "R & Python: Functions\n in Uzbek",
    "section": "Writing function",
    "text": "Writing function\nDastur davomida tayyor fuksiyalarni ham ishlatishimiz mumkin, bular built-in-functions ham deyiladi. Bunaqa tayyor funksiyalar Pythonda masalan print, sum, len, min, max, mean, upper, round va hokozalar. R da bularga sum, round, toupper, mean, nchar, lenght va boshqalarni misol qilib keltirish mumkin. Bundan tashqari, qoyilgan vazifa va yechimga qarab, biz o’zimiz ham funksiyalar, ya’ni custom functions yaratishimiz mumkin. Python va R da funksiya yozishda yozish uslubi biroz farq qilaydi:\n\n\n\ndef func_name(parameters/arguments):\n  \"\"\"description of function\"\"\"\n  statements/actions\n  return expressions/output\n\n\n\n\n\nfunc_name &lt;- function(arguments,parameters){\n  actions/statements\n  return(output/expression)\n}\n\n\n\nFunction in Python\nPythonda funksiya def kalit so’zi yordamida yaratiladi. Kalit so’zidan keyin funksiya nomi yozilib, agar argument qabul qiladigan funksiya bo’lsa, qavs ichiga argumentlar beriladi va tinish belgis (ikki nuqta) qo’yiladi va yangi qatordan to’rta bo’sh joy (probel) tashlab bajarilishi kerak bo’lgan kod (statement) yoziladi va oxirida return yordamida natija qaytariladi. Quyidagi grafikda Python da funksiyaning yaratilishi va uning tuzilmalari va aklit so’zlari izohlar bilan keltirilgan. Screenshot (Guy Hart-Davis 2020) dan olingan.\n\n\n\nFunction in Python\n\n\nMisol uchun bizga sonlardan iborat ro’yxat berilgan. Bu ro’yxatdagi sonlar uchun o’rtacha arifmetik qiymatni hisoblaydigan funksiya tuzamiz.\n\n# imort random mudul\nfrom numpy import random\n# create a random list len = 15\nlst = list(random.randint(1,50, size = 15)); lst\n#&gt; [5, 5, 10, 31, 21, 26, 29, 20, 22, 5, 8, 11, 20, 30, 43]\n# write a function\ndef my_average(x):\n  average = round(sum(x)/len(x), 2)\n  return average\n# call the function\nmy_average(lst)\n#&gt; 19.07\n\n\n\nFunction in R\nR dasturlash tilida funksiyalar ham object sifatida qaraladi. Boshqa dasturlash tilllaridagi kabi R da ham funksiyaga nom (name) beriladi va unga argument yoki argumentlar (arguments) uzatiladi. Funksiyani tana, ya’ni body qismida bajarilishi kerak bo’lgan harakatlar (actions) amalga oshiriladi va natija (output) qaytariladi.\nQuyidagi grafikda R da funksiyaning yaratilishi va uning tuzilmalari va aklit so’zlari keltirilgan. Screenshot (Cheng 2022) dan olingan.\n\n\n\nFunction in R\n\n\nQuyida yuqoridagi Python orqali yaratilgan ro’yxatdagi sonlar uchun o’rtacha arifmetik qiymatni hisoblaydigan funksiyani R dasturlash tilida tuzamiz.\n\n# convert in Python created list to the R-Vector\nvec &lt;- unlist(py$lst)\n# write a function\nmy_average &lt;- function(x){\n  output &lt;- round(sum(vec)/length(vec), 2)\n  return(output)\n}\n# call the function\nmy_average(vec)\n#&gt; [1] 19.07"
  },
  {
    "objectID": "posts/function/funksiya_uz.html#anonymous-functions",
    "href": "posts/function/funksiya_uz.html#anonymous-functions",
    "title": "R & Python: Functions\n in Uzbek",
    "section": "Anonymous Functions",
    "text": "Anonymous Functions\nYuqorida keltirilganidek, agar biz biror funksiya yaratib olsak, funksiyamizdan hamma joyda, yani qayerda funksiyamiz bajara oladigan amllarni qo’llash kerak bo’lgan joylayrda qo’llasak bo’ladi. Ba’zan funksiyalarni bir marta ham ishlatish mumkin. Bunda yuqoridagidek o’zimizni funksiyamizni yaratib olishimiz va keyin kerakli joyda chaqirishimiz shart emas. Bunday holllarda ko’pincha nomsiz funksiyalardan (anonymous functions) foydalaniladi. Bu funksiyalar faqat vaqtinchalik yaratiladi va oʻzgaruvchiga nom berilmasdan foydalaniladi. Nomsiz funksiyalar nomli funksiyalar kabi chaqirish mumkin. Python da def kalit so’zi o’rniga lambda kalit so’zi ishlatiladi. Shuning uchun ham Python da nomsiz funksiyalar lambda funksiyalar deb ham ataladi. Lambda funksiyalari istalgan miqdordagi argumentlarga ega bo’lishi mumkin, ammo funksiya badanida faqat bitta ifoda mavjud bo’ladi. Ifoda bajariladi va qaytariladi (return operatori shart emas)(Narzullaev 2020).\nAytaylik, yana ro’yxat berilgan bo’lsin. Ro’yxatdagi sonlarni misol uchun ikkinchi darajaga oshirish kerak. Pythonda lambda funksiasidan quyidagicha foydalanishimiz mumkin1:\n\n# imort random mudul\nfrom numpy import random\n# create a random list len = 15\nlst2 = list(random.randint(1, 15, size = 7)); lst2\n#&gt; [4, 2, 9, 5, 9, 11, 10]\n# Squaring the numbers using lambda\nsqrt = list(map(lambda num: num**2, lst2)); sqrt\n#&gt; [16, 4, 81, 25, 81, 121, 100]\n\nR da asosan apply funksiyalar turkumi2 nomsiz funksiyalardan foydalanadi. Yuqoridagi misolni R da sapply-funksiyasi yordamida quyidagicha yozishimiz mumkin:\n\n# convert in Python created list to the R-Vector\nvec2 &lt;- unlist(py$lst2)\nvec2\n#&gt; [1]  4  2  9  5  9 11 10\nsapply(vec2, function(num) num**2)\n#&gt; [1]  16   4  81  25  81 121 100"
  },
  {
    "objectID": "posts/function/funksiya_uz.html#footnotes",
    "href": "posts/function/funksiya_uz.html#footnotes",
    "title": "R & Python: Functions\n in Uzbek",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nLambda funksiyasini ko’pincha map, filter va reduce funksiyalarini ishlatganda qo’llash maqasadga muvofiqrog bo’ladi. Bunday funksiyalari uchun alohida mavzu bu yerda. ↩︎\nBunday funksiyalari uchun alohida mavzu bu yerda.↩︎"
  },
  {
    "objectID": "posts/mapping/apply_uz.html",
    "href": "posts/mapping/apply_uz.html",
    "title": "R & Python: Functions\n in Uzbek",
    "section": "",
    "text": "Kayingi mavzu apply/mapping funksiyalari haqida bo’ladi\n\n\n\n\nTez kunda…\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/mean/average_uz.html",
    "href": "posts/mean/average_uz.html",
    "title": "Estimates of Location\n in Uzbek",
    "section": "",
    "text": "Tavsiflovchi statistika (descriptive statistics) yordamida ma’lumotlar umumlashtirilgan tarzda taqdim etiladi va tavsiflanadi, ya’ni Tavsiflovchi statistika ko’plab daraxtlar (berilgan ko’p ma’lumotlar) o’rniga o’rmonni (masalan o’rta qiymat) ko’rsatadi (Sauer 2019). Demak bunda ma’lumotlar ular haqida birinchi taassurotni olish uchun explorativ tavsiflanadi. Bu narsa Machine Learning sohasida Feature Engineering deb ham ataladi (Alby 2022). Tavsiflovchi statistikada yoki ma’lumotlarni tavsifiy tahlil qilishda maqsadi, ko’rsatgich raqamlar (key figures), jadvallar va grafiklar yordamida ma’lumotlarni taqsimlashning umumiy ko’rinishda tasvirlab berishga qaratiladi. Tavsiflovchi statistikada asosiy o’lchovlar ma’Lumotlar to’plamini ikki holatda tasvirlaydi: ma’lumotlarni joylashuvi va tarqalishi.\nKo’p hollarda ma’lumotlar bir markaziy nuqta atrofida to’planadi. Bunda har qanday ma’lumotni tavsiflash uchun ma’lum bir odatiy quymatni ko’rsatish yetarli bo’ladi. Markaziy tendensiyasi (engl. Estimates of Location) ma’lumotlarni ana shu odatiy quymatga yaqinlashuvini ifodalaydi, boshqacha aytganda qaysi qiymat ma’lumotlar to’plami taqsimotining markazini eng yaxschi ifodalay oladi. Bularga arifmetik o’rtacha arifmetik qiymat, mediana (engl median) va mode lar kiradi,"
  },
  {
    "objectID": "posts/mean/average_uz.html#mean",
    "href": "posts/mean/average_uz.html#mean",
    "title": "Estimates of Location\n in Uzbek",
    "section": "Mean",
    "text": "Mean\nO’rtacha arifmetik qiymat, (engl. mean) analitik o’rta qiymatlar ichida eng ko’p tarqalgan turi hisoblanadi. Arifmetik o’rta qiymat barcha qiymatlarni \\((x_1, x_2, ..., x_n)\\) qo’shish va yig’indini qiymatlar soniga (n) bo’lish yo’li bilan hisoblanadi: \\[\n\\bar{x} = \\frac{x_1+x_2+x_3+...+x_n}{n}  = \\frac{1}{n}\\sum_{i = 1}^{n}{x_i}\n\\] Aytaylik, biz ko’chada so’rov o’tkazdik va odamlardan ularning kasbi, yoshi, bo’yi va daromadi haqida so’radik.\n\n\nshow the code\ninterview &lt;- list(\n  profession = c(\"Doctor\", \"Teacher\", \"Doctor\", \"Pensioner\", \"Professor\", \"Pensioner\", \"Student\", \"Student\", \"Pensioner\"),\n  age = c(47, 39, 55, 68, 51, 71, 21, 25, 82),\n  tall = c(1.75, 1.72, 1.73, 1.68, 1.75, 1.70, 1.78, 1.77, 1.73),\n  income = c(3500,  2200, 3400, 2050, 2600, 1400, 1050, 950, 1100)\n)\ndf &lt;- data.frame(interview)\nas_tibble(df)\n\n\n#&gt; # A tibble: 9 × 4\n#&gt;   profession   age  tall income\n#&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 Doctor        47  1.75   3500\n#&gt; 2 Teacher       39  1.72   2200\n#&gt; 3 Doctor        55  1.73   3400\n#&gt; 4 Pensioner     68  1.68   2050\n#&gt; 5 Professor     51  1.75   2600\n#&gt; 6 Pensioner     71  1.7    1400\n#&gt; 7 Student       21  1.78   1050\n#&gt; 8 Student       25  1.77    950\n#&gt; 9 Pensioner     82  1.73   1100\n\n\nArifmetik o’rta qiymatni (yozishga qulay bo’lishi uchun bundan keyin mean deb ketiladi) hisoblash uchun R va Python da mean() funksiyasi bor. Mean hisoblashda etibor berish kerak bolgan narsa, ma’lumotlar metrik bo’lishi kerak. Misoldagi yosh va daromad xarakteristikalari (variable) uchun mean R va Pythonda quyidagicha hisoblanadi:\n\n\n\nm_age &lt;- mean(df$age); m_inc &lt;- mean(df$income)\nglue::glue(\"mean of age: {m_age}\\nmean of income: {round(m_inc, 2)}\")\n#&gt; mean of age: 51\n#&gt; mean of income: 2027.78\n\n\n\n\n\nage_m = r.df.age.mean(); inc_m = r.df[\"income\"].mean()\nprint(f\"mean of age: {age_m}\\nmean of income: {round(inc_m, 2)}\")\n#&gt; mean of age: 51.0\n#&gt; mean of income: 2027.78\n\n\n\n\n\n\n\n\nInterpretatsiya\n\n\n\nTo’qqiz respondentning (ya’ni biz so’ragan insonlar) yoshi bo’yicha o’rtacha arifmetik ko’rsatkich: 51 va daromad uchun: 2161. Demak biz, respondentlar haqidagi ma’lumotlarni bitta odatiy qiymat (bu yerda o’rta qiymat) bilan tasvirlashimisi mumkin, yani ularni o‘rtacha 51 yoshda va oyiga o‘rtacha 2027,78 (evro, dollar, so’m, nima bo’sayam) maosh oladi, deb umumlashtirib aytishimiz mumkin."
  },
  {
    "objectID": "posts/mean/average_uz.html#median",
    "href": "posts/mean/average_uz.html#median",
    "title": "Estimates of Location\n in Uzbek",
    "section": "Median",
    "text": "Median\nMediana - tartiblangan qiymatlar o’rtasida joylashgan qiymat hisoblanadi. U taqsimotni ikkita teng yarimga ajratadi va taqsimotning birinchi yarmi undan kichikroq (agar taqsimotda takrorlanuvchi sonlar bo’lmasa) va ikkinchi yarmi undan kattaroq bo’ladi.\nMediana hisoblash uchun R va Pythonda median() funksiyasi mavjud. Mediana metrik va ordinal(tartibli) qiymatlarni talab qiladi. Quyida misoldagi respondentlarning bo’yi va daromadi uchun median hisoblangan.\n\n\n\nmed_tall &lt;- median(df$tall); med_inc &lt;- median(df$income)\nglue::glue(\"median of tall: {med_tall}\\nmedian of income: {med_inc}\")\n#&gt; median of tall: 1.73\n#&gt; median of income: 2050\n\n\n\n\n\nimport pandas as pd\ntall_med = r.df.tall.median(); inc_med = r.df[\"income\"].median()\nprint(f\"median of tall: {tall_med}\\nmean of income: {inc_med}\")\n#&gt; median of tall: 1.73\n#&gt; mean of income: 2050.0\n\n\n\n\n\n\n\n\nInterpretatsiya\n\n\n\nTo’qqiz respondentning bo’yi bo’yicha o’rtacha ko’rsatkich: 1,73 va daromad uchun: 2050. Korsatgichlardan xulosa qilib shunday deyish mumkin: respondentlarning yarmini (50%) bo’yi 1,73 metrdan pastroq va oyiga 2050 dan kam (evro, dollar, nima bo’sayam) maosh oladi. Yoki aksincha, so’ralganlarning yarmini (50%) bo’yi 1,73 metrdan baland va oyiga 2050 dan ortiq daromad topadi."
  },
  {
    "objectID": "posts/mean/average_uz.html#modus",
    "href": "posts/mean/average_uz.html#modus",
    "title": "Estimates of Location\n in Uzbek",
    "section": "Modus",
    "text": "Modus\nma’lumotlar to’plamida eng ko’p uchraydigan qiymat - mode yoki modal qiymat deyiladi. Mode uchun qiymatni metrik, tartibli va nominal (kategorik) ma’lumotlar uchun hisoblanishi mumkin. Nominal ma’lumotlar uchun modal o’rtacha qiymatni aniqlash uchun yagona usuldir. R da mode uchun bevosita funksiya yo’q, modal qiymatni ko’rsatish uchun table funksiyasidan foydalanish mumkin- Bu funksiya qaysi qiymat nechi marta uchragani qaytaradi. Uchragan sonlari bo’yicha eng kattasi mode hisoblanadi.\n\n\n\n\nshow the code\ncat(\"Frequence table for variable profession:\")\ntable(df$profession)      # Häufigkeitstablle\n# Modus-Maximaler Wert von der Freq.Table\ncat(\"Mode for variable profession - Max value of FreqTable: \", max(table(df$profession)))\ncat(\"\\n\\nFrequence table for variable tall:\")\ntable(df$tall)            # Häufigkeitstablle\ncat(\"Mode for variable tall - Max value of FreqTable: \", max(table(df$tall)))\n\n\n#&gt; Frequence table for variable profession:\n#&gt;    Doctor Pensioner Professor   Student   Teacher \n#&gt;         2         3         1         2         1 \n#&gt; Mode for variable profession - Max value of FreqTable:  3\n#&gt; \n#&gt; Frequence table for variable tall:\n#&gt; 1.68  1.7 1.72 1.73 1.75 1.77 1.78 \n#&gt;    1    1    1    2    2    1    1 \n#&gt; Mode for variable tall - Max value of FreqTable:  2\n\n\n\n\n\n\n\nshow the code\n#from statistics import mode\n# tall_med = r.df.tall.median(); inc_med = r.df[\"income\"].median()\n# print(f\"median of tall: {tall_med}\\nmean of income: {inc_med}\")\nfreq_prof = r.df[\"profession\"].value_counts()       # FreqTable for var profession\nmodi_prof = r.df[\"profession\"].value_counts().max() # Modi for var profession\nfreq_tall = r.df[\"tall\"].value_counts()             # FreqTable for var tall\nmodi_tall = r.df[\"tall\"].value_counts().max()       # Modi for var tall\nprint(\"Frequence table for variable profession:\")\nprint(freq_prof)\nprint(f\"&gt;&gt; Mode for variable profession - Max value of FreqTable:  {modi_prof}\")\nprint(\"\\nFrequence table for variable tall:\")\nprint(freq_tall)\nprint(f\"&gt;&gt; Mode for variable tall - Max value of FreqTable:  {modi_tall}\\n\")\n\n\n#&gt; Frequence table for variable profession:\n#&gt; profession\n#&gt; Pensioner    3\n#&gt; Doctor       2\n#&gt; Student      2\n#&gt; Teacher      1\n#&gt; Professor    1\n#&gt; Name: count, dtype: int64\n#&gt; &gt;&gt; Mode for variable profession - Max value of FreqTable:  3\n#&gt; \n#&gt; Frequence table for variable tall:\n#&gt; tall\n#&gt; 1.75    2\n#&gt; 1.73    2\n#&gt; 1.72    1\n#&gt; 1.68    1\n#&gt; 1.70    1\n#&gt; 1.78    1\n#&gt; 1.77    1\n#&gt; Name: count, dtype: int64\n#&gt; &gt;&gt; Mode for variable tall - Max value of FreqTable:  2\n\n\n\n\n\n\n\n\n\nInterpretatsiya\n\n\n\nModani izohlab beradigan aytarli ko’p narsa yo’q. Misoldagi ksb va bo’y uchun hisoblangan modal qiymatlardan xulosa qilib aytish bo’lgan narsa shuki, respondentlarning aksariyati nafaqaxo’rlar yoki ko’pchilikning bo’yi 1,73 metr."
  },
  {
    "objectID": "posts/mean/average_uz.html#outliers-mean-vs-median",
    "href": "posts/mean/average_uz.html#outliers-mean-vs-median",
    "title": "Estimates of Location\n in Uzbek",
    "section": "Outliers: Mean vs Median",
    "text": "Outliers: Mean vs Median\nKo’p holatlar mavjud bo’lib, bunda mediana o’rtacha arifmetik qiymatdan yaxshiroq o’lchov birligi sifatida o’zini ko’rsata oladi, masalan, ma’lumotlar to’plamida ekstremal qiymatlar (engl. outliers) bo’lsa. Haddan tashqari holatlarda, medianaga natijani buzishi mumkin bo’lgan ekstremallar ta’sir qilmaydi. Misol tariqasida, biz yuqoridagi misolini ekstremal qiymatni qo’shish orqali kengaytiramiz. Tasavvur qilamiz, 9 ta odamdan keyin yana bitta oxirgi odamdan ma’lumotlarini oldik, aytaylik u tiktoker yoki blogger bo’lsin, ya’ni yosh (19), baland bo’yli (1,84) va boshqa respondentlarga qaraganda ancha ko’proq daromad topadi(5600). Bizning malumotlar to’plamida bu ekstremal holatni ifodalaydi. Endi bizning asl o’rtachaa arifmetik qiymatimiz o’zgaradi va yuqoriroq bo’ladi (chunki yana bir respondent qo’shildi).\n\n\nshow the code\nv &lt;- data.frame(\"Bloger\", 19, 1.84, 5600); names(v) &lt;- names(df)\nextrem &lt;- rbind(df,v)\ncat(\"New df with outlier:\\n\")\ntail(extrem, n = 3)\n# Means\ncat(\"\\nWithout outlier:\\n\")\nglue::glue(\"income: mean - {round(mean(df$income),2)}, median - {median(df$income)}\\nage: mean - {mean(df$age)}, median - {median(df$age)}\")\n#glue::glue(\"Median income: {median(df$income)}\\nMedian age: {median(df$age)}\")\ncat(\"\\nWith outlier:\\n\")\nglue::glue(\"income: mean - {mean(extrem$income)}, median - {median(extrem$income)}\\nage:mean - {mean(extrem$age)}, median - {median(extrem$age)}\")\n#glue::glue(\"Median income: {median(extrem$income)}\\nMedian age: {median(extrem$age)}\")\n\n\n#&gt; New df with outlier:\n#&gt;    profession age tall income\n#&gt; 8     Student  25 1.77    950\n#&gt; 9   Pensioner  82 1.73   1100\n#&gt; 10     Bloger  19 1.84   5600\n#&gt; \n#&gt; Without outlier:\n#&gt; income: mean - 2027.78, median - 2050\n#&gt; age: mean - 51, median - 51\n#&gt; \n#&gt; With outlier:\n#&gt; income: mean - 2385, median - 2125\n#&gt; age:mean - 47.8, median - 49\n\n\nYuqorida korinib turganidek, ekstremal holatda o’rtacha arifmetik qiymat daromad uchun 2.027,78 dan 2.385 gacha o’zgardi (o’sdi). A medianada esa o’zgarish uncha katta emas, 2.050 dan 2.125 ga o’zgardi xolos. Bunday holatda arifmetik qiymat hisoblanib, o’rtacha daromad 2.385 deb xulosa qilinsa, ma’lumotlar xato tahlil qilingan bo’ladi. Ushani uchun, agar malumotlar to’plamida ekstremal qiymatlar bo’lsa, o’rtacha qiymatni hisoblash uchun* o’rtacha arifmetik emas medianani ishlatgan afzalroq* bo’ladi."
  },
  {
    "objectID": "posts/mean/average_uz.html#usage",
    "href": "posts/mean/average_uz.html#usage",
    "title": "Estimates of Location\n in Uzbek",
    "section": "Usage",
    "text": "Usage\nO’rtacha qiymat, biz ko’rganimizdek, turli yo’llar bilan aniqlanadi. Shuning uchun vaziyatga qarab (masalan, ma’lumotlarning qaysi turga ega ekanligi) qaysi o’lchovi birligi qaysi vaziyatga (ma’lumotlarga) eng mos kelishini oldindan ko’rib chiqish maqasadga muvofiq bo’ladi. Bunga mani qisqacha xulosam:\n\nnominal yoki kategorik ma’lumotlar uchun mode ishlatiladi, chunki boshqa markaziy tendensiya o’lchovlari bunqa ma’lumot turlariga mos kelmaydi.\nMediana dan foydalanish qachonki oqilona bo’ladi, agar\n\nma’lumotlar ordinal yoki tartibli bo’lsa.\ntaqsimotda extremal holatlar borligini bilsak.\n\nAgar ma’lumotlar va nosimmetrik taqsimot mavjud bo’lsa, unda arifmetik o’rtacha eng mos keladi miqdoriy (количественный) bo’lsa va taqsimot symmetrik bo’lsa, unda o’rtacha arifmetik qiymat dan foydalanish eng tO’g’ri yo’l hosoblanadi."
  },
  {
    "objectID": "posts/mean/average_uz.html#quantile-quartile",
    "href": "posts/mean/average_uz.html#quantile-quartile",
    "title": "Estimates of Location\n in Uzbek",
    "section": "Quantile & Quartile",
    "text": "Quantile & Quartile\nMa’lumotni ikkita teng o’lchamga ajratadigan medianadan farqli o’laroq, kvanti tariblangan ma’lumotlarni turli o’lchamdagi bo’limlarga ajratadi, ya’ni \\(x_p\\) kavntil yoki x% (px100) kvantillarga bo’ladi. Kvantlarni bo’laklarga ajratilgan bo’limlardeyish mumkin. Misol uchun, 10% kvantil yoki 0,1 kvantil taqsimotdagi ma’lumotlarning 10% bu kvantil ostida, qolganlari esa (1-p, ya’ni 90%) uning ustida joylashganligini aytadi. Agar ma’lumotlarni to’rtta teng qismga ajratilsa, bular maxsus kvantillar, ya’ni kvartillar hisoblanadi.\n\n0,25/25%-kvantil = quyi/birinchi kvartil = Q1 - n ma’lumotlarning kamida 25% \\(x_{0,25}\\) dan kichik yoki teng ekanligini bildiradi.\n0,50/50%-kvantil = o’rta/ikkinchi kvartil = Q2 - medianaga teng, n ma’lumotlarning kamida 50% \\(x_{0,50}\\) dan kichik yoki katta.\n0,75/75%-kvantil = yuqori/uchinchi kvartil = Q3 - n ma’lumotlarning kamida 75% \\(x_{0,75}\\) dan kichik yoki teng ekanligini bildiradi.\n\nMisol tariqasida, tasavvur qilaylik, biz kichik so’rov o’tkazamiz va 10 kishidan kuniga nechi soat vaqtini uyali telefonda o’tkazishini so’raymiz. Aytaylik, javob quyidagicha (raqamlar o’ylab topilgan):\n\ntime &lt;- c(2.3, 1.7, 3, 2, 2.5, 3.2, 3.4, 1.5, 4, 1)\nsort(time)\n#&gt;  [1] 1.0 1.5 1.7 2.0 2.3 2.5 3.0 3.2 3.4 4.0\nmedian(time)\n#&gt; [1] 2.4\n\nKvartillarni hisoblash uchun avval ma’lumotlar to’plamlari soni (n) ni p ga (0,25, 0,50, 0,75) ko’paytirish \\(n*p\\) kerak. Natija butun son yoki butun son emasligiga qarab, keyingi hisoblash uchun ushbu formuladan foydalaniladi: \\[x_p = \\begin{cases}\n\\frac{1}{n}(x_{(np)} + x_{(np+1)}) & if (p\\cdot n) &\\text{wholenumbered}\\\\\nx_{(|np|+1)} & if (p\\cdot n)&\\text{not wholenumbered}\\end{cases}\\]\nQuyida kvartillarni hisoblashni grafik tarzda tasvirlangani:\n Yaxshiyamki, hamma narsani qo’lda hisoblash shart emas. Buning uchun R da quantile() funksiyasi mavjud. Bundan tashqari, summary() (Pythondagi describe() funksiyasi kabi) funktsiyasi o’rtacha arifmetik qiymat, mediana, Q1, Q2 = mediana, Q3, min va max kabi markaziy tendensiya o’lchovlari ko’rsatish orqali ma’lumotlarning birinchi taassurotini beradi.\n\n\n\n\nshow the code\ncat(\"Vector time: Qauartile: 25%-, 50%-, 75%- Quantile\\n\")\nquantile(time)        # Qauartile: 25%-, 50%-, 75%- Quantile\ncat(\"\\nVector time: 0,6- Quantil:\\n\")\nquantile(time, 0.60)  # 60%- Quantil\ncat(\"\\nVector time: Summary\\n\")\nsummary(time)         # Summary for variable income\ncat(\"\\nDescriptive measures with summary() for df:\\n\")\nsummary(df)\n# summary(df$age)     # Summary for selected variable (age)\n\n\n#&gt; Vector time: Qauartile: 25%-, 50%-, 75%- Quantile\n#&gt;    0%   25%   50%   75%  100% \n#&gt; 1.000 1.775 2.400 3.150 4.000 \n#&gt; \n#&gt; Vector time: 0,6- Quantil:\n#&gt; 60% \n#&gt; 2.7 \n#&gt; \n#&gt; Vector time: Summary\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;   1.000   1.775   2.400   2.460   3.150   4.000 \n#&gt; \n#&gt; Descriptive measures with summary() for df:\n#&gt;   profession             age          tall           income    \n#&gt;  Length:9           Min.   :21   Min.   :1.680   Min.   : 950  \n#&gt;  Class :character   1st Qu.:39   1st Qu.:1.720   1st Qu.:1100  \n#&gt;  Mode  :character   Median :51   Median :1.730   Median :2050  \n#&gt;                     Mean   :51   Mean   :1.734   Mean   :2028  \n#&gt;                     3rd Qu.:68   3rd Qu.:1.750   3rd Qu.:2600  \n#&gt;                     Max.   :82   Max.   :1.780   Max.   :3500\n\n\nPythonda ham quantile() funksiyasi mavjud bo’lib, kerakli kvantil(lar)ni ro’yxat formatida qavs ichiga kiritilishi kerak. Funktsiya Pandas yoki NumPy modullari orqali ishlatiladi.\n\n\n\n\nshow the code\nprint(\"Quartile for one variable (age):\")\nr.df[\"age\"].quantile([0.25,0.5,0.75])\nprint(\"\\nQuantile for more variables:\")\nr.df[[\"age\", \"income\", \"tall\"]].quantile([.1, .25, .5, .75], axis = 0)\n# with describe()\nprint(\"\\nDescriptive measures with discribe() for df:\")\n# r.df[[\"age\", \"tall\"]].describe() # for selected variables\nr.df.describe()\n\n\n#&gt; Quartile for one variable (age):\n#&gt; 0.25    39.0\n#&gt; 0.50    51.0\n#&gt; 0.75    68.0\n#&gt; Name: age, dtype: float64\n#&gt; \n#&gt; Quantile for more variables:\n#&gt;        age  income   tall\n#&gt; 0.10  24.2  1030.0  1.696\n#&gt; 0.25  39.0  1100.0  1.720\n#&gt; 0.50  51.0  2050.0  1.730\n#&gt; 0.75  68.0  2600.0  1.750\n#&gt; \n#&gt; Descriptive measures with discribe() for df:\n#&gt;              age      tall       income\n#&gt; count   9.000000  9.000000     9.000000\n#&gt; mean   51.000000  1.734444  2027.777778\n#&gt; std    20.621591  0.032059   986.189355\n#&gt; min    21.000000  1.680000   950.000000\n#&gt; 25%    39.000000  1.720000  1100.000000\n#&gt; 50%    51.000000  1.730000  2050.000000\n#&gt; 75%    68.000000  1.750000  2600.000000\n#&gt; max    82.000000  1.780000  3500.000000\n\n\n\n\n\n\n\n\n\nInterpretatsiya\n\n\n\nKvantillar yoki kvartillar ma’lumotlarni taqsimlashni tasvirlaydi. Bu umumiy taqsimotning ma’lum bir qismi ma’lum bir kvantil/kvartil ostida yoki undan yuqorida joylashgan degan bayonotni berishga imkon beradi. Bular Quartile oder Quartile gibt einen der ersten Überblick von der Datenverteilung. Dadurch kann man die Aussage treffen, dass eine bestimme Teil der gesamten Verteulung liegt unter oder über ein Quantil/Quartil. Nehmen wir das Beispiel von oben mit dem Handy. Uyali telefon haqidagi yuqoridagi misolni olaylik.\n\n# How many time spent you for handy in a day?\nhandy &lt;- c(2.3, 1.7, 3, 2, 2.5, 3.2, 3.4, 1.5, 4, 1)\n# Quartile\nquantile(handy)\n#&gt;    0%   25%   50%   75%  100% \n#&gt; 1.000 1.775 2.400 3.150 4.000\n# 0.6 Quantil\nquantile(handy, 0.6)\n#&gt; 60% \n#&gt; 2.7\n\nBundan ko’rinib turibdiki, 10 respondentning to’rtdan uch qismi (75%) vaqtini 3 soatgacha uyali telefonda o’tkazadi yoki kvartil 0,6 - respondentlarning 60 foizi kuniga 2,7 soatgacha vaqtini uyali telefonda yo’qotadi.\n\nBox-Plot\nTavsiflash tahlilini amalga oshirishda, ma’lumotlarning harakatlari haqida birinchi taassurot olish uchun, ayniqsa ma’lumotlar to’plami katta bo’lsa, ko’pincha grafik usullardan ham foydalananiladi. Eng kop qo’llanaliganlaridan bu box-plot dir. U ma’lumotlarni asosan 5 ta asosiy o’lchamga (\\(x_{min}\\), \\(x_{0,25}\\), \\(x_{0,50}\\), \\(x_{0,75}\\), \\(x_{max}\\)) jamlaydi va ularni grafik tarzda aks ettiradi. Quyida box-ploti tasvirlangan grafik keltirilgan.\n\n\n\nBox-Plot\n\n\nR da box plot uchun basis funktsiyalar ichida boxplot() funksiyasi ham mavjud. Box-plotni ggplot2 paketi orqali ham R da yaratish mumkin. Pythonda ham bu funksiya matplotlib yoki seaborn modullarida mavjud.\n\n\n\n\n\n\n\nshow the code\nboxplot(extrem$age,\n  ylab = \"age\",\n  main = \"A sample Box-Plot\",\n  col= \"azure\")\nabline(h=mean(extrem$age), col=\"tomato1\", lwd=1, lty = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshow the code\nimport matplotlib.pyplot as plt\n\n# Create a boxplot for the desired column\nplt.boxplot(r.extrem[\"age\"], showmeans = True, meanline = True, showfliers = False)\n# Add labels and title\nplt.xlabel(\"\")\nplt.ylabel(\"age\")\nplt.title(\"A sample Box-Plot\")\n# Show the plot\nplt.show()\n\n\n#&gt; {'whiskers': [&lt;matplotlib.lines.Line2D object at 0x0000028267B37230&gt;, &lt;matplotlib.lines.Line2D object at 0x0000028267B37500&gt;], 'caps': [&lt;matplotlib.lines.Line2D object at 0x0000028267B37800&gt;, &lt;matplotlib.lines.Line2D object at 0x0000028267B37B00&gt;], 'boxes': [&lt;matplotlib.lines.Line2D object at 0x00000282678E6480&gt;], 'medians': [&lt;matplotlib.lines.Line2D object at 0x0000028267B37DD0&gt;], 'fliers': [], 'means': [&lt;matplotlib.lines.Line2D object at 0x0000028267B7C110&gt;]}\n\n\n\n\n\n\n\n\n\n\n\n\n\nYuqoridagi box-plot misoldagi dataframening age(yosh) ustuni(variable) uchun yaratilgan. Grafikda ko’rinib turganidek, ma’lumotlarning yarmi (50%) quti (IQR) ichida joylashgan, 25% quti yuqorisida va 25% quti ostida (grafikdagi quti tashqarisidagi nuqta-nuqta chiziqlar) joylashgan. Biz buni shunday talqin qilishimiz mumkin: respondentlarning/odamlarning 50 foizi 25 yoshdan 68 yoshgacha. O’rtadagi tekis chiziq mediana = 51, kesilgan chiziq esa o’rtacha arifmetik qiymat = taxminan 49 (o’rtacha arifmetik qiymatni grafikga qo’shish mumkin, lekin box-plotning tarkibiy/asosiy tasvirlaydigan o’lchamlariga kirmaydi), bundan kelib chiqib, so’rovda qatnashganlarning o’rtacha yoshi 50 yoshni tashkil qiladi degan xulosaga kelish mumkin. Respondentlarning 25 foizi 25 yoshgacha, 25 foizi 68 yoshdan yuqori, va qayd etilganidek, 50 foizi 25-68 yosh orasida.\n\n\nReferences"
  },
  {
    "objectID": "posts/mean/average_uz.html#box-plot",
    "href": "posts/mean/average_uz.html#box-plot",
    "title": "Estimates of Location\n in Uzbek",
    "section": "Box-Plot",
    "text": "Box-Plot\nTavsiflash tahlilini amalga oshirishda, ma’lumotlarning harakatlari haqida birinchi taassurot olish uchun, ayniqsa ma’lumotlar to’plami katta bo’lsa, ko’pincha grafik usullardan ham foydalananiladi. Eng kop qo’llanaliganlaridan bu box-plot dir. U ma’lumotlarni asosan 5 ta asosiy o’lchamga (\\(x_{min}\\), \\(x_{0,25}\\), \\(x_{0,50}\\), \\(x_{0,75}\\), \\(x_{max}\\)) jamlaydi va ularni grafik tarzda aks ettiradi. Quyida box-ploti tasvirlangan grafik keltirilgan.\n\n\n\nBox-Plot\n\n\nR da box plot uchun basis funktsiyalar ichida boxplot() funksiyasi ham mavjud. Box-plotni ggplot2 paketi orqali ham R da yaratish mumkin. Pythonda ham bu funksiya matplotlib yoki seaborn modullarida mavjud.\n\n\n\n\n\n\n\nshow the code\nboxplot(extrem$age,\n  ylab = \"age\",\n  main = \"A sample Box-Plot\",\n  col= \"azure\")\nabline(h=mean(extrem$age), col=\"tomato1\", lwd=1, lty = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshow the code\nimport matplotlib.pyplot as plt\n\n# Create a boxplot for the desired column\nplt.boxplot(r.extrem[\"age\"], showmeans = True, meanline = True, showfliers = False)\n# Add labels and title\nplt.xlabel(\"\")\nplt.ylabel(\"age\")\nplt.title(\"A sample Box-Plot\")\n# Show the plot\nplt.show()\n\n\n#&gt; {'whiskers': [&lt;matplotlib.lines.Line2D object at 0x0000028267B37230&gt;, &lt;matplotlib.lines.Line2D object at 0x0000028267B37500&gt;], 'caps': [&lt;matplotlib.lines.Line2D object at 0x0000028267B37800&gt;, &lt;matplotlib.lines.Line2D object at 0x0000028267B37B00&gt;], 'boxes': [&lt;matplotlib.lines.Line2D object at 0x00000282678E6480&gt;], 'medians': [&lt;matplotlib.lines.Line2D object at 0x0000028267B37DD0&gt;], 'fliers': [], 'means': [&lt;matplotlib.lines.Line2D object at 0x0000028267B7C110&gt;]}\n\n\n\n\n\n\n\n\n\n\n\n\n\nYuqoridagi box-plot misoldagi dataframening age(yosh) ustuni(variable) uchun yaratilgan. Grafikda ko’rinib turganidek, ma’lumotlarning yarmi (50%) quti (IQR) ichida joylashgan, 25% quti yuqorisida va 25% quti ostida (grafikdagi quti tashqarisidagi nuqta-nuqta chiziqlar) joylashgan. Biz buni shunday talqin qilishimiz mumkin: respondentlarning/odamlarning 50 foizi 25 yoshdan 68 yoshgacha. O’rtadagi tekis chiziq mediana = 51, kesilgan chiziq esa o’rtacha arifmetik qiymat = taxminan 49 (o’rtacha arifmetik qiymatni grafikga qo’shish mumkin, lekin box-plotning tarkibiy/asosiy tasvirlaydigan o’lchamlariga kirmaydi), bundan kelib chiqib, so’rovda qatnashganlarning o’rtacha yoshi 50 yoshni tashkil qiladi degan xulosaga kelish mumkin. Respondentlarning 25 foizi 25 yoshgacha, 25 foizi 68 yoshdan yuqori, va qayd etilganidek, 50 foizi 25-68 yosh orasida."
  },
  {
    "objectID": "posts/mean/average_uz.html#references",
    "href": "posts/mean/average_uz.html#references",
    "title": "Estimates of Location\n in Uzbek",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "projects/pyinexcel.html",
    "href": "projects/pyinexcel.html",
    "title": "A small dynamic report in Excel with Python",
    "section": "",
    "text": "Tabellarische Daten werden in Büros weltweit am meisten in Tabellenkalkulationen bearbeitet und gespeichert. Bekannteste Software dafür ist Microsoft Excel. Ich bin neulich darauf gestoßen, dass man Python in Excel (ab Microsoft 365) verwenden kann. Und ich hab mir vorgenommen, etwas damit zu probieren. Ich habe ein kleiner dynamischer Bericht in Excel mit Python erstellt, in dem es sich um die zehn Länder weltweit mit dem höchsten BIP auf Basis der Kaufkraftparität handelt.\n\n\n\n  File:  Download the Excel file  \\(~~~~~~~~~~~~~\\)  Data Source: Worldbank\nUm Python in Excel zu verwenden bzw. zu aktivieren, muss man eine Zelle auswählen, in die man die Formel mit Python schreiben will und klickt man auf der Registerkarte &gt; Formeln &gt; Python einfügen oder schreibt man in die Zelle =PY. Dann kann man Python - Code direkt in die Zelle schreiben. Im unten aufgeführten einfachen Beispiel werden die Werte in zwei Zellen (A1 und B1) summiert.\n\n\n\n\n\n\n\nWichtige Sachen zur Berücksichtigung\n\n\n\n\nAuf die Zellen werden durch xl verwiesen, beispielweise einen Bezug auf Zellen A1:C10 kann durch xl(\"A1:C10\") eingegeben werden\nMehrere Zelle mit Python-Code werden von oben nach unten ausgeführt geschrieben sind.\nZu verarbeitende Daten müssen entweder im Excelsheet stehen oder aus Power Query stammen.\nDaten werden durch die Eingabe der Tabellennamen (oder Power Query Namen) gelesen, in der Beispieldatei (kann heruntergeladen werden, sieh oben) ist beispielweise so eingegeben, mit dem Sheetnamen &lt;&gt;, in dem sich die Daten befinden: df = xl(\"data[#Alle]\", headers=True). Durch [#All] werden gesamte Tabelle durch Python-Formel analsiert, bei headers = True werden die Spaltennamen berücksichtigt.\n\n\n\nHier die Daten:\n\n\nCode\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, Markdown, HTML\n# read file\n#\"C:/Users/sultanov/Documents/blog/projects/data/topten.csv\"\npath = \"data/topten.csv\"\ndata = pd.read_csv(path, sep=\";\", decimal=\",\")\ndf_show = data.sort_values(by = \"2024\", ascending=False, na_position=\"last\").head(10)\n#Show the table\nMarkdown(df_show.to_markdown(index = False))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n2024\n\n\n\n\nChina\nCHN\n1.85775e+13\n1.96473e+13\n2.09746e+13\n2.28625e+13\n2.47776e+13\n2.57772e+13\n2.94382e+13\n3.25255e+13\n3.55204e+13\n3.81901e+13\n\n\nUnited States\nUSA\n1.8295e+13\n1.88049e+13\n1.96121e+13\n2.06565e+13\n2.154e+13\n2.13541e+13\n2.36812e+13\n2.60069e+13\n2.77207e+13\n2.91849e+13\n\n\nIndia\nIND\n7.20458e+12\n7.79552e+12\n8.35471e+12\n9.23079e+12\n9.93285e+12\n9.77102e+12\n1.13844e+13\n1.31241e+13\n1.48459e+13\n1.61908e+13\n\n\nRussian Federation\nRUS\n3.52624e+12\n3.53898e+12\n3.8071e+12\n4.23184e+12\n4.57955e+12\n4.65143e+12\n5.68827e+12\n6.00631e+12\n6.47648e+12\n6.92125e+12\n\n\nJapan\nJPN\n5.20091e+12\n5.1589e+12\n5.26225e+12\n5.34406e+12\n5.40446e+12\n5.35671e+12\n5.57465e+12\n5.9304e+12\n6.21296e+12\n6.40767e+12\n\n\nGermany\nDEU\n3.96657e+12\n4.24671e+12\n4.47259e+12\n4.66536e+12\n4.92498e+12\n4.88037e+12\n5.20231e+12\n5.66389e+12\n5.76347e+12\n6.03785e+12\n\n\nBrazil\nBRA\n2.98912e+12\n2.90789e+12\n2.98029e+12\n3.18719e+12\n3.33378e+12\n3.35978e+12\n3.78777e+12\n4.18023e+12\n4.47104e+12\n4.73465e+12\n\n\nIndonesia\nIDN\n2.6252e+12\n2.71576e+12\n2.85731e+12\n3.06992e+12\n3.26619e+12\n3.2234e+12\n3.53062e+12\n3.98307e+12\n4.33474e+12\n4.66289e+12\n\n\nFrance\nFRA\n2.7229e+12\n2.86115e+12\n2.97579e+12\n3.11488e+12\n3.44528e+12\n3.34502e+12\n3.56292e+12\n3.82396e+12\n3.98238e+12\n4.20156e+12\n\n\nUnited Kingdom\nGBR\n2.76798e+12\n2.8923e+12\n3.04189e+12\n3.12965e+12\n3.33588e+12\n3.21907e+12\n3.41648e+12\n3.95784e+12\n3.96675e+12\n4.19651e+12\n\n\n\n\n\nWie oben geschrieben, werden die Zellen mit Python-Coder von oben nach unten ausgeführt. In der Datei, wurden einzelne Schritte in eine Zelle geschrieben. Im Sheet &lt;&gt; sind diese Shritte beschrieben (Spalte A = step). Objectnamen (Spalte B = object) sind die Opbjekte, die durch Python-Codes (Spalte C = result) erstellt wurden. Wie unte auf dem Bild zu sehen ist, wird als erstes Data Frame erstellt (step) namens &lt;&gt; (object) und Python - Code ist in der dementsprechenden Zelle (results).\n\nDanach werden die Daten pivotiert und neues Objekt (df_piv) erstellt, um sie weiter zu bearbeiten.\n\n\nCode\nimport pandas as pd\n\ndf_pv = pd.melt(data, id_vars = [\"Country Name\", \"Country Code\"], value_vars=data.iloc[:,2:], var_name=\"years\", value_name=\"gdp\")\ndf_pv.head(10)\n\n\n#&gt;          Country Name Country Code years           gdp\n#&gt; 0               China          CHN  2015  1.857751e+13\n#&gt; 1       United States          USA  2015  1.829502e+13\n#&gt; 2               India          IND  2015  7.204581e+12\n#&gt; 3  Russian Federation          RUS  2015  3.526236e+12\n#&gt; 4               Japan          JPN  2015  5.200905e+12\n#&gt; 5             Germany          DEU  2015  3.966575e+12\n#&gt; 6              Brazil          BRA  2015  2.989121e+12\n#&gt; 7           Indonesia          IDN  2015  2.625202e+12\n#&gt; 8              France          FRA  2015  2.722896e+12\n#&gt; 9      United Kingdom          GBR  2015  2.767978e+12\n\n\nJetzt können wir aus Data Frame Top-Länder nach GDP für jeweiliges Jahr selectieren (object -&gt; df_10 ) und Rank-Spalte erstellen (object -&gt; df_rank).\nSelect top ten countries:\n\n\nCode\n# Method #1\n# N = 10\n# maske = df_pv.groupby(\"years\")[\"gdp\"].rank(method=\"first\", ascending=False) &lt;= N\n# df_10 = df_pv[maske]\n# Method #2\ndf_10 = df_pv.sort_values([\"years\", \"gdp\"], ascending=False).groupby(\"years\").head(10)\ndf_10\n\n\n#&gt;             Country Name Country Code years           gdp\n#&gt; 1701               China          CHN  2024  3.819008e+13\n#&gt; 1702       United States          USA  2024  2.918489e+13\n#&gt; 1703               India          IND  2024  1.619082e+13\n#&gt; 1704  Russian Federation          RUS  2024  6.921249e+12\n#&gt; 1705               Japan          JPN  2024  6.407672e+12\n#&gt; ...                  ...          ...   ...           ...\n#&gt; 3     Russian Federation          RUS  2015  3.526236e+12\n#&gt; 6                 Brazil          BRA  2015  2.989121e+12\n#&gt; 9         United Kingdom          GBR  2015  2.767978e+12\n#&gt; 8                 France          FRA  2015  2.722896e+12\n#&gt; 7              Indonesia          IDN  2015  2.625202e+12\n#&gt; \n#&gt; [100 rows x 4 columns]\n\n\nRank column:\n\n\nCode\ndf_rank = df_10.copy()\ndf_rank[\"rank\"] = df_rank.groupby(\"years\")[\"gdp\"].rank(ascending=False)\ndf_rank\n\n\n#&gt;             Country Name Country Code years           gdp  rank\n#&gt; 1701               China          CHN  2024  3.819008e+13   1.0\n#&gt; 1702       United States          USA  2024  2.918489e+13   2.0\n#&gt; 1703               India          IND  2024  1.619082e+13   3.0\n#&gt; 1704  Russian Federation          RUS  2024  6.921249e+12   4.0\n#&gt; 1705               Japan          JPN  2024  6.407672e+12   5.0\n#&gt; ...                  ...          ...   ...           ...   ...\n#&gt; 3     Russian Federation          RUS  2015  3.526236e+12   6.0\n#&gt; 6                 Brazil          BRA  2015  2.989121e+12   7.0\n#&gt; 9         United Kingdom          GBR  2015  2.767978e+12   8.0\n#&gt; 8                 France          FRA  2015  2.722896e+12   9.0\n#&gt; 7              Indonesia          IDN  2015  2.625202e+12  10.0\n#&gt; \n#&gt; [100 rows x 5 columns]\n\n\nprepare data frame for a plot & create a plot for 2024:\n\n\nCode\n# prepare df and format column gdp\ndf_plt = df_rank.copy()\ndf_plt[\"gdp\"] = df_plt[\"gdp\"]/1_000_000_000_000\ndf_plt = df_plt.round({\"gdp\" : 2})\n# select year 2024\ndf = df_plt[df_plt[\"years\"] == \"2024\"].sort_values(by=\"rank\", ascending=False)\n# Create Plot\nplt = df.plot(\n    kind=\"barh\",\n    x=\"Country Name\", y=\"gdp\",\n    title=\"GDP based on PPP in Bil. US Dollar for 2024\" ,\n    xlabel=\"GDP, PPP in Bil. $\",\n    ylabel=\"Top ten countries\",\n    legend=False\n)\nplt\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Best training - doing yourself",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nDashboard with Shiny in Quarto\n\n\n\nquarto\n\ndashboard\n\nR\n\nggplot2\n\nshiny\n\nggpol\n\n\n\nA dashboard about Usbeks living in Germany according to their residence status and in comparison over the years, created in Quarto using Shiny. \n\n\n\n\n\nSeptember, 2025\n\n\nFazliddin Sultonov\n\n\n\n\n\n\n\n\n\n\n\n\nA small dynamic report in Excel with Python\n\n\n\nPython\n\ndashboard\n\npandas\n\n\n\nA smal dynamic report of top ten countries worldwide by GDP based on PPP, created in  with  \n\n\n\n\n\nAugust, 2025\n\n\nFazliddin Sultonov\n\n\n\n\n\n\n\n\n\n\n\n\nCreate Curriculum Vitae with {datadrivencv} in \n in Uzbek\n\n\n\nCV\n\nResume\n\nUzbek\n\nR\n\ndatadrivencv\n\n\n\n\"It is never too late to be what you might have been.\"  ~ George Eliot. \n\n\n\n\n\nJanuary, 2024\n\n\nFazliddin Sultonov\n\n\n\n\n\nNo matching items\n Back to top"
  }
]