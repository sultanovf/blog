{
  "hash": "8c0a4d6a73c74de8d1f7b70c1f87e318",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A small dynamic report in Excel with Python\"\ndescription: |\n  A smal dynamic report of top ten countries worldwide by GDP based on PPP, created in {{< fa solid file-excel >}} with {{< fa brands python >}} <br> \nauthor: \"Fazliddin Sultonov\"\ndate: \"2025-08-02\"\ndate-format: \"MMM D, YYYY\"\n\nfilters:\n  - lightbox\nlightbox: \n  match: auto\n  effect: none\n  desc-position: top\n\npage-layout: full\nreference-location: margin\ncategories: [Python, dashboard, pandas]\n# Code execute options\nexecute: \n  echo: true    # Input anzeigen\n  eval: true    # Code ausführen\n  freeze: true  # never re-render during project render\n# Output\nformat: \n  html:\n    theme: cosmo\n  # codeb block\n    code-fold: true\n    code-line-numbers: true\n    code-block-border-left: true\n    link-external-newwindow: true  # {target=\"_blank\"} in doc\n  # engine\n    engine: knitr\n    css: /customs/style.css\n# engine: knitr\n#jupyter: python3\n\n# Chunk Options\nknitr:\n  opts_chunk:\n    comment: \"#>\" \n\n  opts_knit: \n    warning: false\n    error: false\n    \n---\n\n\n![](pics/pyexc.png)\n\n::: {.cell}\n\n:::\n\n\n---\n\nTabellarische Daten werden in Büros weltweit am meisten in Tabellenkalkulationen bearbeitet und gespeichert. Bekannteste Software dafür ist Microsoft Excel. Ich bin neulich darauf gestoßen, dass man Python in Excel (ab Microsoft 365) verwenden kann. Und ich hab mir vorgenommen, etwas damit zu probieren. Ich habe ein kleiner dynamischer Bericht in Excel mit Python erstellt, in dem es sich um die zehn Länder weltweit mit dem höchsten BIP auf Basis der Kaufkraftparität handelt. \n\n:::{.column-page}\n![](pics/excpy1.gif)\n:::\n\n<br> **{{< fa solid file-excel >}} File:** {{< downloadthis data/top-ten_ex_py.xlsx dname=\"top-ten_ex_py\" label=\"Download the Excel file\" icon=\"database-fill-down\" type=\"primary\" >}} $~~~~~~~~~~~~~$ **{{< fa solid database >}} Data Source:** *[Worldbank](https://data.worldbank.org/)*  \n\n\nUm Python in Excel zu verwenden bzw. zu aktivieren, muss man eine Zelle auswählen, in die man die Formel mit Python schreiben will und klickt man auf der Registerkarte > Formeln > `Python einfügen` ***oder*** schreibt man in die Zelle **`=PY`**. Dann kann man Python - Code direkt in die Zelle schreiben. Im unten aufgeführten einfachen Beispiel  werden die Werte in zwei Zellen (A1 und B1) summiert.\n\n![](pics/excpy1.png)\n\n:::{.callout-tip}\n## Wichtige Sachen zur Berücksichtigung\n\n- Auf die Zellen werden durch **`xl`** verwiesen, beispielweise einen Bezug auf Zellen A1:C10 kann  durch **`xl(\"A1:C10\")`** eingegeben werden\n\n- Mehrere Zelle mit Python-Code werden von oben nach unten ausgeführt geschrieben sind.\n\n- Zu verarbeitende Daten müssen entweder im Excelsheet stehen oder aus Power Query stammen. \n\n- Daten werden durch die Eingabe der Tabellennamen (oder Power Query Namen) gelesen, in der Beispieldatei (kann heruntergeladen werden, sieh oben) ist beispielweise so eingegeben, mit dem Sheetnamen <<data>>, in dem sich  die Daten befinden: **`df = xl(\"data[#Alle]\", headers=True)`**. Durch [#All] werden gesamte Tabelle durch Python-Formel analsiert, bei headers = True werden die Spaltennamen berücksichtigt.\n:::\n\nHier die Daten:\n\n\n::: {.cell .column-screen-inset}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, Markdown, HTML\n# read file\n#\"C:/Users/sultanov/Documents/blog/projects/data/topten.csv\"\npath = \"data/topten.csv\"\ndata = pd.read_csv(path, sep=\";\", decimal=\",\")\ndf_show = data.sort_values(by = \"2024\", ascending=False, na_position=\"last\").head(10)\n#Show the table\nMarkdown(df_show.to_markdown(index = False))\n```\n\n::: {.cell-output-display}\n| Country Name       | Country Code   |        2015 |        2016 |        2017 |        2018 |        2019 |        2020 |        2021 |        2022 |        2023 |        2024 |\n|:-------------------|:---------------|------------:|------------:|------------:|------------:|------------:|------------:|------------:|------------:|------------:|------------:|\n| China              | CHN            | 1.85775e+13 | 1.96473e+13 | 2.09746e+13 | 2.28625e+13 | 2.47776e+13 | 2.57772e+13 | 2.94382e+13 | 3.25255e+13 | 3.55204e+13 | 3.81901e+13 |\n| United States      | USA            | 1.8295e+13  | 1.88049e+13 | 1.96121e+13 | 2.06565e+13 | 2.154e+13   | 2.13541e+13 | 2.36812e+13 | 2.60069e+13 | 2.77207e+13 | 2.91849e+13 |\n| India              | IND            | 7.20458e+12 | 7.79552e+12 | 8.35471e+12 | 9.23079e+12 | 9.93285e+12 | 9.77102e+12 | 1.13844e+13 | 1.31241e+13 | 1.48459e+13 | 1.61908e+13 |\n| Russian Federation | RUS            | 3.52624e+12 | 3.53898e+12 | 3.8071e+12  | 4.23184e+12 | 4.57955e+12 | 4.65143e+12 | 5.68827e+12 | 6.00631e+12 | 6.47648e+12 | 6.92125e+12 |\n| Japan              | JPN            | 5.20091e+12 | 5.1589e+12  | 5.26225e+12 | 5.34406e+12 | 5.40446e+12 | 5.35671e+12 | 5.57465e+12 | 5.9304e+12  | 6.21296e+12 | 6.40767e+12 |\n| Germany            | DEU            | 3.96657e+12 | 4.24671e+12 | 4.47259e+12 | 4.66536e+12 | 4.92498e+12 | 4.88037e+12 | 5.20231e+12 | 5.66389e+12 | 5.76347e+12 | 6.03785e+12 |\n| Brazil             | BRA            | 2.98912e+12 | 2.90789e+12 | 2.98029e+12 | 3.18719e+12 | 3.33378e+12 | 3.35978e+12 | 3.78777e+12 | 4.18023e+12 | 4.47104e+12 | 4.73465e+12 |\n| Indonesia          | IDN            | 2.6252e+12  | 2.71576e+12 | 2.85731e+12 | 3.06992e+12 | 3.26619e+12 | 3.2234e+12  | 3.53062e+12 | 3.98307e+12 | 4.33474e+12 | 4.66289e+12 |\n| France             | FRA            | 2.7229e+12  | 2.86115e+12 | 2.97579e+12 | 3.11488e+12 | 3.44528e+12 | 3.34502e+12 | 3.56292e+12 | 3.82396e+12 | 3.98238e+12 | 4.20156e+12 |\n| United Kingdom     | GBR            | 2.76798e+12 | 2.8923e+12  | 3.04189e+12 | 3.12965e+12 | 3.33588e+12 | 3.21907e+12 | 3.41648e+12 | 3.95784e+12 | 3.96675e+12 | 4.19651e+12 |\n:::\n:::\n\n\n\nWie oben geschrieben, werden die Zellen mit Python-Coder von oben nach unten ausgeführt. In der Datei, wurden einzelne Schritte in eine Zelle geschrieben. Im Sheet <<python>> sind diese Shritte beschrieben (Spalte A = step). Objectnamen (Spalte B = object) sind die Opbjekte, die durch Python-Codes (Spalte C = result) erstellt wurden. Wie unte auf dem Bild zu sehen ist, wird als erstes *Data Frame erstellt (step) namens <<data>> (object)* und *Python - Code ist in der dementsprechenden Zelle (results)*.\n\n![](pics/excpy2.png)\n\nDanach werden die Daten *pivotiert* und neues Objekt (df_piv) erstellt, um sie weiter zu bearbeiten.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\ndf_pv = pd.melt(data, id_vars = [\"Country Name\", \"Country Code\"], value_vars=data.iloc[:,2:], var_name=\"years\", value_name=\"gdp\")\ndf_pv.head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>          Country Name Country Code years           gdp\n#> 0               China          CHN  2015  1.857751e+13\n#> 1       United States          USA  2015  1.829502e+13\n#> 2               India          IND  2015  7.204581e+12\n#> 3  Russian Federation          RUS  2015  3.526236e+12\n#> 4               Japan          JPN  2015  5.200905e+12\n#> 5             Germany          DEU  2015  3.966575e+12\n#> 6              Brazil          BRA  2015  2.989121e+12\n#> 7           Indonesia          IDN  2015  2.625202e+12\n#> 8              France          FRA  2015  2.722896e+12\n#> 9      United Kingdom          GBR  2015  2.767978e+12\n```\n\n\n:::\n:::\n\n\nJetzt können wir aus Data Frame *Top-Länder nach GDP für jeweiliges Jahr selectieren (object -> df_10 )* und *Rank-Spalte erstellen (object -> df_rank)*.\n\n**Select top ten countries:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Method #1\n# N = 10\n# maske = df_pv.groupby(\"years\")[\"gdp\"].rank(method=\"first\", ascending=False) <= N\n# df_10 = df_pv[maske]\n# Method #2\ndf_10 = df_pv.sort_values([\"years\", \"gdp\"], ascending=False).groupby(\"years\").head(10)\ndf_10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>             Country Name Country Code years           gdp\n#> 1701               China          CHN  2024  3.819008e+13\n#> 1702       United States          USA  2024  2.918489e+13\n#> 1703               India          IND  2024  1.619082e+13\n#> 1704  Russian Federation          RUS  2024  6.921249e+12\n#> 1705               Japan          JPN  2024  6.407672e+12\n#> ...                  ...          ...   ...           ...\n#> 3     Russian Federation          RUS  2015  3.526236e+12\n#> 6                 Brazil          BRA  2015  2.989121e+12\n#> 9         United Kingdom          GBR  2015  2.767978e+12\n#> 8                 France          FRA  2015  2.722896e+12\n#> 7              Indonesia          IDN  2015  2.625202e+12\n#> \n#> [100 rows x 4 columns]\n```\n\n\n:::\n:::\n\n\n**Rank column:**\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_rank = df_10.copy()\ndf_rank[\"rank\"] = df_rank.groupby(\"years\")[\"gdp\"].rank(ascending=False)\ndf_rank\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>             Country Name Country Code years           gdp  rank\n#> 1701               China          CHN  2024  3.819008e+13   1.0\n#> 1702       United States          USA  2024  2.918489e+13   2.0\n#> 1703               India          IND  2024  1.619082e+13   3.0\n#> 1704  Russian Federation          RUS  2024  6.921249e+12   4.0\n#> 1705               Japan          JPN  2024  6.407672e+12   5.0\n#> ...                  ...          ...   ...           ...   ...\n#> 3     Russian Federation          RUS  2015  3.526236e+12   6.0\n#> 6                 Brazil          BRA  2015  2.989121e+12   7.0\n#> 9         United Kingdom          GBR  2015  2.767978e+12   8.0\n#> 8                 France          FRA  2015  2.722896e+12   9.0\n#> 7              Indonesia          IDN  2015  2.625202e+12  10.0\n#> \n#> [100 rows x 5 columns]\n```\n\n\n:::\n:::\n\n\n**prepare data frame for a plot & create a plot for 2024:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# prepare df and format column gdp\ndf_plt = df_rank.copy()\ndf_plt[\"gdp\"] = df_plt[\"gdp\"]/1_000_000_000_000\ndf_plt = df_plt.round({\"gdp\" : 2})\n# select year 2024\ndf = df_plt[df_plt[\"years\"] == \"2024\"].sort_values(by=\"rank\", ascending=False)\n# Create Plot\nplt = df.plot(\n    kind=\"barh\",\n    x=\"Country Name\", y=\"gdp\",\n    title=\"GDP based on PPP in Bil. US Dollar for 2024\" ,\n    xlabel=\"GDP, PPP in Bil. $\",\n    ylabel=\"Top ten countries\",\n    legend=False\n)\nplt\n```\n\n::: {.cell-output-display}\n![](pyinexcel_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n",
    "supporting": [
      "pyinexcel_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}