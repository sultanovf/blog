{
  "hash": "5039929cd9ba5c4e0bce7ea7bd6e1f25",
  "result": {
    "markdown": "---\ntitle: | \n  R & Python: Data Structures\\\n  {{< fa language >}} in German\ndescription: | \n  \\\"Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\\\"      <br> ~ Linus Torvalds.\n\nauthor: \"Fazliddin Sultonov\"\ndate: \"2024-03-01\"\ndate-format: \"MMM D, YYYY\"\n\nfilters:\n    - lightbox\nlightbox: \n  match: auto\n  effect: none\n  desc-position: top\n\npage-layout: full\nreference-location: margin\ncategories: [R, Python, Data Structure, German]\n\n# Code execute options\nexecute: \n  echo: true    # Input anzeigen\n  eval: true    # Code ausführen\n  freeze: true  # never re-render during project render\n\n# Output\nformat: \n  html:\n    theme: cosmo\n    # code\n    # code-line-numbers: true\n    code-fold: true\n    # code-summary: \"show the code\"\n    code-block-border-left: true\n    # Links\n    link-external-icon: false\n    link-external-newwindow: true\n    # Sections\n    toc: true\n    toc-location: left\n    toc-title: \"Table of Contents\"\n    engine: knitr\n    css: style.css\n\n# Chunk Options\nknitr:\n  opts_chunk:\n    comment: \"#>\" \n    #class-output: \"code-output\"\n    #class-source: \"code-input\"\n\n  opts_knit: \n    warning: false\n    error: false\n# bibliography\nbibliography: ref.bib\nnocite: |\n  @*\n---\n\n\n![](pics/datastructure.png){.nolightbox}\n\n\n::: {.cell}\n\n:::\n\n\n\n# Set Up\nDer Codeblock bzw. Input wird in [*R hellcyan*]{style=\"background-color: lightcyan\"} und in [*Python gelb*]{style=\"background-color: yellow\"} dargestellt. Zeilenanfang im Output ist mit `#>` belegt.\n\n::::{layout-ncol=2}\n::: {.code-r}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"Hallo R Lover!\")\n#> Hallo R Lover!\n```\n:::\n\n:::\n\n::: {.code-py}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(\"Hallo Python Lover!\")\n#> Hallo Python Lover!\n```\n:::\n\n:::\n::::\n\nEine Zusatzinfo ist im Boxe wie unten geschrieben kann duerch ausklappen angezeigt werden: [Hinweise oder kleine Infos werden auf der Seite dargestellt]{.aside}\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## Expand for more\n\nMore Info here!\n:::\n\n# Data Structures\nEs gibt einmal die Basic Data Types, die bei der Zuweisung eines Werts oder bei der Erzeugung einer Variable bzw. eines Objekts festlegen, welche **Werte** dieses Objekt/Variable annehmen kann und welche **Operationen** auf diese Objekte anzuwenden sind. Z.B. eine Zahl 42 der Variable namens beispielsweise *var_zahl* zugewiesen und mit dem Typ *Integer* gespeichert werden. Dann kan weitere Berechnugen mit dieser Variable wie Multioplikation, Addition usw. durchgeführt werden. So können Daten als *systematisch kodierte Informationen über die reale Welt definiert [@r_DMforSocial]* werden. [Mehr zu Basic Data Types in [R & Python: Types of Data](/posts/randpy_DataTypes_DE/randpy_DataTypes_de.qmd){target=\"_blank\"}).]{.aside} \nDaten sind für uns dann vom Nutzen, wenn sie in einer Format sind, so dass sie gespeichert, geteilt, analisiert und auf sie irgendwelche Operationen und Fubktionen angewendet werden können. Das bestimmt die ***Data Dstructure***, also *Oraganisation* und *Speicherung* von Daten. Was gemeint ist, möchte ich durch ein Beispiel in Anlehnung an [@r_DMforSocial] zeigen.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nraw_data <- \n  \"Deutschland ist ein Land mit 83,3 Mln. Einwohnern und sein Hauptstadt\n  ist Berlin; Russland hat 144,1 Mln. Einwohner, Hauptstadt ist Moskau;\n  Weiteres Land ist Usbekistan mit 35,5 Mln. Einwohnern, sein Hauptstadt\n  ist Taschkent. Letztes Land sind USA mit 341,2 Mln. Einwohnern, die\n  Hauptstadt ist Washington, D.C.\"\n```\n:::\n\n\n[Im Beispiel sind Populationen in Deutschland, Usbekistan. Russland und den USA in 2023 von [@worldpop].]{.aside}\n\nMan kann das Object *raw_data* im Grunde als eine Datenbank sehen, welche die Informationen über vier Länder, ihre Hauptstädte und ihre Bevölkerungszahl enthält. Für Menschen ist einfach, aus diesem Text die Informationen zu extrahieren, wie z.B. welches Land hat größere Population, welche Population ist die größte oder kleinste usw. Aber für Komputer ist nicht verständlich, sie rechnerisch zu verarbeiten, weil die Daten keine Struktur haben. Wir könnten aber diese Daten mit dem gleichen Inhalt anders speichern, also mit einer bestimmten Struktur z. B. als *datafarame*. Somit sind Daten dem Komputer verständlich, so dass er rechnerisch verarbeiten kann.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\ndf_r <- data.frame(\n  country = c(\"Germany\", \"Uzbekistan\", \"Russia\", \"USA\"),\n  population = c(83.3, 35.5, 144.1, 341.2),\n  capital = c(\"Berlin\", \"Tashkent\", \"Moscow\", \"Washington\")\n)\ndf_r\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>      country population    capital\n#> 1    Germany       83.3     Berlin\n#> 2 Uzbekistan       35.5   Tashkent\n#> 3     Russia      144.1     Moscow\n#> 4        USA      341.2 Washington\n```\n:::\n:::\n\n\nUm die Daten zu speichern, wurde im zweiten Beispiel `data.frame` von R verwendet, eine Data Structure von R für Tabellen, wie es in Python dafür `pandas` gibt. Jedes Land hat verschieden Typen von Informationen (county ist character also string, population ist double also float). Im Verglich zu den im ersten Beispiel als normaler Text (raw_data) gespeicherten Daten sind als dataframe bzw Tabelle gespeicherte (df_r) Daten leichter zu verstehen und zu verarbeiten.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\n# Sum of population\nglue(\"Sum of population: {sum(df_r$population)}\")\n# Max of Population\nglue(\"Max of Population: {max(df_r$population)}\")\ncat(\"\\n\")\n# Summary of Data\nglue(\"Summary of data:\")\nsummary(df_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Sum of population: 604.1\n#> Max of Population: 341.2\n#> \n#> Summary of data:\n#>    country            population       capital         \n#>  Length:4           Min.   : 35.50   Length:4          \n#>  Class :character   1st Qu.: 71.35   Class :character  \n#>  Mode  :character   Median :113.70   Mode  :character  \n#>                     Mean   :151.03                     \n#>                     3rd Qu.:193.38                     \n#>                     Max.   :341.20\n```\n:::\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nimport pandas as pd\ndf_py = pd.DataFrame(r.df_r)\n# Sum of population\nprint(f\"Sum of population: {df_py[\"population\"].sum()}\")\n# Sum of population\nprint(f\"Sum of population: {df_py[\"population\"].max()}\\n\")\n# Summary of Data\nprint(\"Summary of data:\")\ndf_py.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Sum of population: 604.0999999999999\n#> Sum of population: 341.2\n#> \n#> Summary of data:\n#>        population\n#> count    4.000000\n#> mean   151.025000\n#> std    134.346799\n#> min     35.500000\n#> 25%     71.350000\n#> 50%    113.700000\n#> 75%    193.375000\n#> max    341.200000\n```\n:::\n:::\n\n:::\n::::\n\n# How is the data are structured in R and Python\n\nEgal, ob wir die Daten in R oder in Python bearbeiten, in beiden Sprachen werden sie als ***Object*** gespeichert. Objekte können erstellt werden, indem man z.B einer Variable (Name des Objekts) den Wert (Objekt) zuweist. Sagen wir, wir erzeugen ein Objekt namens *age* und weiesen ihm den Wert *35* (Alter): `age <- 35` (in R) und `age = 35` (in Python). Aber meistens will man nicht manulell Tausende von Objekten (age1, age2, age3, ...) erstellen, sondern eine Liste namens *ages* haben, die alle Alter (Objekte) enthält. Daraus wird eine *gruppierte Datenstruktur*, aslo ein Object, das aus mehreren Einzelobjecten zusammengesetzt sind. Davon gibt es unterschiedliche, wie ***Lists***, ***Vectors***, ***Arrays***, ***Series***, ***Dictionaries*** etc. Sie unterscheiden sich durch ihre Format, Struktur, Methoden usw., aber Kernpunkt ist gleich: Es werden mehrere Objekte in ein gruppiertes bzw kombiniertes Objekt (in einer von diese Datenstruktur) gespeichert. \n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nages_r <- c(35, 24, 42, 24, 52, 35, 37)\nnames_r <- c(\"Ali\", \"Temur\", \"Ben\", \"Brandon\", \"John\", \"Doe\", \"Dirk\")\nages_r\nclass(ages_r)   # Type of ages_r\nnames_r\nclass(names_r)  # Type of names_r\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 35 24 42 24 52 35 37\n#> [1] \"numeric\"\n#> [1] \"Ali\"     \"Temur\"   \"Ben\"     \"Brandon\" \"John\"    \"Doe\"     \"Dirk\"   \n#> [1] \"character\"\n```\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## More about `c()` in R\n\nIn R werden Sequenzen oder Reihen mit `c()` *(c wie combine)* erzeugt, das ist wie man in Python die Objekte bzw. Daten in Form `[]` eingibt.\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nages_py = [35, 24, 42, 24, 52, 35, 37]\nnames_py = [\"Ali\", \"Temur\", \"Ben\", \"Brandon\", \"John\", \"Doe\", \"Dirk\"]\nprint(ages_py)\ntype(ages_py)    # Type of ages_py\nprint(names_py)\ntype(names_py)   # Type of names_py\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [35, 24, 42, 24, 52, 35, 37]\n#> <class 'list'>\n#> ['Ali', 'Temur', 'Ben', 'Brandon', 'John', 'Doe', 'Dirk']\n#> <class 'list'>\n```\n:::\n:::\n\n:::\n::::\n\nSie sind in Python und R ähnlich, nur Obekt in R heiß **Vektor** und in Python heiß **Liste**. Es gibt auch andere Datenstrukturen in Python und R, die nach Eigenschaften identisch sind oder sich unterscheiden. Beim Vergleich die Datenstrukturen in R und Python, denke ich, [ist es aber wichtig, dass die Objekte *homogen* oder *heterogen*]{style=\"color:red;\"} sind. [**homogen** -- Objekte sind vom gleichen Typ (Alle Obkete sind nur Zahlen oder Texte), z.B Vektoren in R oder NumPy-Arrays oder Liste *mit gleichen Datentypen* in Python\\n\n**heterogen** -- Objekte können unterschiedlich sein wie Liste in R oder Liste oder Dictionaries in Python]{.aside}\n\n## Data Structute in Python\n\n::: {layout=\"[ 60, 40 ]\"}\nIn Python gibt es unterschiedliche Datenstrukturen. Wichtige Built-in Data Structure sind (wie auf dem Bild von [@py_Python3] gelb markiert): \n  <br> - `lists`\n  <br> - `ditionaries`\n  <br> - `tuples`\n  <br> - `sets`\n<br>Darüber hinaus gibt Arrays und Dataframes(Tabellen):\\n\n  <br> - `arrays` von NumPy (Numerical Python)\n  <br> - `DataFrame` von Pandas\n  \n\n![Data Strukture in Python](pics/ds_py.png){fig-alt=\"Click for zooming\"}\n:::\n\n## Data Structure in R\n\nWichtige Datenstrukturen in R könen dadurch, wie viele **Dimensionen** ein Objekt hat - ein demensional (Vektor), zwei demensional (Matrix) und mehr (Arrays) und dadurch, ob die Elemente eines Objekts **homogen** - alle Elemente von gleicher Art z.B. nur Text, Zahlen sind, oder ob die Elemente **heterogen** - alle Elemente unterschiedlich sind, gekenzeichnet werden. Anhand dieser Merkmalen kann man die zentralen Objektarten wie folgt zusammenfassen [@r_ModernDA]:\n\n| Dimension | Homogen | Heterogen |\n|:---|:---|:---|\n| 1d | Vector | List |\n| 2d | Matrix | Dataframe |\n| nd | Array |  |\n\nVektoren sind eine der wichtigsten Datensrtukturen in R und stellen ein zentrales Elemnt in R-Objekten dar. Es gibt vier Arten von Atomar- bzw. Reinvektoren: `Logical`, `Integer`, `Double` und `Character` (welche stings entält), wobei *Integer* und *Double* sich zum Datentyp `Numeric` zusammenfassen lassen. Hier eine Übersicht von atomaren Vektoren nach [@r_AdvancedR].\n\n![Atomar Vectors](pics/ds_r.png){fig-alt=\"Click for zooming\"}\n\n# Homogeneous data structure\nWie oben schon erwähnt, homogene Datenstrukturen enthalten die Daten (Objekte oder Elemente) desselben Typs. Meistents werden die Daten auf dieser Art gespeichert. Dazu gehören in R Vektoren (1d-NumPy-Arrays in Python), Matizien (2d-NumPy-Arrays in Python) und Arrays (nd-NumPy-Arrays in Python).\n\n\n## `vector` in R and `arrays` & `Series` in Python\nVektoren in R sind eindimensional und homogen. Mit dieser Eigenschaft haben sie Gemeinsamkeit mit 1d-NumPy-Arrays und Pandas Series in Python. Vektoren in R sind auch ähnlich wie die Liste in Python, aber *nur dann, wenn die Daten in der Liste von Python den gleichen Typ haben*.\n\n<!-- [Achrung!]{style=\"color:red;\"} --  -->\n\n### Creating\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n-- with `c()` (like `[]` in Python)\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nv1 <- c(1, 7, 2, 4, 5, 8, 2, 9); v1\nclass(v1)\nv2 <- c(\"a\", \"b\", \"c\", \"z\", \"f\"); v2\nclass(v2)\nv3 <- vector(\"logical\", 5); v3\nclass(v3)\nv4 <- numeric(7); v4\nclass(v4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 1 7 2 4 5 8 2 9\n#> [1] \"numeric\"\n#> [1] \"a\" \"b\" \"c\" \"z\" \"f\"\n#> [1] \"character\"\n#> [1] FALSE FALSE FALSE FALSE FALSE\n#> [1] \"logical\"\n#> [1] 0 0 0 0 0 0 0\n#> [1] \"numeric\"\n```\n:::\n:::\n\n:::\n\n-- with `seq(from, to, by)` (like `range(from, to, by)` in Python or `arange()` from NumPy)\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nseq1 <- 2:9; seq1                            # from 2 to 9\nseq2 <- (1:5); seq2                          # from 1 to 5\nseq3 <- seq(from = 3, to = 10, by = 3); seq3 # step = 3\nseq4 <- seq(3, 10, length.out = 5); seq4     # count = 5\nseq5 <- seq(11, 17, along.with = seq4); seq5 # seq of same length with seq4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 2 3 4 5 6 7 8 9\n#> [1] 1 2 3 4 5\n#> [1] 3 6 9\n#> [1]  3.00  4.75  6.50  8.25 10.00\n#> [1] 11.0 12.5 14.0 15.5 17.0\n```\n:::\n:::\n\n:::\n\n-- with `rep()` (like `np.repeat()` from NumPy or `pd.rep()` from Pandas)\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nrep1 <- rep(1:3, times = 3); rep1 # repeating seq 3 times\nrep2 <- rep(1:3, each = 3); rep2  # repeating each obj 3 times\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 1 2 3 1 2 3 1 2 3\n#> [1] 1 1 1 2 2 2 3 3 3\n```\n:::\n:::\n\n:::\n\n\n-- with `sample()` or `runif()` (like `random.choice()` from NumPy) \n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nsmp1 <- sample(seq(10), size = 5, replace = FALSE); smp1\nvec <- c(\"negative\",\"neutral\", \"positive\")\nsmp2 <- sample(vec, size = 5, replace = TRUE); smp2\n# vector with 5 elements:\nrun1 <- runif(5); run1\nrun2 <- runif(3, min = 1, max = 10); run2\nrun3 <- floor(runif(15, min=1, max=100)); run3\n# normal distribution\nrn <- rnorm(5); rn\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  4  5  8  7 10\n#> [1] \"negative\" \"negative\" \"positive\" \"neutral\"  \"neutral\" \n#> [1] 0.89926627 0.99959612 0.53360903 0.79433896 0.04248346\n#> [1] 9.477082 5.262892 4.572906\n#>  [1] 36 32 33 48 72 12 68 59 98 93 69  7 12 24 98\n#> [1] -1.38003051  1.25526611  0.19008427  0.05586525 -1.48328575\n```\n:::\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n-- with `[]` like `c()` in R\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nimport numpy as np\n\nv1_p = [1, 7, 2, 4, 5, 8, 2, 9]; print(v1_p)\ntype(v1_p)\nv2_p = np.full((5), False); print(v2_p)\ntype(v2_p)\nv3_p = np.zeros((7), int); print(v3_p)\ntype(v3_p)\nv4_p = np.ones((7), int); print(v4_p) # rep(1,7) in R\ntype(v4_p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1, 7, 2, 4, 5, 8, 2, 9]\n#> <class 'list'>\n#> [False False False False False]\n#> <class 'numpy.ndarray'>\n#> [0 0 0 0 0 0 0]\n#> <class 'numpy.ndarray'>\n#> [1 1 1 1 1 1 1]\n#> <class 'numpy.ndarray'>\n```\n:::\n:::\n\n:::\n\n-- with `arange()` like `seq()` in R\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nar1 = [x for x in range(5)]; ar1                # pythonlist\nar2 = [x for x in range(2,10)]; ar2             # python list\nar3 = np.arange(2,10); ar3                      # NumPy 1d array\nar4 = np.arange(3, 10, 3); ar4                  # step = 3 \nar5 = np.linspace(3, 10, 5, retstep = True);ar5 # count = 5, with step = 1.75    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [0, 1, 2, 3, 4]\n#> [2, 3, 4, 5, 6, 7, 8, 9]\n#> array([2, 3, 4, 5, 6, 7, 8, 9])\n#> array([3, 6, 9])\n#> (array([ 3.  ,  4.75,  6.5 ,  8.25, 10.  ]), 1.75)\n```\n:::\n:::\n\n:::\n\n-- with `np.repeat()` or `pd.Series.repeat()` like `rep()` in R\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nimport pandas as pd\n\nrep1 =  list(range(1,4))*3; rep1             # Python\nrep2 = np.tile(np.arange(1,4), 3); rep2      # NumPy: repeating seq 3 times\nrep3 = np.repeat(np.arange(1,4), 3); rep3    # NumPy: repeating each obj 3 times\nrep4 = pd.Series(range(1,4)).repeat(2); rep4 # Pandas Series: repeating each obj 2 times\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1, 2, 3, 1, 2, 3, 1, 2, 3]\n#> array([1, 2, 3, 1, 2, 3, 1, 2, 3])\n#> array([1, 1, 1, 2, 2, 2, 3, 3, 3])\n#> 0    1\n#> 0    1\n#> 1    2\n#> 1    2\n#> 2    3\n#> 2    3\n#> dtype: int64\n```\n:::\n:::\n\n:::\n\n-- with `random()`  like `sample()` or `runif()` in R\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nfrom numpy import random\nlis = [\"negative\",\"neutral\", \"positive\"]\nrd1 = random.choice(lis, size=5, replace = True); print(rd1)\nrd2 = random.rand(5); rd2                 # 5 random numbers\nrd3 = random.randint(100, size=(5)); rd3  # integer random numbers from 0 to 100\nrd4 = random.randn(4); rd4                # standard normal distribution\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> ['positive' 'positive' 'neutral' 'negative' 'positive']\n#> array([0.65295424, 0.81569356, 0.62140344, 0.71611251, 0.25890536])\n#> array([89, 22, 34, 14, 55])\n#> array([ 0.71922823,  0.46999791, -0.48382565,  0.01277515])\n```\n:::\n:::\n\n:::\n::::\n\n### Slicing\n\nEine der wichtigsten nützlichsten Operationen, die man auf Vektoren, Listen und eindimensionale Arrays anwenden kann, ist *Indexierung*. Dabei kann man einzelnes Element oder Teilmenge von Elementen durch ihre Position *(Index)* auswählen.\n\n::: {layout-ncol=2}\n[Index vom ersten Elemen ist in R -- `1` und in Python beginnt mit `0`.]{style=\"background-color:yellow;\"} Die Länge eines Vektors, einer Liste oder eines 1d-Arrays kann in R mit der Funktion `length(Obj)` und in Python mit `len(Obj)` ermittelt werden.\n\n![Indexes in R and Python](pics/index.png){fig-alt=\"Click for zooming\"}\n:::\n\n::: {layout-ncol=2}\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# In Python\nlst = [1,3,5,7]\nlst[0]     # first element\nlst[1]     # second element\nlst[-1]    # last element\nlst[::-1]  # backward\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 1\n#> 3\n#> 7\n#> [7, 5, 3, 1]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# In R\n# Used Variable lst created in Python Chunk\npy$lst[1]                # first element\npy$lst[2]                # second element\npy$lst[[length(py$lst)]] # last element\nrev(py$lst)              # backward\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 1\n#> [1] 3\n#> [1] 7\n#> [1] 7 5 3 1\n```\n:::\n:::\n\n:::\n\nHier noch weitere Beispiele für Teilmengen und logisches Indexieren. Bei der logischen Indexierung werden die Elemente zurückgegeben, deren logischer Wert gleich `TRUE` ist.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nage <- c(18, 26, 32, 41, 55, 22, 35, 37, 20, 25)\nage[1:5]             # from first until fifth element\nage[3:7]             # from third until seventh element\nage[5:length(age)]   # from fifth until last element\nage[c(2,5,7)]        # second, fifth and seventh element\nage < 30             # logic \nage[age < 30]        # age under 30\nage[which(age < 30)] # with which()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 18 26 32 41 55\n#> [1] 32 41 55 22 35\n#> [1] 55 22 35 37 20 25\n#> [1] 26 55 35\n#>  [1]  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE\n#> [1] 18 26 22 20 25\n#> [1] 18 26 22 20 25\n```\n:::\n:::\n\n:::\n\nElemente können auch beim Namen angesprochen werden, aber nur dann, wenn sie beannat sind. Das könnte mann auch in Series von Pandas machen, in dem man Element durch den Indexnamen auswählt:\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nnote <- c(\"best\" = 5, \"medium\" = 4, \"good\"= 3, \"bad\" = 2); note\nnote[\"medium\"]         # by indexname\nnote[c(\"good\", \"bad\")] # by indexname multiple elements\nnote[3]                # by index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   best medium   good    bad \n#>      5      4      3      2 \n#> medium \n#>      4 \n#> good  bad \n#>    3    2 \n#> good \n#>    3\n```\n:::\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nage = np.array(r.age)    # create array from r vector age\nage[:5]                  # from first until fifth element\nage[2:7]                 # from third until seventh element\nage[4:]                  # from fifth until last element\n[age[2], age[5], age[7]] # second, fifth and seventh elem\nage < 30                 # logic \nage[age < 30]            # age under 30\nage[np.where(age<30)]    # with np.where()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> array([18., 26., 32., 41., 55.])\n#> array([32., 41., 55., 22., 35.])\n#> array([55., 22., 35., 37., 20., 25.])\n#> [32.0, 22.0, 37.0]\n#> array([ True,  True, False, False, False,  True, False, False,  True,\n#>         True])\n#> array([18., 26., 22., 20., 25.])\n#> array([18., 26., 22., 20., 25.])\n```\n:::\n:::\n\n:::\n\nAuch bei Series kann man Element oder Elemente durch ihre Indexen oder Indexnamen ansprechen, das geht wie bei *named vectors* in R\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nnote = pd.Series(range(2,6), index = [\"bad\", \"good\", \"medium\", \"best\"]); note\nnote[\"good\"]  # by indexname\nnote[[\"best\", \"bad\"]] # by indexname multiple elements\nnote.iloc[2]          # by index\nnote.iloc[[1,2,3]]    # by index multiple elements\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> bad       2\n#> good      3\n#> medium    4\n#> best      5\n#> dtype: int64\n#> 3\n#> best    5\n#> bad     2\n#> dtype: int64\n#> 4\n#> good      3\n#> medium    4\n#> best      5\n#> dtype: int64\n```\n:::\n:::\n\n:::\n::::\n\n## `matrix` in R and `2d-Array` in Python\n\nMatrizen in R sind zweidimensionale Vektoren, deren Elemente numerisch sind, also *homogen*. Sie werden durch die Funktion `matrix(data, nrow, ncol)` erstellt. In Python gibt es keine Funktion explizit für die Erstellung von Matrizen. Matrizen in Python sind im Prinzip *2d-NumPy-Arrays*. Für die Slicing kommen hier auch gleiche Methoden wie bei Vektoren oder 1d-NumPy-Arrys *(vorheriges Kapitel)* zur Anwenung, eben werden neben Rowindex auch Columnindex in rechteckigen Klammern `[]` eingegeben.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nmatrix_c <- matrix(seq(12), nrow = 3, ncol = 4, byrow = FALSE )\ncat(\"3x4-Matix filling by columns (matrix_c):\\n\");print(matrix_c)\n# Dimension of matrix_c\nglue(\"Dimension of matrix_c: {dim(matrix_c)}\")\n# Counts of rows & Cols from matrix_c\nglue(\"Shape of matrix_c: ({nrow(matrix_c)}, {ncol(matrix_c)})\")\nmatrix_r <- matrix(seq(12), nrow = 4, ncol = 3, byrow = TRUE )\ncat(\"\\n4x3-Matix filling by rows (matrix_r):\\n\");print(matrix_r)\n# Dimension of matrix_r\nglue(\"Dimension of matrix_r: {dim(matrix_r)}\")\n# Counts of rows & Cols from matrix_r\nglue(\"Shape of matrix_r: ({nrow(matrix_r)}, {ncol(matrix_r)})\")\n#\ncat(\"\\nSlicing:\\n\")\nmatrix_c[2,3]        # row 2, col 3\nmatrix_c[,4]         # column 4\nmatrix_c[, c(2, 4)]  # columns 2 and 4\nmatrix_r[2,]         # row 2\n# Name cols & rows\ncat('\\nname the columns and rows of matrix \"matrix_r\":\\n')\ncolnames(matrix_r) <- c(\"col1\", \"col2\", \"col3\")\nrownames(matrix_r) <- c(\"row1\", \"row2\", \"row3\", \"row4\")\nmatrix_r\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 3x4-Matix filling by columns (matrix_c):\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    4    7   10\n#> [2,]    2    5    8   11\n#> [3,]    3    6    9   12\n#> Dimension of matrix_c: 3\n#> Dimension of matrix_c: 4\n#> Shape of matrix_c: (3, 4)\n#> \n#> 4x3-Matix filling by rows (matrix_r):\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n#> Dimension of matrix_r: 4\n#> Dimension of matrix_r: 3\n#> Shape of matrix_r: (4, 3)\n#> \n#> Slicing:\n#> [1] 8\n#> [1] 10 11 12\n#>      [,1] [,2]\n#> [1,]    4   10\n#> [2,]    5   11\n#> [3,]    6   12\n#> [1] 4 5 6\n#> \n#> name the columns and rows of matrix \"matrix_r\":\n#>      col1 col2 col3\n#> row1    1    2    3\n#> row2    4    5    6\n#> row3    7    8    9\n#> row4   10   11   12\n```\n:::\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nmatriks_c = np.arange(1,13).reshape(3,4, order = \"F\")\nprint(f\"3x4-Matix filling by columns (matriks_c):\\n{matriks_c}\")\n# Dimension of matrix matriks_c\nprint(f\"Dimension of matrix matriks_c: {matriks_c.ndim}\")\n# Counts of rows & Cols from matriks_c\nprint(f\"Shape of matriks_c: {matriks_c.shape}\")\n# np.shape(matriks_c)[0]; np.shape(matriks_c)[1]\nmatriks_r = np.arange(1,13).reshape(4,3, order = \"C\")\nprint(f\"\\n4x3-Matix filling by rows (matriks_r):\\n{matriks_r}\")\n# Dimension of matrix matriks_r\nprint(f\"Dimension of matrix matriks_r: {matriks_r.ndim}\")\n# Counts of rows & Cols from matriks_r\nprint(f\"Shape of matriks_r: {matriks_r.shape}\")\n# np.shape(matriks_r)[0]; np.shape(matriks_r)[1]\n#\nprint(\"\\nSlicing:\")\nmatriks_c[1,2]      # row 2, col 3\nmatriks_c[:, 3]     # column 4\nmatriks_c[:, [1,3]] # columns 2 and 4\nmatriks_r[1, :]     # row 2\n# Name cols & rows\nprint('\\nname the columns and rows of matrix \"matriks_r\":')\ncolnames = [\"col1\", \"col2\", \"col3\"]\nrownames = [\"row1\", \"row2\", \"row3\", \"row4\"]\npd.DataFrame(matriks_r, columns = colnames, index = rownames)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 3x4-Matix filling by columns (matriks_c):\n#> [[ 1  4  7 10]\n#>  [ 2  5  8 11]\n#>  [ 3  6  9 12]]\n#> Dimension of matrix matriks_c: 2\n#> Shape of matriks_c: (3, 4)\n#> \n#> 4x3-Matix filling by rows (matriks_r):\n#> [[ 1  2  3]\n#>  [ 4  5  6]\n#>  [ 7  8  9]\n#>  [10 11 12]]\n#> Dimension of matrix matriks_r: 2\n#> Shape of matriks_r: (4, 3)\n#> \n#> Slicing:\n#> 8\n#> array([10, 11, 12])\n#> array([[ 4, 10],\n#>        [ 5, 11],\n#>        [ 6, 12]])\n#> array([4, 5, 6])\n#> \n#> name the columns and rows of matrix \"matriks_r\":\n#>       col1  col2  col3\n#> row1     1     2     3\n#> row2     4     5     6\n#> row3     7     8     9\n#> row4    10    11    12\n```\n:::\n:::\n\n:::\n::::\n\n## Mehrdiminsionale Arrays\n\n(Mehrdimensionale)Arrays in R werden mit der Funktion `array(vector, dim = c(nrow, ncol, nmat))` erstellt. Dabei ist *vector* Datenrahe vom gleichen Typ, *nrow* und *ncol* sind Zeilen- und Spaltennummer, *nmat* gibt die Dimension an, also die Zahl von `nrow*ncol` Matrizen im Array.\n\nFür die Erstellung  von Arrays in Python gibt es mehrere Funktionen wie `numpy.arange()`, `numpy.zeros()`, `numpy.ones()`. Im Folgenden wird ein 3d-Array in R und Python sowie Slicing und Summenberechnung dargestellt.\n\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\nIm Folgenden wird ein Beispiel für 3d-Array visuell und Slicing und Summenberechnung bei diesem Array praktisch dargestellt. \n\n![3d Array with twice 3x4 2d-Arrays](pics/arr_r.png){fig-alt=\"Click for zooming\"}\n\n**Slicing** <br>\nWie bei Vektoren, oder 1d- oder 2d-Arrays kann auch bei 3d-Arrays ein Element oder eine Teilmenge aus dem Array abgeschnitten werden. Dabei werden Index von dem Element oder Indizies von der Teilmenge in bekannten rechteckigen Klammern `[]` eingegeben. Im Beispiel hat der Array shape = (3, 4, 2). Das gibt die Funktion in R `dim(array)` und in Python `array.shape` zurück. im Beispiel gibt 3 - Zeilen, 4 - Spalten und 2 - Dimension an. D.h., der Array hat 2 Matrizen jeweils mit 3 Zeilen und 4 Spalten. Beim Indexieren muss man dementsprechen in richtige Position eingeben. Z.B. `arr_r[, , 2]` gibt den zweiten Matrix mit allen Zeilen und Spalten zurück.\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\n# Create 3d-array\narr_r <- array(c(0:23), dim = c(4,3,2))\narr_r <- aperm(arr_r, perm = c(2,1,3)); arr_r\ncat(\"Shape: \",dim(arr_r), \"\\n\")\ncat(\"\\n1st matrix/2d-Array of the 3d-Array (arr_r):\\n\")\narr_r[, , 1]\ncat(\"\\nElement in 2nd row and 1st col of the 2nd matrix from 3d-Array (arr_r):\\n\")\narr_r[2, 1, 2]\ncat(\"\\n3rd column elements of the 2nd matrix from 3d-Array (arr_r):\\n\")\narr_r[, c(3), 2]\ncat(\"\\n2nd row elements of the 1st matrix from 3d-Array (arr_r):\\n\")\narr_r[c(2), , 1]\ncat(\"\\nCheck if elemnt (9) exist in the array:\\n\")\n9 %in% arr_r\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> , , 1\n#> \n#>      [,1] [,2] [,3] [,4]\n#> [1,]    0    1    2    3\n#> [2,]    4    5    6    7\n#> [3,]    8    9   10   11\n#> \n#> , , 2\n#> \n#>      [,1] [,2] [,3] [,4]\n#> [1,]   12   13   14   15\n#> [2,]   16   17   18   19\n#> [3,]   20   21   22   23\n#> \n#> Shape:  3 4 2 \n#> \n#> 1st matrix/2d-Array of the 3d-Array (arr_r):\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    0    1    2    3\n#> [2,]    4    5    6    7\n#> [3,]    8    9   10   11\n#> \n#> Element in 2nd row and 1st col of the 2nd matrix from 3d-Array (arr_r):\n#> [1] 16\n#> \n#> 3rd column elements of the 2nd matrix from 3d-Array (arr_r):\n#> [1] 14 18 22\n#> \n#> 2nd row elements of the 1st matrix from 3d-Array (arr_r):\n#> [1] 4 5 6 7\n#> \n#> Check if elemnt (9) exist in the array:\n#> [1] TRUE\n```\n:::\n:::\n\n:::\n\n**Operationen** <br>\nUm die Summe bei Arrays in R zu berechnen, kann man die Funktion `rowSums()`- Summe von Zeilen, `colSums()`- Summe von Spalten benutzen, es gibt auch in R die Funktion `sum()` wie in Python, diese kann man hier mit der Funktion `apply` benutzen.\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\narr_r\ncat(\"Sum by row-wise with rowSums:\\n\")\nrowSums(arr_r)\ncat(\"\\nSum by row-wise with apply, same like rowSums:\\n\")\napply(arr_r, c(1), sum)\ncat(\"\\nSum by column-wise with colSums:\\n\")\ncolSums(arr_r)\ncat(\"\\nSum by column-wise with apply\\n\")\napply(arr_r, c(2), sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> , , 1\n#> \n#>      [,1] [,2] [,3] [,4]\n#> [1,]    0    1    2    3\n#> [2,]    4    5    6    7\n#> [3,]    8    9   10   11\n#> \n#> , , 2\n#> \n#>      [,1] [,2] [,3] [,4]\n#> [1,]   12   13   14   15\n#> [2,]   16   17   18   19\n#> [3,]   20   21   22   23\n#> \n#> Sum by row-wise with rowSums:\n#> [1]  60  92 124\n#> \n#> Sum by row-wise with apply, same like rowSums:\n#> [1]  60  92 124\n#> \n#> Sum by column-wise with colSums:\n#>      [,1] [,2]\n#> [1,]   12   48\n#> [2,]   15   51\n#> [3,]   18   54\n#> [4,]   21   57\n#> \n#> Sum by column-wise with apply\n#> [1] 60 66 72 78\n```\n:::\n:::\n\n:::\n\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\nIm Folgenden wird ein Beispiel für 3d-Array visuell und Slicing und Summenberechnung bei diesem Array praktisch dargestellt. \n\n![3d Array with twice 3x4 2d-Arrays](pics/arr3d.png){fig-alt=\"Click for zooming\"}\n\n**Slicing** <br>\nDie Funktion `array.shape` geibt shape = (2, 3, 4) von dem Array im Beispiel oben im Bild zurück. D.h., als erstes die Dimension - 2, als zweites Zeilen - 3 und als viertes Spalten - 4 zurückgegeben. D.h., der Array hat 2 Matrizen jeweils mit 3 Zeilen und 4 Spalten. Man möge sich einen Zauberwürfel vorstellen. Wenn man diesen in der Mitte in Scheiben schneidet und in zwei teilt, wäre jeder Teil ein Matrix oder 2d-Array. Man könnte auch diese Teile als Schicht (layer/sheet) vorstellen. Beim Indexieren muss man dementsprechen in richtige Position eingeben. Z.B. `arr_r[2, :, :]` gibt den zweiten Matrix mit allen Zeilen und Spalten zurück.\n\n::: {.callout-warning collapse=\"true\"}\n## Shape is displayed differently in R and Python\n\nIn R wird die Reihenfolge in Shape anders dargestellt als in Python für gleichen Array, shape in R = (3, 4, 2), shape in Python = (2, 3, 4). In R werden erst Zeilen, dann Spalten und als letztes Dimension) dargestellt. In Python kommt erst Dimension, dann Zeilen und Spalten.\n:::\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\n# create 3d-Array\narr3d = np.arange(24).reshape(2,3,4);arr3d\nprint(f\"\\nShape: {arr3d.shape}\")\nprint(f\"\\n1st 2d-Array (sheet,matrix, layer) of the 3d-Array (arr3d):\")\narr3d[0, :, :] # or arrd[0]\nprint(f\"\\n3rd column elements of the 2nd sheet from 3d-Array (arr3d):\")\narr3d[1, :, 2]\nprint(f\"\\n2nd row elements of the 1st sheet from 3d-Array (arr3d):\")\narr3d[0, 1, :]\nprint(f\"\\nElement (20) in 3rd row and 1st col of the 2nd sheet from 3d-Array (arr3d):\")\narr3d[1, 2, 0]\nprint(f\"\\nElements (22, 23) from 3rd row and columns 3 and 4 in the 2nd sheet:\")\narr3d[0, 2, 2:]\nprint(f\"\\nElement (9) in 3rd row and 2nd col of the 1st sheet from 3d-Array (arr3d):\")\narr3d[0, 2, 1]\nprint(f\"\\nElement (11) in 3rd row and last col of the 1st sheet from 3d-Array (arr3d):\")\narr3d[0, 2, 3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> array([[[ 0,  1,  2,  3],\n#>         [ 4,  5,  6,  7],\n#>         [ 8,  9, 10, 11]],\n#> \n#>        [[12, 13, 14, 15],\n#>         [16, 17, 18, 19],\n#>         [20, 21, 22, 23]]])\n#> \n#> Shape: (2, 3, 4)\n#> \n#> 1st 2d-Array (sheet,matrix, layer) of the 3d-Array (arr3d):\n#> array([[ 0,  1,  2,  3],\n#>        [ 4,  5,  6,  7],\n#>        [ 8,  9, 10, 11]])\n#> \n#> 3rd column elements of the 2nd sheet from 3d-Array (arr3d):\n#> array([14, 18, 22])\n#> \n#> 2nd row elements of the 1st sheet from 3d-Array (arr3d):\n#> array([4, 5, 6, 7])\n#> \n#> Element (20) in 3rd row and 1st col of the 2nd sheet from 3d-Array (arr3d):\n#> 20\n#> \n#> Elements (22, 23) from 3rd row and columns 3 and 4 in the 2nd sheet:\n#> array([10, 11])\n#> \n#> Element (9) in 3rd row and 2nd col of the 1st sheet from 3d-Array (arr3d):\n#> 9\n#> \n#> Element (11) in 3rd row and last col of the 1st sheet from 3d-Array (arr3d):\n#> 11\n```\n:::\n:::\n\n:::\n\n**Operationen** <br>\nUm die Summe bei Arrays in Paython zu berechnen, muss `axis` eingegeben werden, je nachdem, auf welche Weise man die Summe berechnen will. Gibt man 0 ein, wird die Summe über n-Matrizen gebildet. Bei 1 wird die Summe über spaltenweise und bei 2 zeilenweise berechnet.\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nprint(\"a 3d-array - arr3d:\")\narr3d\nprint(f\"\\nSum by sheets (axis =0):\")\nnp.sum(arr3d, axis = 0) # or arr3d.sum(axis=0)\nprint(f\"\\nSum by column-wise (axis = 1):\")\narr3d.sum(axis=1)\nprint(f\"\\nSum by row-wise (axis = 2):\")\nnp.sum(arr3d, axis = 2)\narr3d.shape\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> a 3d-array - arr3d:\n#> array([[[ 0,  1,  2,  3],\n#>         [ 4,  5,  6,  7],\n#>         [ 8,  9, 10, 11]],\n#> \n#>        [[12, 13, 14, 15],\n#>         [16, 17, 18, 19],\n#>         [20, 21, 22, 23]]])\n#> \n#> Sum by sheets (axis =0):\n#> array([[12, 14, 16, 18],\n#>        [20, 22, 24, 26],\n#>        [28, 30, 32, 34]])\n#> \n#> Sum by column-wise (axis = 1):\n#> array([[12, 15, 18, 21],\n#>        [48, 51, 54, 57]])\n#> \n#> Sum by row-wise (axis = 2):\n#> array([[ 6, 22, 38],\n#>        [54, 70, 86]])\n#> (2, 3, 4)\n```\n:::\n:::\n\n:::\n::::\n\n# Heterogeneous data structure\n\nBei heterogenen Daten handelt sich um die Datenstrukturen bzw. Objekten, deren Elemente unterschiedlich sind. Z.B. in eien Liste können Objekte mit unterschiedlichen Datentypen gespeichert werden.\n\n## `list`s in R and `list`s & `dict`s in Python\n\n### `list`s in R\n\nUnterschied zwischen der Liste und dem Vektor in R besteht darin, dass sie *nicht homogen* sein müssen und die Länge der Elemente unterschiedlich sein können. Zur Erstellung gibt es Funktion `list()` in R. Beim Indexieren werden die doppelte rechteckige Klammer `[[]]` benutzt (im Vergleich zum Vektor `[]`).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# create a list\nlst_r <- list(1, c(2, 3), \n               c(TRUE, FALSE), \n               c(\"I\", \"love\", \"R\"), \"Hello R\")\n#\nlst_r\n#> [[1]]\n#> [1] 1\n#> \n#> [[2]]\n#> [1] 2 3\n#> \n#> [[3]]\n#> [1]  TRUE FALSE\n#> \n#> [[4]]\n#> [1] \"I\"    \"love\" \"R\"   \n#> \n#> [[5]]\n#> [1] \"Hello R\"\ncat(\"Type: \", class(lst_r), \"\\n\")\n#> Type:  list\n# Atribute of the list:\nstr(lst_r)\n#> List of 5\n#>  $ : num 1\n#>  $ : num [1:2] 2 3\n#>  $ : logi [1:2] TRUE FALSE\n#>  $ : chr [1:3] \"I\" \"love\" \"R\"\n#>  $ : chr \"Hello R\"\n#\n# Check element (Hello R) is in the list\n\"Hello R\" %in% lst_r\n#> [1] TRUE\n#\n# Change the 1st element (1) to 42\nlst_r[[1]] <- 42\nlst_r[[1]]\n#> [1] 42\n#\n# Remove the last element (Hello R) of the list\nlst_r[[length(lst_r)]] <- NULL\nlst_r\n#> [[1]]\n#> [1] 42\n#> \n#> [[2]]\n#> [1] 2 3\n#> \n#> [[3]]\n#> [1]  TRUE FALSE\n#> \n#> [[4]]\n#> [1] \"I\"    \"love\" \"R\"\n#\n# Check element (Hello R) is in the list\n\"Hello R\" %in% lst_r\n#> [1] FALSE\n#\n# Remove the 1st (42) and 2nd elements ([2, 3]) \n(lst_r[-c(1,2)]) # Outer bracket for execute code direct\n#> [[1]]\n#> [1]  TRUE FALSE\n#> \n#> [[2]]\n#> [1] \"I\"    \"love\" \"R\"\n```\n:::\n\n\nDie Elemente von der Liste in R können auch benannt sein (wie in dictionaries in Python). Dabei kann man auf die Elemente durch `[[]]` oder durch den Operator `$` (Dollar-Zeichen) zugreifen. In R kann man die Liste ändern oder entfernen, indem man dem Index von dem zu updatenden Element zu ändernde Wert zuweist.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\nlst_named <- list(\n  \"age\" = 19,\n  \"sex\" = \"m\",\n  \"it_skills\" = c(\"R\", \"Python\", \"Java\")\n)\n#\n# 1st element\nlst_named[[1]]\n#> [1] 19\n#\n# 3rd element\nlst_named[[3]]\n#> [1] \"R\"      \"Python\" \"Java\"\n#\n# 2nd element of the 3rd element\nlst_named[[3]][2]\n#> [1] \"Python\"\n#\n# 2nd element by name\nlst_named[[\"sex\"]]       \n#> [1] \"m\"\n#\n# 3rd element via $\nlst_named$it_skills\n#> [1] \"R\"      \"Python\" \"Java\"\n#\n# 2nd element from 3rd element from the list\nlst_named$it_skills[2]\n#> [1] \"Python\"\n#\n# Names of the list\nnames(lst_named)\n#> [1] \"age\"       \"sex\"       \"it_skills\"\n```\n:::\n\n\nMan kann in die Liste in R neues Element durch `append()` - Funktion hinzufügen oder sie in eine andere Datenstruktur wie Vektor oder Data Fareme (wenn sie ein *named list* ist) umwandeln.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# Add an element(\\\"Python\\\" and \\\"C++\\\") into the list(lst_r):\nappend(lst_r, c(\"Python\", \"C++\"))\n#> [[1]]\n#> [1] 42\n#> \n#> [[2]]\n#> [1] 2 3\n#> \n#> [[3]]\n#> [1]  TRUE FALSE\n#> \n#> [[4]]\n#> [1] \"I\"    \"love\" \"R\"   \n#> \n#> [[5]]\n#> [1] \"Python\"\n#> \n#> [[6]]\n#> [1] \"C++\"\n#\n# Convert to vector\nunlist(lst_r)\n#> [1] \"42\"    \"2\"     \"3\"     \"TRUE\"  \"FALSE\" \"I\"     \"love\"  \"R\"\n#\n# Create alist\nemp_list <- list(\n  emp_name = c(\"Max\", \"Ali\", \"Vali\"),\n  emp_age = c(45, 34, 27),\n  emp_salary = c(5.300, 3.700, 3.300)\n)\n# \n# Type of emp_list:\nclass(emp_list)\n#> [1] \"list\"\n#\n# Convert to data frame\nemp_df <- data.frame(emp_list); emp_df\n#>   emp_name emp_age emp_salary\n#> 1      Max      45        5.3\n#> 2      Ali      34        3.7\n#> 3     Vali      27        3.3\n#\n# Type of emp_df\nclass(emp_df)\n#> [1] \"data.frame\"\n```\n:::\n\n\n\n### `list`s in Python\n\nWie in R können auch die Elemente/Objekte in einer Liste in Python unterschiedliche Länge und Typen haben. Wenn alle Element der Liste in Python den gleichen Type haben, das ist diese vergleichbar mit dem Vektor in R.\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# Create a list\nlst_py = [1, [1, 2], True, [\"I\", \"love\", \"Python\"], \"Hello Python\"]\nprint(lst_py)\n#> [1, [1, 2], True, ['I', 'love', 'Python'], 'Hello Python']\nprint(\"\\nType: \", type(lst_py))\n#> \n#> Type:  <class 'list'>\n#\n# Check element (Hello Python) is in the list\n\"Hello Python\" in lst_py\n#> True\n#\n# Change the 1st element (1) to 42\nlst_py[0] = 42; lst_py\n#> [42, [1, 2], True, ['I', 'love', 'Python'], 'Hello Python']\n#\n# Remove the last element (Hello Python) from the list\nlst_py.pop(); lst_py  # pop() removes the last element in the list!!\n#> 'Hello Python'\n#> [42, [1, 2], True, ['I', 'love', 'Python']]\n#\n# Remove the 2nd element ([1, 2]) with pop()\nlst_py.pop(1); lst_py\n#> [1, 2]\n#> [42, True, ['I', 'love', 'Python']]\n#\n# Remove the 1st element (42) with del\ndel lst_py[-0]\n#\n# Remove by name\nlst_py.remove(True)\nlst_py\n#> [['I', 'love', 'Python']]\n```\n:::\n\n\nNues Element in die Lsite in Python kann durch `append()`- Funktion (wie in R) hinzugefügt werden. Die Listen kann man auch in Python wie in R in andere Datenstruktur umwandeln, in NumPy-Array, Pndas-Series oder Pandas-DataFrame.\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# Create a list\nls1 = [\"Ali\", \"Vali\", \"Gani\"]; ls1\n#> ['Ali', 'Vali', 'Gani']\n#\n# Add a new element (Max) into the list\n# append() adds the new item to the end of the list\nls1.append(\"Max\"); ls1\n#> ['Ali', 'Vali', 'Gani', 'Max']\n#\n# insert() adds an element to the list at the specified index\nls1.insert(1, \"Ivan\") # inserted at index 1 (2nd position)\n#\n# Conver to a Pandas Series\nls_pd = pd.Series(ls1); ls_pd\n#> 0     Ali\n#> 1    Ivan\n#> 2    Vali\n#> 3    Gani\n#> 4     Max\n#> dtype: object\ntype(ls_pd)\n#> <class 'pandas.core.series.Series'>\n#\n# Conver to a A Numpy 1d-Ayrray\nls_np = np.array(ls1); ls_np\n#> array(['Ali', 'Ivan', 'Vali', 'Gani', 'Max'], dtype='<U4')\ntype(ls_np)\n#> <class 'numpy.ndarray'>\n#\n# Convert to a Pandas DataFrame\nls2 = [3, 4, 5, 8, 2]\nls_df = pd.DataFrame(list(zip(ls1,ls2)), columns = [\"ls1\", \"ls2\"])\nls_df\n#>     ls1  ls2\n#> 0   Ali    3\n#> 1  Ivan    4\n#> 2  Vali    5\n#> 3  Gani    8\n#> 4   Max    2\n```\n:::\n\n\n### `dict`s in Python and `list`s in R\n\nWie oben bereits erwähnt, in R müssen die Elemente einer Liste nicht vom gleichen Typ im Vergleich zu den Vektoren. Die Elemente in einer Liste in R können aber auch benannt sein, das nennt man dann *named list*. In Python dagegen können die Elemente nicht benannt sein, dafür aber gibt es in Python *dictionanries*, die gleiche Struktur wie named list in R haben. Dictionary in Python besteht aus `d = {key : value}` Struktur. Der Key bzw Schlüssel ist *unique* und *immutable*. Meistens werden für den Schlüssel strings benutzt. Die gleiche Struktur hat man in R, wenn man die Elemente in der Liste benennt: `d = list(name = value)`.  Zugriff auf einzelnes Element erfolgt durch `d[\"key\"]` in Python und durch `d[\"name\"]` oder `d$name`. \n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## named list vs vector in R\n\nIn R können sowohl lists (`l <- list(\"a\" = 1, \"b\" = b, \"c\" = c(\"a\", \"b\", \"c\"))`) als auch vectors (`v <- c(\"a\" = 1, \"b\" = 2, \"c\" = 3)`) benannt werden. Der Unterscheid ist, dass die Values in Vektor den göeichen Typ haben muss und in der Liste unterschieliche Typen haben kann.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\ncat(\"Named vector with values of the same type:\\n\")\nv <- c(\"a\" = 1, \"b\" = 2, \"c\" = 3); v\ncat(\"Type: \", class(v))\ncat(\"\\n\\nNamed list with values of different types:\\n\")\nl <- list(\"a\" = 1, \"b\" = \"b\", \"c\" = c(\"a\", \"b\", \"c\")); l\ncat(\"Type: \", class(l))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Named vector with values of the same type:\n#> a b c \n#> 1 2 3 \n#> Type:  numeric\n#> \n#> Named list with values of different types:\n#> $a\n#> [1] 1\n#> \n#> $b\n#> [1] \"b\"\n#> \n#> $c\n#> [1] \"a\" \"b\" \"c\"\n#> \n#> Type:  list\n```\n:::\n:::\n\n\nWenn ich in den Vektor v von aoben die Werte mit unterschiedlichen Typen (bsp. 1, b, 3) eingebe, dann speichert bzw. gibt R alle Values als character bzw string zurück, also die 1 und 3 in character umgewandelt\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\nv1 <- c(\"a\" = 1, \"b\" = \"b\", \"c\" = 3); v1\n#>   a   b   c \n#> \"1\" \"b\" \"3\"\nclass(v1)\n#> [1] \"character\"\n```\n:::\n\n\nAus Interesse habe ich den Namen die Werte wie folgt zugewiesen: a = 1, b = b und c = c(1, 2, 3). Also hier haben wir drei Namen und 5 Werte. Erstaunlicherweise hat R den Namen c automatisch erweitert wie c1, c2, c3, bis alle Werte bannt sind. Dafür mag ich ja auch den R ;).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\nv2 <- c(\"a\" = 1, \"b\" = \"b\", \"c\" = c(1, 2, 3)); v2\n#>   a   b  c1  c2  c3 \n#> \"1\" \"b\" \"1\" \"2\" \"3\"\n```\n:::\n\n:::\n\nFolgendes Beispiel mit den Aktienkursen (Stand: 27.04.2024, von OnVista) möge es besser zum Ausdruck bringen.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n:::{.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nshare_name <- c(\"AMZN\", \"AAPL\", \"MBG\", \"TSLA\", \"BYD\", \"BABA\", \"SAP\")\nshare_value <- c(179.62, 169.30, 74.36, 168.29, 25.36, 75.55, 174.00)\n#\ncat(\"Create a named list from vectors:\\n\")\ndic_r <- setNames(as.list(share_value), share_name); dic_r\ncat(\"\\nshare price from BYD. slice with [[]]:\\n\")\ndic_r[[\"BYD\"]]\ncat(\"\\nshare price from Tesla. slice with $\\n\")\ndic_r$TSLA\ncat(\"\\nTyp from dic_r: \", class(dic_r))\ncat(\"\\nAdd an element (BMW3) to the list(dic_r[['BMW3']] <- 99.15):\\n\")\ndic_r[[\"BMW3\"]] <- 99.15\ncat(\"Is BMW3 there?\\n\")\ndic_r[\"BMW3\"] %in% dic_r\ndic_r[[\"BMW3\"]]\n#\ncat(\"\\nRemove an element (MBG) from the list (dic_r$MBG <- NULL):\\n\")\ndic_r$MBG <- NULL\ncat(\"Is MBG there?\\n\")\ndic_r[\"MBG\"] %in% dic_r\n# convert to python\ncat(\"\\nConvert the list (dic_r) to Python object (dic_py)\\n\")\ndic_py <- r_to_py(dic_r)\ndic_py\ncat(\"\\nType from dic_py:\\n\")\nclass(dic_py)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Create a named list from vectors:\n#> $AMZN\n#> [1] 179.62\n#> \n#> $AAPL\n#> [1] 169.3\n#> \n#> $MBG\n#> [1] 74.36\n#> \n#> $TSLA\n#> [1] 168.29\n#> \n#> $BYD\n#> [1] 25.36\n#> \n#> $BABA\n#> [1] 75.55\n#> \n#> $SAP\n#> [1] 174\n#> \n#> \n#> share price from BYD. slice with [[]]:\n#> [1] 25.36\n#> \n#> share price from Tesla. slice with $\n#> [1] 168.29\n#> \n#> Typ from dic_r:  list\n#> Add an element (BMW3) to the list(dic_r[['BMW3']] <- 99.15):\n#> Is BMW3 there?\n#> [1] TRUE\n#> [1] 99.15\n#> \n#> Remove an element (MBG) from the list (dic_r$MBG <- NULL):\n#> Is MBG there?\n#> [1] FALSE\n#> \n#> Convert the list (dic_r) to Python object (dic_py)\n#> {'AMZN': 179.62, 'AAPL': 169.3, 'TSLA': 168.29, 'BYD': 25.36, 'BABA': 75.55, 'SAP': 174.0, 'BMW3': 99.15}\n#> \n#> Type from dic_py:\n#> [1] \"python.builtin.dict\"   \"python.builtin.object\"\n```\n:::\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nprint(\"share price at 27.04.2024:\")\nfor k,v in r.dic_py.items():\n  print(f\"{k} : {v}\")\nprint(\"\\nKeys:\", r.dic_py.keys())\nprint(\"Values:\", r.dic_py.values())\nprint(f\"\\nShare of Tesla: {r.dic_py[\"TSLA\"]}\")\nprint(\"\\nAdd MBG to the dictionary(r.dic_py['MBG'] = 74.36):\")\nr.dic_py[\"MBG\"] = 74.36\nprint(\"\\nIs MBG in the dictionary?\")\n\"MBG\" in r.dic_py\nprint(\"\\nDelete BYD from dictionary(del r.dic_py['BYD']):\")\ndel r.dic_py[\"BYD\"]\nprint(\"\\nIs BYD in the dictionary?\")\n\"BYD\" in r.dic_py\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> share price at 27.04.2024:\n#> AMZN : 179.62\n#> AAPL : 169.3\n#> TSLA : 168.29\n#> BYD : 25.36\n#> BABA : 75.55\n#> SAP : 174.0\n#> BMW3 : 99.15\n#> \n#> Keys: dict_keys(['AMZN', 'AAPL', 'TSLA', 'BYD', 'BABA', 'SAP', 'BMW3'])\n#> Values: dict_values([179.62, 169.3, 168.29, 25.36, 75.55, 174.0, 99.15])\n#> \n#> Share of Tesla: 168.29\n#> \n#> Add MBG to the dictionary(r.dic_py['MBG'] = 74.36):\n#> \n#> Is MBG in the dictionary?\n#> True\n#> \n#> Delete BYD from dictionary(del r.dic_py['BYD']):\n#> \n#> Is BYD in the dictionary?\n#> False\n```\n:::\n:::\n\n:::\n::::\n\n\nZum Zugrif auf Elemente in einem Dictionary in Python gibt es neben dem Method `dict[\"key\"]`noch das Method `dict.get(\"key\", \"default\")`. Die beiden Methode liefern das gleiche Ergebnis. Unterschied besteht darin, ob der gesuchte Key in diectionary vorhanden ist oder nicht. Wenn Key nicht vorhanden ist, erhält man beim ersten Method den *KeyError*, das wird mit get() umgegangen. Standardmäsig wird *None* zurückgegeben, das kann man aber feststellen.\n\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nbsp_dic = {\n  \"Ali\" : 25,\n  \"Max\" : 44,\n  \"Vali\": 33\n}; bsp_dic\nprint(\"With []:\")\nprint(f\"Alini yoshi: {bsp_dic[\"Ali\"]}\")\nprint(\"\\nWith get():\")\nprint(f\"Alini yoshi: {bsp_dic.get(\"Ali\")}\")\nlstName = [\"Ali\", \"Gani\", \"Max\", \"Vali\", \"Brandon\"]; lstName\nprint(\"\\nIterate with devault value, if key not exis\")\nfor n in lstName:\n  # for k, v in bsp_dic.items():\n  print(f\"{n} - {bsp_dic.get(n, 'Mavjud emas!')}\" )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> {'Ali': 25, 'Max': 44, 'Vali': 33}\n#> With []:\n#> Alini yoshi: 25\n#> \n#> With get():\n#> Alini yoshi: 25\n#> ['Ali', 'Gani', 'Max', 'Vali', 'Brandon']\n#> \n#> Iterate with devault value, if key not exis\n#> Ali - 25\n#> Gani - Mavjud emas!\n#> Max - 44\n#> Vali - 33\n#> Brandon - Mavjud emas!\n```\n:::\n:::\n\n\n## `set`s and `tuple`s in Python\n\nIn Python gibt es weitere Strukturen von Daten, `set{}` und `tuple()`.\n\n### `set{}` in Python\n\nDie gruppierten Elemente lassen sich in Python unter anderem auch durch *set* darstellen: die Elemente im geschweiften Klammern `set{}` eingeben oder in `set()`- Funktion übergeben. Besonderheit in diesem Konzept ist, dass die Elemente *unique* sind, d.h. ein Objekt kommt in Mengen nur einmal vor. In R gibt es die Funktion `unique()`, die doppelt vorkommende Elemente in einem Vektor entfernt. Desweiteren sind sie ungeordnet und besitzen keine Indizes, über die man auf Elemente zugreifen kann. Die Menge mit *set* - *mutable*, also veränderlich und mit *frozenset*  -*immutable*, aslo nicht veränderbar.\n\nDie Methoden in von *sets* in Python wie `union`, `intersection` oder `difference` gibt es auch in R, die man bei Vektoren anwenden kann.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# set() - returns the vector without duplicate values\nmy_lst = [2, 3, 1, 5, 3, 9, 3, 2, 7]; my_lst\n#> [2, 3, 1, 5, 3, 9, 3, 2, 7]\nmy_set = set(my_lst); my_set\n#> {1, 2, 3, 5, 7, 9}\n#\n# Create a set\nx = {1, 2, 3, 4, 5, 6}; x\n#> {1, 2, 3, 4, 5, 6}\ny = set([4, 5, 6, 7, 8, 9]); y\n#> {4, 5, 6, 7, 8, 9}\nprint(type(x), type(y))\n#> <class 'set'> <class 'set'>\n#\n# union() - combine x and y without duplicates\nx.union(y)\n#> {1, 2, 3, 4, 5, 6, 7, 8, 9}\n#\n# intersection() - which obj in both sets\nx.intersection(y)\n#> {4, 5, 6}\n#\n# difference() - objects in x, but not in y\nx.difference(y)\n#> {1, 2, 3}\n#\n# difference() - objects in y, but not in x\ny.difference(x)\n#> {8, 9, 7}\n```\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n:::{.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# Typ of python sets\nclass(py$x)\n#> [1] \"python.builtin.set\"    \"python.builtin.object\"\nclass(py$y)\n#> [1] \"python.builtin.set\"    \"python.builtin.object\"\n#\n# unique() - returns the vector without duplicate values\nmy_vec <- c(2, 3, 1, 5, 3, 9, 3, 2, 7); my_vec\n#> [1] 2 3 1 5 3 9 3 2 7\nuniq_vec <- unique(my_vec); uniq_vec\n#> [1] 2 3 1 5 9 7\n#\n# create vectros\nx_r <- c(1, 2, 3, 4, 5, 6); x_r\n#> [1] 1 2 3 4 5 6\ny_r <- c(4, 5, 6, 7, 8, 9); y_r\n#> [1] 4 5 6 7 8 9\n#\n# union() - combine x_r and y_r without duplicates\nunion(x_r, y_r)\n#> [1] 1 2 3 4 5 6 7 8 9\n#\n# intersection() - which obj in both vectors\nintersect(x_r, y_r)\n#> [1] 4 5 6\n#\n# setdiff() - objects in x_r, but not in y_r\nsetdiff(x_r, y_r)\n#> [1] 1 2 3\n#\n# setdiff() - objects in y_r, but not in x_r\nsetdiff(y_r, x_r)\n#> [1] 7 8 9\n```\n:::\n\n:::\n::::\n\n### `tuple()` in Python\n\nEin Tupel fasst mehrere (mit unterschiedlichen Typen) Elemente zu einem Objekt. Sie werden mit Komma getrennten Elementen in Klammern `t = (obj1, obj2, ...)`, auch ohne Klammenr `t = obj1, obj2, ...` oder mit der Funktion `tuple(obj)` erzeugt. Im Vergleich zu den Listen sind Teuples **immutable**, man sagt auch unveränderbare Liste. Wenn man sie einmal erstellt, lassen sie sich nicht ändern, wenn das Ändern notwendig ist, kann man sie in die Liste umwandeln und nach der Änderung wieder zurück in den Tupel. Sie können auch in/mit Dictionaries verwendet werden.\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# create a tuple\nt1 = 1, 5, 6, 6, 3; print(\"t1: \", t1)\n#> t1:  (1, 5, 6, 6, 3)\nt2 = (2, 4, 2, 5, 6); print(\"t2: \", t2)\n#> t2:  (2, 4, 2, 5, 6)\nt3 = tuple([3, 4, 5, 6, 1]); print(\"t3: \", t3)\n#> t3:  (3, 4, 5, 6, 1)\n#\n# tuples in dict keys\nkoordinat = {\n  (0,0) : 100,\n  (1,1) : 200,\n  (0,1) : 75\n}; koordinat\n#> {(0, 0): 100, (1, 1): 200, (0, 1): 75}\n# add istem\nkoordinat[(1,0)] = 125; koordinat\n#> {(0, 0): 100, (1, 1): 200, (0, 1): 75, (1, 0): 125}\n#\n# tuples in dict values\ngreats = {\n  \"Navoi\" : (\"Hirot\", 1441),\n  \"Bobur\" : (\"Andijon\",1483),\n  \"Temur\" : (\"Shahrisabz\", 1336)\n}; greats\n#> {'Navoi': ('Hirot', 1441), 'Bobur': ('Andijon', 1483), 'Temur': ('Shahrisabz', 1336)}\n#\n# iterate dict\nfor great, (place, year) in greats.items():\n  print(f\"{great} - was born in {place} in {year}.\")\n#> Navoi - was born in Hirot in 1441.\n#> Bobur - was born in Andijon in 1483.\n#> Temur - was born in Shahrisabz in 1336.\n```\n:::\n\n\n\n\n## `data.frame`s in R and `pandas.DataFrame` in Python\n\nDataframes sind möchlicherweise die häufigste Art, die Daten in R und Python zu speichern, zu bearbeiten und zu analyisieren. Als DF (DataFrame) kann man sich eine Tabelle mit vier Ecken (Zeilen und Spalten) vorstellen, die gängigsten sind Excel Sheets. Die Zeilen stellen die Fälle oder Beobachtungen (*engl. observations*) und Spalten die Variable oder auch in der Statistik Merkmale (*engl. futures*) dar. Sie sind in R praktisch eine benannte Liste von Vektoren (in Python wären pandas.Series) gleicher Länge, wobei jeder Vektor (Series) eine Spalte darstellt. Dataframes in R und Python besitzen einige Gemeinsamkeit[@rp_DA] für die Voaraussetzung.\n\n  - jede Spalte muss gleiche Länge haben\n  - alle Elemente in der Spalte müssen gleichen Typ haben\n  - Elemente in der Zeile können unterschiedlichen Type haben\n  - Zeilen und Spalten können unterschiedlich benannt werden\n  \nData Frames werden in R mit `data.frame()` und in Python mit pandas `pandas.DataFrame()` erzeugt. Im Folgenden wird Data Frame durch eine kleine Tabell dargestellt. Die Tabelle hat 10 Zeilen (Beobachtungen = Namen) und 3 Spalten (Variable = Name, Geburtsjahr und Geburtsort).\n\n\n::: {.cell}\n::: {.cell-output-display}\n|names    | byear|bplace     |\n|:--------|-----:|:----------|\n|Navoi    |  1441|Hirot      |\n|Bobur    |  1483|Andijon    |\n|Temur    |  1336|Shahrisabz |\n|Cholpon  |  1898|Andijon    |\n|Qodiriy  |  1894|Toshkent   |\n|Ulugbek  |  1394|Samarqand  |\n|Xorazmi  |   783|Xiva       |\n|Beruniy  |  1048|Xorazm     |\n|Termiziy |   824|Termiz     |\n|Buxoriy  |   810|Buxoro     |\n:::\n:::\n\n\n### Create a DF\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}  \n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\nnames <- c(\"Navoi\", \"Bobur\", \"Temur\", \"Cholpon\", \"Qodiriy\", \n           \"Ulugbek\", \"Xorazmi\", \"Beruniy\", \"Termiziy\", \"Buxoriy\")\nbyear <- c(1441, 1483, 1336, 1898, 1894, 1394, 783, 1048, 824, 810) \nbplace <- c(\"Hirot\", \"Andijon\", \"Shahrisabz\", \"Andijon\", \"Toshkent\",\n            \"Samarqand\", \"Xiva\", \"Xorazm\", \"Termiz\", \"Buxoro\")\n# Create a DataFrame -----------------------------------------\ndf <- data.frame(names, byear, bplace)\n# Type -------------------------------------------------------\nclass(df)\n#> [1] \"data.frame\"\n# nums of rows and cols --------------------------------------\ndim(df)  # like shape in pandas\n#> [1] 10  3\n# num of rows ------------------------------------------------\nnrow(df)\n#> [1] 10\n# num of columns ---------------------------------------------\nncol(df)\n#> [1] 3\n# structur of DataFrame --------------------------------------\n# str(df) or\npillar::glimpse(df) # like pandas.DataFrame,info()\n#> Rows: 10\n#> Columns: 3\n#> $ names  <chr> \"Navoi\", \"Bobur\", \"Temur\", \"Cholpon\", \"Qodiriy\", \"Ulugbek\", \"Xo…\n#> $ byear  <dbl> 1441, 1483, 1336, 1898, 1894, 1394, 783, 1048, 824, 810\n#> $ bplace <chr> \"Hirot\", \"Andijon\", \"Shahrisabz\", \"Andijon\", \"Toshkent\", \"Samar…\n# First n lines, default = 6 ---------------------------------\nhead(df, n = 3)\n#>   names byear     bplace\n#> 1 Navoi  1441      Hirot\n#> 2 Bobur  1483    Andijon\n#> 3 Temur  1336 Shahrisabz\n# Last n lines -----------------------------------------------\ntail(df, n=2)\n#>       names byear bplace\n#> 9  Termiziy   824 Termiz\n#> 10  Buxoriy   810 Buxoro\n# colnames ---------------------------------------------------\ncolnames(df)\n#> [1] \"names\"  \"byear\"  \"bplace\"\n# rows -------------------------------------------------------\nrownames(df)\n#>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n```\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# create pandas DataFrame from created df in r -------\ndf_pd = pd.DataFrame(r.df)\ndf_pd[\"byear\"] = df_pd[\"byear\"].astype(int)\n# Type -----------------------------------------------\ntype(df_pd)\n#> <class 'pandas.core.frame.DataFrame'>\n# nums of rows and cols ------------------------------\ndf_pd.shape   # like dim() in r\n#> (10, 3)\n# num of rows ----------------------------------------\nlen(df_pd)\n#> 10\n# num of columns -------------------------------------\nlen(df_pd.columns)\n#> 3\n# structur of DataFrame ------------------------------\ndf_pd.info()   # like str() in r\n#> <class 'pandas.core.frame.DataFrame'>\n#> RangeIndex: 10 entries, 0 to 9\n#> Data columns (total 3 columns):\n#>  #   Column  Non-Null Count  Dtype \n#> ---  ------  --------------  ----- \n#>  0   names   10 non-null     object\n#>  1   byear   10 non-null     int32 \n#>  2   bplace  10 non-null     object\n#> dtypes: int32(1), object(2)\n#> memory usage: 332.0+ bytes\n# First n lines, default = 5 -------------------------\ndf_pd.head(n = 3)\n#>    names  byear      bplace\n#> 0  Navoi   1441       Hirot\n#> 1  Bobur   1483     Andijon\n#> 2  Temur   1336  Shahrisabz\n# Last n lines ---------------------------------------\ndf_pd.tail(n = 2)\n#>       names  byear  bplace\n#> 8  Termiziy    824  Termiz\n#> 9   Buxoriy    810  Buxoro\n# colnames -------------------------------------------\ndf_pd.columns\n#> Index(['names', 'byear', 'bplace'], dtype='object')\n# rows -----------------------------------------------\ndf_pd.index\n#> RangeIndex(start=0, stop=10, step=1)\n```\n:::\n\n:::\n::::\n\n### Access a (the) element(s)\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}  \n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# 1st row, 1st col -------------------------------\ndf[1,1]\n#> [1] \"Navoi\"\n# 1-3 rows, all cols -----------------------------\ndf[1:3, ]\n#>   names byear     bplace\n#> 1 Navoi  1441      Hirot\n#> 2 Bobur  1483    Andijon\n#> 3 Temur  1336 Shahrisabz\n# all rows, 1-2 cols -----------------------------\ndf[, 1:2]\n#>       names byear\n#> 1     Navoi  1441\n#> 2     Bobur  1483\n#> 3     Temur  1336\n#> 4   Cholpon  1898\n#> 5   Qodiriy  1894\n#> 6   Ulugbek  1394\n#> 7   Xorazmi   783\n#> 8   Beruniy  1048\n#> 9  Termiziy   824\n#> 10  Buxoriy   810\n# 3 rows, col bplace -----------------------------\ndf[1:3, 3]\n#> [1] \"Hirot\"      \"Andijon\"    \"Shahrisabz\"\n# rows where col bplace = \"Andijon\" --------------\ndf[df$bplace == \"Andijon\", ]\n#>     names byear  bplace\n#> 2   Bobur  1483 Andijon\n#> 4 Cholpon  1898 Andijon\n# rows where col byear < 1000 -------------------\ndf[df$byear < 1000, ]\n#>       names byear bplace\n#> 7   Xorazmi   783   Xiva\n#> 9  Termiziy   824 Termiz\n#> 10  Buxoriy   810 Buxoro\n```\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# 1st row, 1st col -------------------------------------\ndf_pd.iloc[0,0]         # iloc by postion(s)\n#> 'Navoi'\n# 1-3 rows, all cols -----------------------------------\ndf_pd.iloc[:3, ]\n#>    names  byear      bplace\n#> 0  Navoi   1441       Hirot\n#> 1  Bobur   1483     Andijon\n#> 2  Temur   1336  Shahrisabz\n# all rows, 1-2 cols -----------------------------------\ndf_pd.iloc[:, :2]\n#>       names  byear\n#> 0     Navoi   1441\n#> 1     Bobur   1483\n#> 2     Temur   1336\n#> 3   Cholpon   1898\n#> 4   Qodiriy   1894\n#> 5   Ulugbek   1394\n#> 6   Xorazmi    783\n#> 7   Beruniy   1048\n#> 8  Termiziy    824\n#> 9   Buxoriy    810\n# 3 rows, col bplace -----------------------------------\ndf_pd.loc[:3, \"bplace\"]  # loc by labels(s)\n#> 0         Hirot\n#> 1       Andijon\n#> 2    Shahrisabz\n#> 3       Andijon\n#> Name: bplace, dtype: object\n# 1-2 rows, cols names and bplace ----------------------\ndf_pd.loc[:2, [\"names\",\"byear\"]] # or df_pd.bplace\n#>    names  byear\n#> 0  Navoi   1441\n#> 1  Bobur   1483\n#> 2  Temur   1336\n# rows where col bplace = \"Andijon\" --------------------\ndf_pd.loc[df_pd[\"bplace\"] == \"Andijon\"]\n#>      names  byear   bplace\n#> 1    Bobur   1483  Andijon\n#> 3  Cholpon   1898  Andijon\n# rows where col byear < 1000 --------------------------\ndf_pd.loc[df_pd.byear < 1000]\n#>       names  byear  bplace\n#> 6   Xorazmi    783    Xiva\n#> 8  Termiziy    824  Termiz\n#> 9   Buxoriy    810  Buxoro\n# ------------------------------------------------------\n```\n:::\n\n:::\n::::\n\n### Change Row- and Colnames\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\ncat(\"Rownames:\\n\", rownames(df))  # rownames \ncat(\"\\nColnames:\", colnames(df)) # colnames\n#\nnew_rname <- paste(\"person\",1:10, sep=\"_\", collapse= \",\")\nnew_rname <- unlist(strsplit(new_rname, \",\"))\ncat(\"\\n\\nNew Rowsname:\\n\", new_rname)\n\ncat(\"\\nDF with modified rownames:\\n\")\n# change the rownames\nrownames(df) <- (new_rname)\nhead(df, n = 2)\n# change the colnames\n# Method1: colnames(c(names of new columns))\n# Method2: setNames(df, c(names of new columns)) \n# Here will be used Method2\n# change colname\ndf <- setNames(df, c(\"Ism\", \"Tug\\'ilgan yil\", \"Tug\\'ilgan joy\"))\ncat(\"\\n\\nDF with modified colnames:\\n\")\nhead(df, n = 2)\n#\ncat(\"\\n\\nSet key in DF with data.table:\\n\")\ndt <- data.table(df)\nsetkey(dt, Ism)      # Like Index in pandas\n#call(\"Key: \", key(dt))\nhead(dt, n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rownames:\n#>  1 2 3 4 5 6 7 8 9 10\n#> Colnames: names byear bplace\n#> \n#> New Rowsname:\n#>  person_1 person_2 person_3 person_4 person_5 person_6 person_7 person_8 person_9 person_10\n#> DF with modified rownames:\n#>          names byear  bplace\n#> person_1 Navoi  1441   Hirot\n#> person_2 Bobur  1483 Andijon\n#> \n#> \n#> DF with modified colnames:\n#>            Ism Tug'ilgan yil Tug'ilgan joy\n#> person_1 Navoi          1441         Hirot\n#> person_2 Bobur          1483       Andijon\n#> \n#> \n#> Set key in DF with data.table:\n#> Key: <Ism>\n#>        Ism Tug'ilgan yil Tug'ilgan joy\n#>     <char>         <num>        <char>\n#> 1: Beruniy          1048        Xorazm\n#> 2:   Bobur          1483       Andijon\n```\n:::\n:::\n\n:::\n\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## data.frame() vs data.table()\n\nEs gibt unterschiedliche Funktionen in R für Data Frames. Im Grunde genommen, sind `data.frame()` und `data.table` sind gleiche. Mann kann sich *data.table* als *data.frame* mit *erweiterte Funktionen* vorstellen. Die Funktion data.frame ist in R-base, dh. wenn mann R installiert, ist diese mit Basisfunktionen mitdabei. Dagegegn muss data.table als Package installiert und eingelesen werden, wie man pandas in Python erst importieren muss. Es gibt aber auch weiter Packages in R, die mehr Kompfort und Funktionalitäte bei der Bearbeitung der Tabellen bietet wie *tibble*, *tidyverse*, *dplyr* ect. \n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nprint(f\"Rownames(index):\\n{list(df_pd.index)}\")\nprint(f\"\\nColnames: {list(df_pd.columns)}\")\n#\nnew_pname = [\"user_\" + str(idx) for idx in list(df_pd.index)]\nprint(f\"\\nNew Rowsname:\\n{new_pname}\")\nprint(\"\\nDF with modified rownames:\")\ndf_pd.index = new_pname\ndf_pd.head(n = 2)\nprint(\"\\nDF with modified colnames:\")\ndf_pd.columns = [\"Ism\", \"Tug\\'ilgan yil\", \"Tug\\'ilgan joy\"]\ndf_pd.head(n = 2)\nprint(\"\\n\\nSet a column as index:\")\n# like key in data.table in r\ndf_pd.set_index(\"Ism\", inplace = True, append = True)\ndf_pd.head(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rownames(index):\n#> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n#> \n#> Colnames: ['names', 'byear', 'bplace']\n#> \n#> New Rowsname:\n#> ['user_0', 'user_1', 'user_2', 'user_3', 'user_4', 'user_5', 'user_6', 'user_7', 'user_8', 'user_9']\n#> \n#> DF with modified rownames:\n#>         names  byear   bplace\n#> user_0  Navoi   1441    Hirot\n#> user_1  Bobur   1483  Andijon\n#> \n#> DF with modified colnames:\n#>           Ism  Tug'ilgan yil Tug'ilgan joy\n#> user_0  Navoi           1441         Hirot\n#> user_1  Bobur           1483       Andijon\n#> \n#> \n#> Set a column as index:\n#>               Tug'ilgan yil Tug'ilgan joy\n#>        Ism                               \n#> user_0 Navoi           1441         Hirot\n#> user_1 Bobur           1483       Andijon\n```\n:::\n:::\n\n:::\n::::\n\nData Frames, wie schon erwähnt. wahrscheinlich die meist benutzten Datenstrukturen sowohl in R als auch in Python. Daher wurde das Thema hier kurz dargestellt und Fokus nur auf Basisfunktionen gelegt. Dazu wird es ein eigenes Thema geben.  \n\n# References\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}