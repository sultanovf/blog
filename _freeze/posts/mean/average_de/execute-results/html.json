{
  "hash": "2aeeb389cfb6c2a4729fd2393f5e901e",
  "result": {
    "markdown": "---\ntitle: |\n  Estimates of Location\\\n  {{< fa language >}} in German\ndescription: | \n  \\\"I am a bit skeptical about statistics. According to statistics, a millionaire and a poor guy each have half a million.\\\"  <br> ~ Franklin Roosevelt.\nauthor: \"Fazliddin Sultonov\"\ndate: \"2024-05-28\"\ndate-format: \"MMM D, YYYY\"\n\nfilters:\n  - lightbox\nlightbox: \n  match: auto\n  effect: none\n  desc-position: top\n\npage-layout: full\nreference-location: margin\ncategories: [Statistics, German, R, Python, Mean, Median, Modal, Quartil, Box-Plot]\n# Code execute options\nexecute: \n  echo: true    # Input anzeigen\n  eval: true    # Code ausführen\n  freeze: true  # never re-render during project render\n# Output\nformat: \n  html:\n    theme: cosmo\n  # Sections\n    toc: true\n    toc-location: left\n    toc-title: \"Table of Contents\"\n  # codeb block\n    code-fold: true\n    code-line-numbers: true\n    code-block-border-left: true\n  # engine\n    engine: knitr\n    css: /customs/style.css\n\n# Chunk Options\nknitr:\n  opts_chunk:\n    comment: \"#>\" \n\n  opts_knit: \n    warning: false\n    error: false\n    \n# bibliography\nbibliography: reference.bib\nnocite: |\n  @*\n---\n\n\n\n![](pictures/medium.png){.nolightbox}\n\n::: {.cell}\n\n:::\n\n\nBei der *deskriptiven Statistik* werden die Daten *zusammenfassend* dargestellt und beschrieben, so dass mann den Wald statt viele Bäume sieht [@r_ModernDA]. Die Daten werden also *explorativ* untersucht, um den ersten Eindruck von ihnen zu bekommen. Dies würde man im Bereich Machine Learning als *Feature Engineering* bezeichnen [@dsPraxis]. Die deskriptive Statistik wird auch als *beschreibende Statistik* oder *deskriptive Datenanalyse* bezeichnet und hat das Ziel einen Überblick über die Verteilung der Daten anhand Kennzahlen, Tabellen und Grafik zu verschaffen. \n\nLagemaße (engl. Estimates of Location), auch Maße der zentralen Tendenz genannt, gibt Auskunft darüber, wo die Mitte der Verteilung liegt. Anders gesagt, man reduziert mehrere Werte auf einen Wert (Kennzahl), der alle Werte repräsentiert (viele einzelne Bäume -> Wald). Mittelwert, Median und Modalwert gehört dazu.\n\n:::{layout-ncol=2}\n\n```{mermaid}\n%%| fig-cap: \"Lagemaße\"\n%%| echo: false \n\nflowchart LR\n  A(\"Estimates of Location\\n(Lagemaße)\")\n  B[[\"- Mean\\n- Median\\n- Modus\\n- Quantil\"]]\n  A --> B\n  style A text-align:center;\n```\n\n```{mermaid}\n%%| fig-cap: \"Streuungsmaße\"\n%%| echo: false \n\nflowchart LR\n  A(\"Estimates of Variability\\n(Streuungsmaße)\")\n  B[[\"- Standard deviation (Standardabweichung)\\n- Variance (Varianz)\\n- Range (Spannweite)\\n- Interquartile range, IQR (Interquartilsabstand)\"]]\n  A:::myClass --> B\n  classDef myClass style: text-align:center\n```\n\n:::\n\n## Mean\n\nDas arithmetisches Mittel (engl. mean) häufig als Mittelwert bezeichnet, wird am häufigsten benutzt. Mittelwert wird berechnet, indem man alle Werte addiert $(x_1, x_2, ..., x_n)$ und die Summe durch die Anzahl der Werte (n) dividiert:\n$$\n\\bar{x} = \\frac{x_1+x_2+x_3+...+x_n}{n}  = \\frac{1}{n}\\sum_{i = 1}^{n}{x_i}\n$$\nMan möge sich vorstellen, man würde eine Straßenumfrage machen und die Menschen nach ihrem Beruf, Alter und Einkommen fragen. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\"}\ninterview <- list(\n  profession = c(\"Doctor\", \"Teacher\", \"Doctor\", \"Pensioner\", \"Professor\", \"Pensioner\", \"Student\", \"Student\", \"Pensioner\"),\n  age = c(47, 39, 55, 68, 51, 71, 21, 25, 82),\n  tall = c(1.75, 1.72, 1.73, 1.68, 1.75, 1.70, 1.78, 1.77, 1.73),\n  income = c(3500,  2200, 3400, 2050, 2600, 1400, 1050, 950, 1100)\n)\ndf <- data.frame(interview)\nas_tibble(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 9 × 4\n#>   profession   age  tall income\n#>   <chr>      <dbl> <dbl>  <dbl>\n#> 1 Doctor        47  1.75   3500\n#> 2 Teacher       39  1.72   2200\n#> 3 Doctor        55  1.73   3400\n#> 4 Pensioner     68  1.68   2050\n#> 5 Professor     51  1.75   2600\n#> 6 Pensioner     71  1.7    1400\n#> 7 Student       21  1.78   1050\n#> 8 Student       25  1.77    950\n#> 9 Pensioner     82  1.73   1100\n```\n:::\n:::\n\n\nUm den Mittelwert zu berechnen gibt es in R und Python die Funktion `mean()`. Zu beachten bei der Berechnung von mean ist, dass der Mittelwert *metrische Daten* voraussetzt. Mean vom Einkommen und Alter ist wie folgt berechnet:\n\n::: {.code-r} \n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n::: {.cell .code-input}\n\n```{.r .cell-code  code-fold=\"false\"}\nm_age <- mean(df$age); m_inc <- mean(df$income)\nglue::glue(\"mean of age: {m_age}\\nmean of income: {round(m_inc, 2)}\")\n#> mean of age: 51\n#> mean of income: 2027.78\n```\n:::\n\n:::\n\n::: {.code-py}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n::: {.cell .code-output}\n\n```{.python .cell-code  code-fold=\"false\"}\nage_m = r.df.age.mean(); inc_m = r.df[\"income\"].mean()\nprint(f\"mean of age: {age_m}\\nmean of income: {round(inc_m, 2)}\")\n#> mean of age: 51.0\n#> mean of income: 2027.78\n```\n:::\n\n:::\n\n:::{.callout-note}\n### Interpretation\n\nVon neun Befragten ist das arithmetisches Mittel fürs Alter: 51 und fürs Einkommen: 2.161. Also, man kann sagen, die Befragten sind *im Durchschnit* 51 Jahre alt und verdienen durchschnitlich 2.027,78 (in Euro, Dollar, in was auch immer) im Monat. \n:::\n\n\n## Median\n\nMedian ist der Wert, der in der Mitte von den der Größe nach *sortierten/geordneten* Werten ist. Er halbiert die Verteilung und gibt an, dass eine Hälfte der Verteilung von ihm kleiner und andere Hälfte größer ist.\n\nUm Miedian zu berechnen gibt es in R und Python die Funktion `median()`. Zu beachten ist, dass der Median *metrische und ordinale Daten* voraussetzt. Median vom Einkommen und von der Größe ist wie folgt berechnet:\n\n::: {.code-r} \n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n::: {.cell .code-input}\n\n```{.r .cell-code  code-fold=\"false\"}\nmed_tall <- median(df$tall); med_inc <- median(df$income)\nglue::glue(\"median of tall: {med_tall}\\nmedian of income: {med_inc}\")\n#> median of tall: 1.73\n#> median of income: 2050\n```\n:::\n\n:::\n\n::: {.code-py}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n::: {.cell .code-output}\n\n```{.python .cell-code  code-fold=\"false\"}\nimport pandas as pd\ntall_med = r.df.tall.median(); inc_med = r.df[\"income\"].median()\nprint(f\"median of tall: {tall_med}\\nmean of income: {inc_med}\")\n#> median of tall: 1.73\n#> mean of income: 2050.0\n```\n:::\n\n:::\n\n:::{.callout-note}\n### Interpretation\n\nVon neun Befragten ist der Median für die Größe: 1.73 und fürs Einkommen: 2.050. Also, man kann sagen, die *Hälfte (50%)* der neuen Befragten sind *kleiner als* 1.73 Meter und verdienen *unter* 2.050 (in Euro, Dollar, in was auch immer) im Monat. Oder andersrum, die *Hälfte (50%)* der Befragten sind *größer als* 1.73 Meter und verdienen *über* 2.050 im Monat.\n:::\n\n## Modus\n\nModalwert, auch Modus genannt, ist der Wert, der *am häufgsten* vorkommt. Der Modus kann für *metrische, ordinale und nominale Daten* berechnet werden. Für nominale Daten ist der Modus der einzige Kennwert, um mittleren Wert zu bestimmen. In R gibt es keine Funktion für Modus, man kann durch die Funktion `table` den Modalwert anzeigen lassen.\n\n::: {.code-r} \n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n::: {.cell .code-input}\n\n```{.r .cell-code  code-summary=\"show the code\"}\ncat(\"Frequence table for variable profession:\")\ntable(df$profession)      # Häufigkeitstablle\n# Modus-Maximaler Wert von der Freq.Table\ncat(\"Mode for variable profession - Max value of FreqTable: \", max(table(df$profession)))\ncat(\"\\n\\nFrequence table for variable tall:\")\ntable(df$tall)            # Häufigkeitstablle\ncat(\"Mode for variable tall - Max value of FreqTable: \", max(table(df$tall)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Frequence table for variable profession:\n#>    Doctor Pensioner Professor   Student   Teacher \n#>         2         3         1         2         1 \n#> Mode for variable profession - Max value of FreqTable:  3\n#> \n#> Frequence table for variable tall:\n#> 1.68  1.7 1.72 1.73 1.75 1.77 1.78 \n#>    1    1    1    2    2    1    1 \n#> Mode for variable tall - Max value of FreqTable:  2\n```\n:::\n:::\n\n:::\n\n::: {.code-py}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n::: {.cell .code-output}\n\n```{.python .cell-code  code-summary=\"show the code\"}\n#from statistics import mode\n# tall_med = r.df.tall.median(); inc_med = r.df[\"income\"].median()\n# print(f\"median of tall: {tall_med}\\nmean of income: {inc_med}\")\nfreq_prof = r.df[\"profession\"].value_counts()       # FreqTable for var profession\nmodi_prof = r.df[\"profession\"].value_counts().max() # Modi for var profession\nfreq_tall = r.df[\"tall\"].value_counts()             # FreqTable for var tall\nmodi_tall = r.df[\"tall\"].value_counts().max()       # Modi for var tall\nprint(\"Frequence table for variable profession:\")\nprint(freq_prof)\nprint(f\">> Mode for variable profession - Max value of FreqTable:  {modi_prof}\")\nprint(\"\\nFrequence table for variable tall:\")\nprint(freq_tall)\nprint(f\">> Mode for variable tall - Max value of FreqTable:  {modi_tall}\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Frequence table for variable profession:\n#> profession\n#> Pensioner    3\n#> Doctor       2\n#> Student      2\n#> Teacher      1\n#> Professor    1\n#> Name: count, dtype: int64\n#> >> Mode for variable profession - Max value of FreqTable:  3\n#> \n#> Frequence table for variable tall:\n#> tall\n#> 1.75    2\n#> 1.73    2\n#> 1.72    1\n#> 1.68    1\n#> 1.70    1\n#> 1.78    1\n#> 1.77    1\n#> Name: count, dtype: int64\n#> >> Mode for variable tall - Max value of FreqTable:  2\n```\n:::\n:::\n\n:::\n\n:::{.callout-note}\n### Interpretation\n\nFür Modus gibt es nicht besonders viel zu interpretieren. Man könnte sagen, unter Befragten sind am meisten die Rentner oder die meisten haben die Größe 1.73 Meter.\n:::\n\n## Outliers: Mean vs Median\n\nEs gibt viele Fälle, wo der Median gegenüber Mean ein besseres Lagemaß darstellt, z.B. wenn es in dem Datensatz extreme Werte (Außreißer, engl. outlier) gibt. Bei Extremfällen wird der Median nicht von *Ausreißern* beeinflusst, die das Ergebnis verfälschen können. Wir erweitern das Beispiel von Umfrage, indem wir einen Ausreißer hinzufügen. Also, wir hätten noch einen Tiktoker oder Blogger befragt, der jung, groß ist und mehr als die anderen Befragten verdient. Da wird unser ursprünglicher Mittelwert ändern und höher ausfallen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\"}\nv <- data.frame(\"Bloger\", 19, 1.84, 5600); names(v) <- names(df)\nextrem <- rbind(df,v)\ncat(\"New df with outlier:\\n\")\ntail(extrem, n = 3)\n# Means\ncat(\"\\nWithout outlier:\\n\")\nglue::glue(\"income: mean - {round(mean(df$income),2)}, median - {median(df$income)}\\nage: mean - {mean(df$age)}, median - {median(df$age)}\")\n#glue::glue(\"Median income: {median(df$income)}\\nMedian age: {median(df$age)}\")\ncat(\"\\nWith outlier:\\n\")\nglue::glue(\"income: mean - {mean(extrem$income)}, median - {median(extrem$income)}\\nage:mean - {mean(extrem$age)}, median - {median(extrem$age)}\")\n#glue::glue(\"Median income: {median(extrem$income)}\\nMedian age: {median(extrem$age)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> New df with outlier:\n#>    profession age tall income\n#> 8     Student  25 1.77    950\n#> 9   Pensioner  82 1.73   1100\n#> 10     Bloger  19 1.84   5600\n#> \n#> Without outlier:\n#> income: mean - 2027.78, median - 2050\n#> age: mean - 51, median - 51\n#> \n#> With outlier:\n#> income: mean - 2385, median - 2125\n#> age:mean - 47.8, median - 49\n```\n:::\n:::\n\n\nWie man oben sieht, durch Ausreißer, hat sich Mittelwert für Einkommen von 2.027,78 auf 2.385 gestiegen und alter von 51 auf 47.8 gesunken. Bei Median hat sich nicht so groß geändert, nämlich von 2.050 auf 2.125 gestiegen und für die Variable alter von 51 auf 49 gesunken.\n\n## Usage\n\nDer mittlere Wert, wie wir gesehen haben auf unterschiedliche Weise ermittelt. Daher ist es sinnvoll, dass man sich überlegt, anhand den Gegebenheiten (wie z.B. Skalenneveau der Daten) welches Lagemaß am besten geeignet ist. Hier ist meine kurze Zusammenfassung:\n\n  - Bei **nominalen** verwendet man den **Modus**, da andere Lagemaße dafür nicht geeignet sind.\n  \n  - Anwenung von **Median** ist dann *sinnvoll*, wenn\n    - die Daten **ordinal** sind.\n    - man weiß, dass man **Außreßer** hat.\n      \n  - Hat man **quantitative** Daten und **symmetrische** Verteilung vorligt, dann ist **arithmetisches Mittel** am besten geeignet.\n\n## Quantile & Quartile\n\nIm Gegensaz zu Median, der die Daten in zwei gleiche Größe aufteilt, wird beim Quantil die ***sortierten*** Daten in unterschiedlich große Abschnitte, nämlich in *$x_p$- Quantile* oder *x% (px100%)- Quantile* aufgeteilt. Diese aufgeteilte abschnitte wären dann Quantile. Zum Beispiel 10%-Quantil oder 0,1-Quantil sagt aus, dass 10% der Daten in der verteilung liegt unter diesem Quantil, und der Rest (1-p, also 90%) liegt darüber. Teilt man die Daten in **vier gleich große Teile**, spricht man von *speziellen Quantilen*, nämlich von **Quartilen**. \n\n  - **0,25/25%-Quantil = untere/erste Qauartil = Q1** - besagt, dass mindestens 25% der n-Daten kleiner oder gleich $x_{0,25}$ sind.\n  \n  - **0,50/50%-Quantil = mittlere/zweite Qauartil = Q2** - gleich Median, mindestens 50% der n-Daten kleiner oder gleich $x_{0,50}$ sind.\n  \n  - **0,75/75%-Quantil = obere/dritte Qauartil = Q3** - besagt, dass mindestens 75% der n-Daten kleiner oder gleich $x_{0,75}$ sind.\n\nBei p = 0.1, 0.2, ... spricht man von *Dezilen*, bei 0.01, 0.02, ... von *Perzentilen*.\n\nAls Beispiel, stellen wir wieder vor, wir machen eine kleine Umfrage und fragen wir 10 Leute danach, wie lange sie am Tag ihre Zeit mit Handy verbringen. Sagen wir, die Antwort wie folgt (die Zahlen sind ausgedacht):\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntime <- c(2.3, 1.7, 3, 2, 2.5, 3.2, 3.4, 1.5, 4, 1)\nsort(time)\n#>  [1] 1.0 1.5 1.7 2.0 2.3 2.5 3.0 3.2 3.4 4.0\nmedian(time)\n#> [1] 2.4\n```\n:::\n\n\nUm die Quartile zu berechnen muss man zu erst die Anzahl der Datenmenge (n) mit p (0.25, 0.50, 0.75) multiplizieren $n*p$. Je nachdem, ob das Ergebis *ganzzahlig* oder *nicht ganzzahlig* ist, muss man für die weitere Berechnung diese Formel benutzen:\n$$x_p = \\begin{cases}\n\\frac{1}{n}(x_{(np)} + x_{(np+1)}) & if (p\\cdot n) &\\text{wholenumbered}\\\\\nx_{(|np|+1)} & if (p\\cdot n)&\\text{not wholenumbered}\\end{cases}$$\nHier ist nochmal die visuelle Darstellung zur Berechnung von Quartilen\n\n![Quartile (25%, 50%, 75%)](pictures/quartil.png){fig-alt=\"Click for zooming\"}\n\nZum Glück muss man das ganze nicht händisch ausrechnen. Dafür gibt es in R die Funktion `quantile()`. Außerdem gibt die Funktion `summary()` *(wie `describe()` in Python)* den ersten Eindruck über den Daten mit den Lagemaßen wie Mean, Median, Q1, Q2 = Median, Q3, Min und Max.\n\n::: {.code-r} \n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n::: {.cell .code-input}\n\n```{.r .cell-code  code-summary=\"show the code\"}\ncat(\"Vector time: Qauartile: 25%-, 50%-, 75%- Quantile\\n\")\nquantile(time)        # Qauartile: 25%-, 50%-, 75%- Quantile\ncat(\"\\nVector time: 0,6- Quantil:\\n\")\nquantile(time, 0.60)  # 60%- Quantil\ncat(\"\\nVector time: Summary\\n\")\nsummary(time)         # Summary for variable income\ncat(\"\\nDescriptive measures with summary() for df:\\n\")\nsummary(df)\n# summary(df$age)     # Summary for selected variable (age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Vector time: Qauartile: 25%-, 50%-, 75%- Quantile\n#>    0%   25%   50%   75%  100% \n#> 1.000 1.775 2.400 3.150 4.000 \n#> \n#> Vector time: 0,6- Quantil:\n#> 60% \n#> 2.7 \n#> \n#> Vector time: Summary\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   1.000   1.775   2.400   2.460   3.150   4.000 \n#> \n#> Descriptive measures with summary() for df:\n#>   profession             age          tall           income    \n#>  Length:9           Min.   :21   Min.   :1.680   Min.   : 950  \n#>  Class :character   1st Qu.:39   1st Qu.:1.720   1st Qu.:1100  \n#>  Mode  :character   Median :51   Median :1.730   Median :2050  \n#>                     Mean   :51   Mean   :1.734   Mean   :2028  \n#>                     3rd Qu.:68   3rd Qu.:1.750   3rd Qu.:2600  \n#>                     Max.   :82   Max.   :1.780   Max.   :3500\n```\n:::\n:::\n\n:::\n\nIn Python gibt es auch die Funktion `quantile()`, man muss in Klammern die gewünschte(n) Quantil(e) in Listenformat eingeben. Die Funktion ist in Pandas oder NumPy.\n\n::: {.code-py}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n::: {.cell .code-output}\n\n```{.python .cell-code  code-summary=\"show the code\"}\nprint(\"Quartile for one variable (age):\")\nr.df[\"age\"].quantile([0.25,0.5,0.75])\nprint(\"\\nQuantile for more variables:\")\nr.df[[\"age\", \"income\", \"tall\"]].quantile([.1, .25, .5, .75], axis = 0)\n# with describe()\nprint(\"\\nDescriptive measures with discribe() for df:\")\n# r.df[[\"age\", \"tall\"]].describe() # for selected variables\nr.df.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Quartile for one variable (age):\n#> 0.25    39.0\n#> 0.50    51.0\n#> 0.75    68.0\n#> Name: age, dtype: float64\n#> \n#> Quantile for more variables:\n#>        age  income   tall\n#> 0.10  24.2  1030.0  1.696\n#> 0.25  39.0  1100.0  1.720\n#> 0.50  51.0  2050.0  1.730\n#> 0.75  68.0  2600.0  1.750\n#> \n#> Descriptive measures with discribe() for df:\n#>              age      tall       income\n#> count   9.000000  9.000000     9.000000\n#> mean   51.000000  1.734444  2027.777778\n#> std    20.621591  0.032059   986.189355\n#> min    21.000000  1.680000   950.000000\n#> 25%    39.000000  1.720000  1100.000000\n#> 50%    51.000000  1.730000  2050.000000\n#> 75%    68.000000  1.750000  2600.000000\n#> max    82.000000  1.780000  3500.000000\n```\n:::\n:::\n\n:::\n\n:::{.callout-note}\n### Interpretation\n\nQuantile oder Quartile gibt einen der ersten Überblick von der Datenverteilung. Dadurch kann man die Aussage treffen, dass eine bestimme Teil der gesamten Verteulung liegt unter oder über ein Quantil/Quartil. Nehmen wir das Beispiel von oben mit dem Handy.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# How many time spent you for handy in a day?\nhandy <- c(2.3, 1.7, 3, 2, 2.5, 3.2, 3.4, 1.5, 4, 1)\n# Quartile\nquantile(handy)\n#>    0%   25%   50%   75%  100% \n#> 1.000 1.775 2.400 3.150 4.000\n# 0.6 Quantil\nquantile(handy, 0.6)\n#> 60% \n#> 2.7\n```\n:::\n\n\nDaraus kann man ablesen, dass drei Viertel (75%) der 10 Befragten verbringen ihre Zeit bis über 3 Stunden mit dem Handy, oder zweite Zahl, 60% der Befragten verschwinden bis 2.7 Stunden am Tag ihrer Zeit mit dem Handy.\n:::\n\n## Box-Plot\n\nBei der deskriptiven Analyse greift man oft zu graphischen Methoden, vor allem, wenn man eien ngroßen Datensatz hat, um ersten Eindruck über das Verhalten der Daten zu gewinnen. Box-Plot kommt am häufgsten zur Anwendung. Er setzt hauptsächlich 5 Kennzahlen ($x_{min}$, $x_{0,25}$, $x_{0,50}$, $x_{0,75}$, $x_{max}$) zusammen und stellt sie graphisch dar, zeigt auch Außreißer. Hier noch eine visuelle Darstellung:\n\n![Box-Plot](pictures/boxplot.png)\n\nIn R gibt es Basefunktion `boxplot()` für Box-Plot. Außerdem kann man auch durch `ggplot`-Package erstellen. In Python auch diese Funktion in den Modeulen `matplotlib` oder `seaborn`.\n\n:::: {.panel-tabset}\n## `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell .code-input}\n\n```{.r .cell-code  code-summary=\"show the code\"}\nboxplot(extrem$age,\n  ylab = \"age\",\n  main = \"A sample Box-Plot\",\n  col= \"azure\")\nabline(h=mean(extrem$age), col=\"tomato1\", lwd=1, lty = 2)\n```\n\n::: {.cell-output-display}\n![](average_de_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n<!-- ## Create a box plot with mean using ggplot2 -->\n<!-- # ggplot(extrem, aes(x=\"\", y=income)) + -->\n<!-- #   geom_boxplot(fill=\"lightblue\", color=\"cadetblue\") + -->\n<!-- #   geom_hline(yintercept = mean(extrem$income), color=\"tomato\", linetype=\"dashed\") + -->\n<!-- #   labs(title=\"Box Plot with Mean using ggplot2\", -->\n<!-- #        y=\"income\") + -->\n<!-- #   theme_minimal() -->\n:::\n\n## `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell .code-output}\n\n```{.python .cell-code  code-summary=\"show the code\"}\nimport matplotlib.pyplot as plt\n\n# Create a boxplot for the desired column\nplt.boxplot(r.extrem[\"age\"], showmeans = True, meanline = True, showfliers = False)\n# Add labels and title\nplt.xlabel(\"\")\nplt.ylabel(\"age\")\nplt.title(\"A sample Box-Plot\")\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> {'whiskers': [<matplotlib.lines.Line2D object at 0x000001C5612BEBA0>, <matplotlib.lines.Line2D object at 0x000001C5612BEE40>], 'caps': [<matplotlib.lines.Line2D object at 0x000001C5612BF140>, <matplotlib.lines.Line2D object at 0x000001C5612BF440>], 'boxes': [<matplotlib.lines.Line2D object at 0x000001C5612BE2A0>], 'medians': [<matplotlib.lines.Line2D object at 0x000001C5612BF740>], 'fliers': [], 'means': [<matplotlib.lines.Line2D object at 0x000001C5612BFA10>]}\n```\n:::\n\n::: {.cell-output-display}\n![](average_de_files/figure-html/unnamed-chunk-17-1.png){width=614}\n:::\n:::\n\n:::\n::::\n\nBoxplot von oben ist für die Variable age (Alter) von der Befragten in dem Beispieldataframe erstellt. Wie man im Plot sieht, sind die Hälfte (50%) der Daten liegen in dam Box (IQR), 25% oberhalb und 25% unterhalb des Boxes (gestrichene Linien ausßerhalb des Boxes im Plot). Man kann es so interpretieren: 50% der Befragten/personen sind zwischen 25 und 68 Jahre alt. Durchgezogene Linie in der Mitte ist Median = 51, und die gestrichene Linie ist Mittelwert = ca.49 (kann man zu Plot hinzufügen, ist nicht Bestandteil von Box-Plot), also kann man daraus eine Schlussfolgerung ziehen, dass durchnittliches Alter von befragten Personen um die 50 Jahre ist. 25% der Personen sind unter 25 Jahren, 25% über 68 Jahre und 50%, wie gesagt, zwischen 25-68 Jahre alt.\n\n## References\n\n\n",
    "supporting": [
      "average_de_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}