{
  "hash": "a4eb88952f56e4c6c20ea4d88a0ca7cc",
  "result": {
    "markdown": "---\ntitle: | \n  R & Python: Data Structures\\\n  {{< fa language >}} in Uzbek\ndescription: | \n  \\\"Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\\\"      <br> ~ Linus Torvalds.\n\nauthor: \"Fazliddin Sultonov\"\ndate: \"2024-05-05\"\ndate-format: \"MMM D, YYYY\"\n\nfilters:\n    - lightbox\nlightbox: \n  match: auto\n  effect: none\n  desc-position: top\n\npage-layout: full\nreference-location: margin\ncategories: [R, Python, Data Structure, Uzbek]\n\n# Code execute options\nexecute: \n  echo: true    # Input anzeigen\n  eval: true    # Code ausführen\n  freeze: true  # never re-render during project render\n\n# Output\nformat: \n  html:\n    theme: cosmo\n    # code\n    # code-line-numbers: true\n    code-fold: true\n    # code-summary: \"show the code\"\n    code-block-border-left: true\n    # Links\n    link-external-icon: false\n    link-external-newwindow: true\n    # Sections\n    toc: true\n    toc-location: left\n    toc-title: \"Table of Contents\"\n    engine: knitr\n    css: style.css\n\n# Chunk Options\nknitr:\n  opts_chunk:\n    comment: \"#>\" \n    #class-output: \"code-output\"\n    #class-source: \"code-input\"\n\n  opts_knit: \n    warning: false\n    error: false\n# bibliography\nbibliography: ref.bib\nnocite: |\n  @*\n---\n\n\n![](pics/datastructure.png){.nolightbox}\n\n\n::: {.cell}\n\n:::\n\n\n\n# Set Up\nUshbu blogda kod bloki ya'ni input [*R da ochiq ko’k *]{style=\"background-color: lightcyan\"} und in [*Python da sariq*]{style=\"background-color: #FFF68F\"} rangda ko’rsatiladi. Output natijalarining satrlari `#>` belgisi bilan boshlanadi.\n\n::::{layout-ncol=2}\n::: {.code-r}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"I useR!\")\n#> I useR!\n```\n:::\n\n:::\n\n::: {.code-py}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(\"I am a Pytonista\")\n#> I am a Pytonista\n```\n:::\n\n:::\n::::\n\nQo'shimcha ma'lumotlar qutiga quyidagi tarzda yozilgan va uni kengaytirish orqali ko'rish mumkin: [Qisqacha tushuncha yoki eslatmalar yon tomonda (o’ngda) izoh kabi keltiriladi.]{.aside}\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## Expand for more\n\nMore Info here!\n:::\n\n# Data Structures\nMa'lumotlarning asosiy turlari mavjud, ular Basic Data Types yoki Built-in Data Types deb ham ataladi. Ular qiymat belgilash yoki o'zgaruvchi ya'ni objecni yaratishda ushbu yaratilayotgan object/o'zgaruvchi qanaqa **qiymatlarni** qabul qilishi va ushbu objectlarga qaysi **amallar** qo'llanilishi mumkinligini aniqlaydi. Misol uchun *42* raqamini *var_number* nomli o'zgaruvchiga yuklash va uni *integer* turi bilan saqlash mumkin. Keyin bu o'zgaruvchi bilan ko'paytirish, qo'shish va boshqa amallarni bajarish mumkin. Shunday ekan, datalarni ya'ni *ma'lumotlarni real muhit haqidagi tizimli ravishda kodlangan informatsiyasi [@r_DMforSocial]* deb hisoblash mumkin.\n[Basic Data Types haqido to'liqroq: [R & Python: Types of Data](/posts/DataTypes_UZ/datatypes_uz.qmd){target=\"_blank\"}.]{.aside} \nMa'lumotlar shundagina bizga foydali bulishi mumkin, qachonki ular saqlash, bo'lishish, tahlil qilish va unga har qanday amal va funksiyalarni qo'llash mumkin bo'lgan formatdga ega bo'lsa. Bu narsalarni, demak ma'lumotlarni boshqarish, qayta ishlash, saqlashni va shu kabi jarayonlarni ***Data Dstructure***, ya'ni ma'lumotlar strukturasi belgilaydi. Yuqordiga fikrlarni mohiyatini [@r_DMforSocial]ga asoslangan misol tariqasida batafsilroq tushunish mumkin.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nraw_data <- \n  \"Germany is a country with 83.3 million population and its capital is\nBerlin; Russia has 144.1 million population, capital of Russia is Moscow;\nAnother country is Uzbekistan with 35.5 million residents, its capital is\nTashkent.The last country is the USA with 341.2 million residents,\nthe capital is Washington, D.C.\"\n```\n:::\n\n\n[Misolda Germaniya, O'zbekiston, Rossiya va AQSh da 2023 yildagi aholi soni, [@worldpop] web saytidan  olingan.]{.aside}\n\nBiz asosan *raw_data* objectini to'rtta mamlakat, ularning poytaxtlari va aholisi haqida ma'lumotni o'z ichiga olgan ma'lumotlar bazasi sifatida ko'rishimiz mumkin. Inson uchun bu matn shaklida saqlangan ma'lumotdan informatsiya ajratib olishi oson, masalan, qaysi mamlakat aholisi ko'proq, aholi sonlari ichida maximum yoki minimumi qaysi va hokazo. Lekin kompyuterlar uchun uni hisoblash yo'li bilan qayta ishlash tushunarli emas, chunki ma'lumotlar hech qanday *tuzilma*ga, ya'ni *struktura*ga ega emas. Ammo biz aynan shu matnni tarkibini o'zgartirmasdan boshqa shaklda, demak ma'lum bir tuzilishda, masalan *dataframe* shaklida saqlashimiz mumkin. Bunday holda ma'lumotlar kompyuterga tushunarli bo'ladi, ular ustida amallarni bajarib, ularni qayta ishlay oladi.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\ndf_r <- data.frame(\n  country = c(\"Germany\", \"Uzbekistan\", \"Russia\", \"USA\"),\n  population = c(83.3, 35.5, 144.1, 341.2),\n  capital = c(\"Berlin\", \"Tashkent\", \"Moscow\", \"Washington\")\n)\ndf_r\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>      country population    capital\n#> 1    Germany       83.3     Berlin\n#> 2 Uzbekistan       35.5   Tashkent\n#> 3     Russia      144.1     Moscow\n#> 4        USA      341.2 Washington\n```\n:::\n:::\n\n\nIkkinchi misolda ma'lumotlar R dagi `data.frame` paketi orqali object (df_r) sifatiqda saqlangan. R da bu, Python dayam buning uchun `pandas` moduli bo'lgani kabi, ma'lumotlarni jadval shaklida saqlaydigan ma'lumotlar tuzilmasi hisoblanadi. Misolda har bir mamlakatda turli xil shakldagi ma'lumotlar mavjud. *County* va *Capital* - matn shaklida (R da character, Python da string), *Population* - real son shaklida (R da numeric/double, Python da float). Birinchi misolda oddiy matn *(raw_data)* sifatida saqlangan ma'lumotlar bilan taqqoslaganda, dataframe yoki jadval *(df_r)* sifatida saqlangan ma'lumotlarni tushunish va qayta ishlash (komputer uchun) osonroq.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\n# Sum of population\nglue(\"Sum of population: {sum(df_r$population)}\")\n# Max of Population\nglue(\"Max of Population: {max(df_r$population)}\")\ncat(\"\\n\")\n# Summary of Data\nglue(\"Summary of data:\")\nsummary(df_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Sum of population: 604.1\n#> Max of Population: 341.2\n#> \n#> Summary of data:\n#>    country            population       capital         \n#>  Length:4           Min.   : 35.50   Length:4          \n#>  Class :character   1st Qu.: 71.35   Class :character  \n#>  Mode  :character   Median :113.70   Mode  :character  \n#>                     Mean   :151.03                     \n#>                     3rd Qu.:193.38                     \n#>                     Max.   :341.20\n```\n:::\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nimport pandas as pd\ndf_py = pd.DataFrame(r.df_r)\n# Sum of population\nprint(f\"Sum of population: {df_py[\"population\"].sum()}\")\n# Sum of population\nprint(f\"Sum of population: {df_py[\"population\"].max()}\\n\")\n# Summary of Data\nprint(\"Summary of data:\")\ndf_py.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Sum of population: 604.0999999999999\n#> Sum of population: 341.2\n#> \n#> Summary of data:\n#>        population\n#> count    4.000000\n#> mean   151.025000\n#> std    134.346799\n#> min     35.500000\n#> 25%     71.350000\n#> 50%    113.700000\n#> 75%    193.375000\n#> max    341.200000\n```\n:::\n:::\n\n:::\n::::\n\n# How is the data are structured in R and Python\n\nMa'lumotni qayerda, R yoki Python da, qayta ishlasak ham, u ikkala tilda ham ***Object*** sifatida saqlanadi. Objectlar, masalan, qiymatni (object) o'zgaruvchiga (object nomi) belgilash orqali yaratilishi mumkin. Aytaylik, biz *age* deb nomlangan objectni yaratamiz va unga *35* (yosh) qiymatini beramiz: `age <- 35` (R da) und `age = 35` (Python da). Lekin ko'pincha biz minglab objectlarni birma-bir qo'lda yaratishni (age1, age2, age3, ...) xohlamaymiz, aksincha barcha *yosh (object)*-larni (ya'ni age1, age2, ...), o'z ichiga olgan *ages* deb nomlangan ro'yxat shaklida bo'lsa bizga qulayroq. Ikkinchi usulda bu ***guruhlangan ma'lumotlar strukturasi (grupped data structure)***ga, ya'ni bir nechta alohida objectlardan tashkil topgan objectga aylanadi. Bunaqa strukturaga ega bo'lgan, ***Lists***, ***Vectors***, ***Arrays***, ***Series***, ***Dictionaries*** etc. kabi turli xil objectlar mavjud. Ular formati, tuzilishi, metodi va boshqalar bilan farqlanadi, lekin asosiy mohiyati bir xil: *bir nechta objectlar guruhlangan yoki birlashtirilgan objectda (yuqoridagi ma'lumotlar tuzilmalaridan birning shaklida) saqlanadi*.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nages_r <- c(35, 24, 42, 24, 52, 35, 37)\nnames_r <- c(\"Ali\", \"Temur\", \"Ben\", \"Brandon\", \"John\", \"Doe\", \"Dirk\")\nages_r\nclass(ages_r)   # Type of ages_r\nnames_r\nclass(names_r)  # Type of names_r\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 35 24 42 24 52 35 37\n#> [1] \"numeric\"\n#> [1] \"Ali\"     \"Temur\"   \"Ben\"     \"Brandon\" \"John\"    \"Doe\"     \"Dirk\"   \n#> [1] \"character\"\n```\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## More about `c()` in R\n\nR da ketma-ketliklar `c()` *(c- combine)* yordamida yaratiladi. Python da objectlar yoki ma'lumotlarni `[]` shaklida kiritiladi.\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nages_py = [35, 24, 42, 24, 52, 35, 37]\nnames_py = [\"Ali\", \"Temur\", \"Ben\", \"Brandon\", \"John\", \"Doe\", \"Dirk\"]\nprint(ages_py)\ntype(ages_py)    # Type of ages_py\nprint(names_py)\ntype(names_py)   # Type of names_py\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [35, 24, 42, 24, 52, 35, 37]\n#> <class 'list'>\n#> ['Ali', 'Temur', 'Ben', 'Brandon', 'John', 'Doe', 'Dirk']\n#> <class 'list'>\n```\n:::\n:::\n\n:::\n::::\n\nYuqoridagi misol tariqasida yaratilgan ro'yxatlar (ages, names) R va Python da o'xshash, faqat bu objectlar R da  **Vector**, Python da **List** deb ataladi. Lekin R va Python da ro'yxatlardan tashqari boshqa ma'lumotlar tuzilmalari ham mavjudki, ular xususiyatlari jihatidan bir biriga o'xshaydi yoki farq qiladi. Ma'lumotlar tuzilmalarini R va Python da o'xshash yoki farq nuqtai nazaridan solishtirganda, [muhimi narsa bu objectlarning *bir hil (homogeneous)* yoki *har hil (heterogeneous)* bo'lishi]{style=\"color:red;\"}dir, manimcha. \n[**homogeneous** -- (однородный) objectlar bir xil turda bo'ladi (barcha objectlar faqat raqamlar yoki matnlarddan iborat), masalan R dagi Vector, NumPy dagi arraylar yoki Python dagi faqat *bir xil turdagi ma'lumot turlaridan iborat bo'lgan ro'yxatlar*. Vektoren in R oder NumPy-Arrays oder Liste *mit gleichen Datentypen* in Python\\n\n**heterogeneous** -- (неоднородный) objectlar har xil turda bo'ladi, R dagi list, Python dagi list (har xil turdagi objectlaR dan tashkil topgan) yoki dictionary]{.aside}\n\n## Data Structure in R\n\nR dagi muhim ma'lumotlar tuzilmalari ikkita asosiy tamopyil bilan aniqlanishi mumkin. Biri bu **o'lcham (dimension)**, ya'ni objectning qancha o'lchamga ega ekanligi bilan: bitta o'lchovli (vevtor), ikkita o'lchovli (matritsa) va undan ko'p (massivlar). Yana biri bu ularning farqlanish xususiyatlari, ya'ni biror objectning elementlari **bir xil** - masalan faqar matn yoki faqat sonlaR dan iborat, yoki **har xil** - son va matnlaR dan iborat. Ushbu xususiyatlarga asoslanib, markaziy object turlarini R da quyidagicha umumlashtirish mumkin [@r_ModernDA]:\n\n| Dimension | Homogen | Heterogen |\n|:---|:---|:---|\n| 1d | Vector | List |\n| 2d | Matrix | Dataframe |\n| nd | Array |  |\n\nVektorlar R dagi eng muhim ma'lumotlar tuzilmalaridan biri bo'lib, R objectlarida markaziy elementni ifodalaydi: To'rt turdagi atomik yoki sof vektorlar mavjud: `Logical`, `Integer`, `Double` und `Character` (matndan iborat). R da *integer* va *double* turidagi ma'lumotlar `numeric` sifatida umumlashtirilgan, yani ikkovi ham numeric sifatida ko'rsatiladi.\nQuyida [@r_AdvancedR]ga ko'ra atomar ya'ni sof vektorlarining umumiy ko'rinishi keltirilgan.\n\n![Atomar Vectors](pics/ds_r.png){fig-alt=\"Click for zooming\"}\n\n## Data Structure in Python\n\nDemak, ma'lumotlar tuzilmalari ma'lumotlarni turlari bo'yicha tartibga soluvchi va guruhlaydigan \"konteynerlar\" sifatida qaralsa boladi.\nPython dagi asosiy Python ma'lumotlar tuzilmalari ro'yxat (list), to'plam (set), kortej (tuple) va lug'at (dict) larni o'z ichiga oladi. Bu ma'lumotlar tuzilmalari *Built-in Data Structure* deb ham ataladi va ularning har biri o'ziga xos xususiyatga ega. \n  <br> - `lists`\n  <br> - `ditionaries`\n  <br> - `tuples`\n  <br> - `sets`\n  \n  \n<br>Bundan tashqari Arrays va Dataframes(Jadvallar) mavjud bo'lib, ular qator va ustunlarga ega. Bunga o'xshash misol qilib, Excel-jadvallari yoki ma'lumotlar bazasini keltirisch mumkin.\n  <br> - `arrays` from NumPy (Numerical Python)\n  <br> - `DataFrame` from Pandas\n  \n\nQuyida malumotlar tuzilmasini R va Python da umumlashtirilgan holatda vizual tarzda grafikda tasvirlangani keltirilgan \n\n:::: {.column-screen-inset}\n:::{layout-ncol=2}\nManbaa: [Internet](https://r.qcbs.ca/workshop01/pres-en/workshop01-pres-en.html#100){target=\"_blank\"}\n![](pics/r_ds.png){fig-alt=\"Click for zooming\"}\n\nManbaa: [Internet](https://www.linkedin.com/posts/venkateshpappakrishnan_data-structures-in-python-python-for-aspiring-activity-6447685118260756480-rU36/?trk=public_profile_like_view){target=\"_blank\"}\n![](pics/py_ds.png){fig-alt=\"Click for zooming\"}\n:::\n::::\n\n# Homogeneous data structure\n\nYuqorida aytib o'tilganidek, bir hil ma'lumotlar tuzilmalari bir xil turdagi ma'lumotlarni (objectlar yoki elementlarni) o'z ichiga oladi. Ko'pincha ma'lumotlar shu tarzda saqlanadi. Bunday turdagi ma'lumotlarga R dagi vektorlarni (Python dagi 1d-NumPy-Massivlar), matrisalarni (Python dagi 2d-NumPy-Massivlar) va massivlarni (Python dagi nd-NumPy-Massivlar) misol qilish mumkin.\n\n## `vector` in R and `arrays` & `Series` in Python\n\nR dagi vektorlar bi xil tudagi ma'lumotlarga ega bo'lgan bir o'lchovli ma'lumot tizilmalaridir. Bu belgilari bilan vektorlar Python dagi 1d-NumPy-Arrays va Pandas-Series lar bilan umumiy xususiyatga ega. R dagi vektorlar ham Python dagi ro'yxatga (list) o'xshaydi, *lekin faqat Python ro'yxatidagi ma'lumotlar bir xil turga ega bo'lsa*.\n\n<!-- [Achrung!]{style=\"color:red;\"} --  -->\n\n### Creating\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n-- with `c()` (like `[]` in Python)\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nv1 <- c(1, 7, 2, 4, 5, 8, 2, 9); v1\nclass(v1)\nv2 <- c(\"a\", \"b\", \"c\", \"z\", \"f\"); v2\nclass(v2)\nv3 <- vector(\"logical\", 5); v3\nclass(v3)\nv4 <- numeric(7); v4\nclass(v4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 1 7 2 4 5 8 2 9\n#> [1] \"numeric\"\n#> [1] \"a\" \"b\" \"c\" \"z\" \"f\"\n#> [1] \"character\"\n#> [1] FALSE FALSE FALSE FALSE FALSE\n#> [1] \"logical\"\n#> [1] 0 0 0 0 0 0 0\n#> [1] \"numeric\"\n```\n:::\n:::\n\n:::\n\n-- with `seq(from, to, by)` (like `range(from, to, by)` in Python or `arange()` from NumPy)\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nseq1 <- 2:9; seq1                            # from 2 to 9\nseq2 <- (1:5); seq2                          # from 1 to 5\nseq3 <- seq(from = 3, to = 10, by = 3); seq3 # step = 3\nseq4 <- seq(3, 10, length.out = 5); seq4     # count = 5\nseq5 <- seq(11, 17, along.with = seq4); seq5 # seq of same length with seq4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 2 3 4 5 6 7 8 9\n#> [1] 1 2 3 4 5\n#> [1] 3 6 9\n#> [1]  3.00  4.75  6.50  8.25 10.00\n#> [1] 11.0 12.5 14.0 15.5 17.0\n```\n:::\n:::\n\n:::\n\n-- with `rep()` (like `np.repeat()` from NumPy or `pd.rep()` from Pandas)\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nrep1 <- rep(1:3, times = 3); rep1 # repeating seq 3 times\nrep2 <- rep(1:3, each = 3); rep2  # repeating each obj 3 times\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 1 2 3 1 2 3 1 2 3\n#> [1] 1 1 1 2 2 2 3 3 3\n```\n:::\n:::\n\n:::\n\n\n-- with `sample()` or `runif()` (like `random.choice()` from NumPy) \n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nsmp1 <- sample(seq(10), size = 5, replace = FALSE); smp1\nvec <- c(\"negative\",\"neutral\", \"positive\")\nsmp2 <- sample(vec, size = 5, replace = TRUE); smp2\n# vector with 5 elements:\nrun1 <- runif(5); run1\nrun2 <- runif(3, min = 1, max = 10); run2\nrun3 <- floor(runif(15, min=1, max=100)); run3\n# normal distribution\nrn <- rnorm(5); rn\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  7 10  1  3  4\n#> [1] \"positive\" \"negative\" \"positive\" \"positive\" \"neutral\" \n#> [1] 0.95313409 0.35566757 0.88442306 0.41873879 0.02320239\n#> [1] 5.680343 4.965428 7.834346\n#>  [1] 69 20 64 65 18 79 72 18 46  4  6 95 57 36 77\n#> [1]  0.6243818 -0.8427729  0.7833794  0.8994189 -0.5025541\n```\n:::\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n-- with `[]` like `c()` in R\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nimport numpy as np\n\nv1_p = [1, 7, 2, 4, 5, 8, 2, 9]; print(v1_p)\ntype(v1_p)\nv2_p = np.full((5), False); print(v2_p)\ntype(v2_p)\nv3_p = np.zeros((7), int); print(v3_p)\ntype(v3_p)\nv4_p = np.ones((7), int); print(v4_p) # rep(1,7) in R\ntype(v4_p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1, 7, 2, 4, 5, 8, 2, 9]\n#> <class 'list'>\n#> [False False False False False]\n#> <class 'numpy.ndarray'>\n#> [0 0 0 0 0 0 0]\n#> <class 'numpy.ndarray'>\n#> [1 1 1 1 1 1 1]\n#> <class 'numpy.ndarray'>\n```\n:::\n:::\n\n:::\n\n-- with `arange()` like `seq()` in R\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nar1 = [x for x in range(5)]; ar1                # pythonlist\nar2 = [x for x in range(2,10)]; ar2             # python list\nar3 = np.arange(2,10); ar3                      # NumPy 1d array\nar4 = np.arange(3, 10, 3); ar4                  # step = 3 \nar5 = np.linspace(3, 10, 5, retstep = True);ar5 # count = 5, with step = 1.75    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [0, 1, 2, 3, 4]\n#> [2, 3, 4, 5, 6, 7, 8, 9]\n#> array([2, 3, 4, 5, 6, 7, 8, 9])\n#> array([3, 6, 9])\n#> (array([ 3.  ,  4.75,  6.5 ,  8.25, 10.  ]), 1.75)\n```\n:::\n:::\n\n:::\n\n-- with `np.repeat()` or `pd.Series.repeat()` like `rep()` in R\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nimport pandas as pd\n\nrep1 =  list(range(1,4))*3; rep1             # Python\nrep2 = np.tile(np.arange(1,4), 3); rep2      # NumPy: repeating seq 3 times\nrep3 = np.repeat(np.arange(1,4), 3); rep3    # NumPy: repeating each obj 3 times\nrep4 = pd.Series(range(1,4)).repeat(2); rep4 # Pandas Series: repeating each obj 2 times\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1, 2, 3, 1, 2, 3, 1, 2, 3]\n#> array([1, 2, 3, 1, 2, 3, 1, 2, 3])\n#> array([1, 1, 1, 2, 2, 2, 3, 3, 3])\n#> 0    1\n#> 0    1\n#> 1    2\n#> 1    2\n#> 2    3\n#> 2    3\n#> dtype: int64\n```\n:::\n:::\n\n:::\n\n-- with `random()`  like `sample()` or `runif()` in R\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nfrom numpy import random\nlis = [\"negative\",\"neutral\", \"positive\"]\nrd1 = random.choice(lis, size=5, replace = True); print(rd1)\nrd2 = random.rand(5); rd2                 # 5 random numbers\nrd3 = random.randint(100, size=(5)); rd3  # integer random numbers from 0 to 100\nrd4 = random.randn(4); rd4                # standard normal distribution\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> ['neutral' 'negative' 'negative' 'negative' 'positive']\n#> array([0.10915441, 0.72793895, 0.73971022, 0.70089082, 0.30870088])\n#> array([ 6, 69,  6, 17, 11])\n#> array([-0.77751733, -0.65976308, -0.81899014,  0.12107833])\n```\n:::\n:::\n\n:::\n::::\n\n### Slicing\n\nVektorlar, ro'yxatlar va bir o'lchovli massivlarga qo'llanilishi mumkin bo'lgan eng muhim foydali operatsiyalaR dan biri *indekslash*dir. Bunda biz alohida elementlarni yoki elementlaR dan iborat kichik to'plamlarini joylashuvi *(indeks)* bo'yicha ajratib olishimiz mumkin.\n\n::: {layout-ncol=2}\n[Birinchi Elementning indksi R da -- **` 1 `**,  Python da -- **` 0 `**, ya'ni Elementlar joylashuvi R da biR dan, Python da esa noldan boshlanadi.]{style=\"background-color:yellow;\"} Vektor, ro'yxat yoki 1d - massivning uzunligini R da `length(Obj)` funksiyasi va Python da `len(Obj)` funksiyasi yoR damida aniqlash mumkin.\n\n![Indexes in R and Python](pics/index.png){fig-alt=\"Click for zooming\"}\n:::\n\n::: {layout-ncol=2}\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# In Python\nlst = [1,3,5,7]\nlst[0]     # first element\nlst[1]     # second element\nlst[-1]    # last element\nlst[::-1]  # backward\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 1\n#> 3\n#> 7\n#> [7, 5, 3, 1]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# In R\n# Used Variable lst created in Python Chunk\npy$lst[1]                # first element\npy$lst[2]                # second element\npy$lst[[length(py$lst)]] # last element\nrev(py$lst)              # backward\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 1\n#> [1] 3\n#> [1] 7\n#> [1] 7 5 3 1\n```\n:::\n:::\n\n:::\n\nQuyida to'plamlar va mantiqiy indekslashga yana misollar keltirilgan. Mantiqiy indekslashda mantiqiy qiymati TRUE bo'lgan elementlar qaytariladi.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nage <- c(18, 26, 32, 41, 55, 22, 35, 37, 20, 25)\nage[1:5]             # from first until fifth element\nage[3:7]             # from third until seventh element\nage[5:length(age)]   # from fifth until last element\nage[c(2,5,7)]        # second, fifth and seventh element\nage < 30             # logic \nage[age < 30]        # age under 30\nage[which(age < 30)] # with which()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 18 26 32 41 55\n#> [1] 32 41 55 22 35\n#> [1] 55 22 35 37 20 25\n#> [1] 26 55 35\n#>  [1]  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE\n#> [1] 18 26 22 20 25\n#> [1] 18 26 22 20 25\n```\n:::\n:::\n\n:::\n\nElementlarga nomi bilan ham murojaat qilinishimiz mumkin, lekin faqat ular nomlangan bo'lsa (Chunki R da vektor yoki list elementlari nomlanishi yoki nomlanmasligiyam mumin). Buni Pandas-Series da indeks nomi bo‘yicha elementlarni tanlash orqali ham qilish mumkin:\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nnote <- c(\"best\" = 5, \"medium\" = 4, \"good\"= 3, \"bad\" = 2); note\nnote[\"medium\"]         # by indexname\nnote[c(\"good\", \"bad\")] # by indexname multiple elements\nnote[3]                # by index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   best medium   good    bad \n#>      5      4      3      2 \n#> medium \n#>      4 \n#> good  bad \n#>    3    2 \n#> good \n#>    3\n```\n:::\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nage = np.array(r.age)    # create array from r vector age\nage[:5]                  # from first until fifth element\nage[2:7]                 # from third until seventh element\nage[4:]                  # from fifth until last element\n[age[2], age[5], age[7]] # second, fifth and seventh elem\nage < 30                 # logic \nage[age < 30]            # age under 30\nage[np.where(age<30)]    # with np.where()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> array([18., 26., 32., 41., 55.])\n#> array([32., 41., 55., 22., 35.])\n#> array([55., 22., 35., 37., 20., 25.])\n#> [32.0, 22.0, 37.0]\n#> array([ True,  True, False, False, False,  True, False, False,  True,\n#>         True])\n#> array([18., 26., 22., 20., 25.])\n#> array([18., 26., 22., 20., 25.])\n```\n:::\n:::\n\n:::\n\nPandas-Series da ham elementlarga ularning joylashuvi yoki nomi bilan murojaat qilish mumkin, R dagi *named vector*dagi kabi.\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nnote = pd.Series(range(2,6), index = [\"bad\", \"good\", \"medium\", \"best\"]); note\nnote[\"good\"]  # by indexname\nnote[[\"best\", \"bad\"]] # by indexname multiple elements\nnote.iloc[2]          # by index\nnote.iloc[[1,2,3]]    # by index multiple elements\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> bad       2\n#> good      3\n#> medium    4\n#> best      5\n#> dtype: int64\n#> 3\n#> best    5\n#> bad     2\n#> dtype: int64\n#> 4\n#> good      3\n#> medium    4\n#> best      5\n#> dtype: int64\n```\n:::\n:::\n\n:::\n::::\n\n## `matrix` in R and `2d-Array` in Python\n\nR da matrisalar bu ikki o'lchamli vektorlar bo'lib, sonlaR dan iborat va shu bilan birga bir xil turdagi elementlaR dan tashkil topgan. Ularni `matrix(data, nrow, ncol)` funksiyasi yoR damida yaratish mumkin.\\n\nPython da matritsalar yaratish uchun aniq funktsiya yo'q. Python dagi matritsalar asosan *2d-NumPy -massivlaridir*. Elementlarni ajratish uchun vektorlar yoki 1d-NumPy-massivlari ga qo'llanadiga metodlar qo'llaniladi (oldingi bob), demak qator indeksiga qo'shimcha ravishda ustun indeksi ham to'rtburchakli qavsga `[]` kiritiladi.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nmatrix_c <- matrix(seq(12), nrow = 3, ncol = 4, byrow = FALSE )\ncat(\"3x4-Matix filling by columns (matrix_c):\\n\");print(matrix_c)\n# Dimension of matrix_c\nglue(\"Dimension of matrix_c: {dim(matrix_c)}\")\n# Counts of rows & Cols from matrix_c\nglue(\"Shape of matrix_c: ({nrow(matrix_c)}, {ncol(matrix_c)})\")\nmatrix_r <- matrix(seq(12), nrow = 4, ncol = 3, byrow = TRUE )\ncat(\"\\n4x3-Matix filling by rows (matrix_r):\\n\");print(matrix_r)\n# Dimension of matrix_r\nglue(\"Dimension of matrix_r: {dim(matrix_r)}\")\n# Counts of rows & Cols from matrix_r\nglue(\"Shape of matrix_r: ({nrow(matrix_r)}, {ncol(matrix_r)})\")\n#\ncat(\"\\nSlicing:\\n\")\nmatrix_c[2,3]        # row 2, col 3\nmatrix_c[,4]         # column 4\nmatrix_c[, c(2, 4)]  # columns 2 and 4\nmatrix_r[2,]         # row 2\n# Name cols & rows\ncat('\\nname the columns and rows of matrix \"matrix_r\":\\n')\ncolnames(matrix_r) <- c(\"col1\", \"col2\", \"col3\")\nrownames(matrix_r) <- c(\"row1\", \"row2\", \"row3\", \"row4\")\nmatrix_r\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 3x4-Matix filling by columns (matrix_c):\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    4    7   10\n#> [2,]    2    5    8   11\n#> [3,]    3    6    9   12\n#> Dimension of matrix_c: 3\n#> Dimension of matrix_c: 4\n#> Shape of matrix_c: (3, 4)\n#> \n#> 4x3-Matix filling by rows (matrix_r):\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n#> Dimension of matrix_r: 4\n#> Dimension of matrix_r: 3\n#> Shape of matrix_r: (4, 3)\n#> \n#> Slicing:\n#> [1] 8\n#> [1] 10 11 12\n#>      [,1] [,2]\n#> [1,]    4   10\n#> [2,]    5   11\n#> [3,]    6   12\n#> [1] 4 5 6\n#> \n#> name the columns and rows of matrix \"matrix_r\":\n#>      col1 col2 col3\n#> row1    1    2    3\n#> row2    4    5    6\n#> row3    7    8    9\n#> row4   10   11   12\n```\n:::\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nmatriks_c = np.arange(1,13).reshape(3,4, order = \"F\")\nprint(f\"3x4-Matix filling by columns (matriks_c):\\n{matriks_c}\")\n# Dimension of matrix matriks_c\nprint(f\"Dimension of matrix matriks_c: {matriks_c.ndim}\")\n# Counts of rows & Cols from matriks_c\nprint(f\"Shape of matriks_c: {matriks_c.shape}\")\n# np.shape(matriks_c)[0]; np.shape(matriks_c)[1]\nmatriks_r = np.arange(1,13).reshape(4,3, order = \"C\")\nprint(f\"\\n4x3-Matix filling by rows (matriks_r):\\n{matriks_r}\")\n# Dimension of matrix matriks_r\nprint(f\"Dimension of matrix matriks_r: {matriks_r.ndim}\")\n# Counts of rows & Cols from matriks_r\nprint(f\"Shape of matriks_r: {matriks_r.shape}\")\n# np.shape(matriks_r)[0]; np.shape(matriks_r)[1]\n#\nprint(\"\\nSlicing:\")\nmatriks_c[1,2]      # row 2, col 3\nmatriks_c[:, 3]     # column 4\nmatriks_c[:, [1,3]] # columns 2 and 4\nmatriks_r[1, :]     # row 2\n# Name cols & rows\nprint('\\nname the columns and rows of matrix \"matriks_r\":')\ncolnames = [\"col1\", \"col2\", \"col3\"]\nrownames = [\"row1\", \"row2\", \"row3\", \"row4\"]\npd.DataFrame(matriks_r, columns = colnames, index = rownames)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 3x4-Matix filling by columns (matriks_c):\n#> [[ 1  4  7 10]\n#>  [ 2  5  8 11]\n#>  [ 3  6  9 12]]\n#> Dimension of matrix matriks_c: 2\n#> Shape of matriks_c: (3, 4)\n#> \n#> 4x3-Matix filling by rows (matriks_r):\n#> [[ 1  2  3]\n#>  [ 4  5  6]\n#>  [ 7  8  9]\n#>  [10 11 12]]\n#> Dimension of matrix matriks_r: 2\n#> Shape of matriks_r: (4, 3)\n#> \n#> Slicing:\n#> 8\n#> array([10, 11, 12])\n#> array([[ 4, 10],\n#>        [ 5, 11],\n#>        [ 6, 12]])\n#> array([4, 5, 6])\n#> \n#> name the columns and rows of matrix \"matriks_r\":\n#>       col1  col2  col3\n#> row1     1     2     3\n#> row2     4     5     6\n#> row3     7     8     9\n#> row4    10    11    12\n```\n:::\n:::\n\n:::\n::::\n\n## Multidimensional arrays\n\nR dagi (ko'p o'lchamli) massivlar `array(vector, dim = c(nrow, ncol, nmat))` funksiyasi yoR damida yaratiladi. Bunda *Vektor* - bir xil turdagi ma'lumotlar qatori, *nrow* va *ncol* - satr va ustun raqamlari, *nmat* - o'lchamni, ya'ni massivdagi `nrow*ncol` matritsalar sonini bildiradi.\n\nPython da massivlar yaratish uchun `numpy.arange()`, `numpy.zeros()`, `numpy.ones()` kabi bir nechta funksiyalar mavjud. Quyida R va Python da 3D massiv, shuningdek, elementlarni kesish yoki ajratish (slicing) va qator va ustunlarning yig'indini hisoblash ko'rsatilgan.\n\nQuyida 3D massivda slicing  va ushbu massivda yig'indini hisoblash misoli tariqasida vizual va amaliy ravishda keltirilgan.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n\n![3d Array with twice 3x4 2d-Arrays](pics/arr_r.png){fig-alt=\"Click for zooming\"}\n\n**Slicing** <br>\nVektorlar hamda 1d- yoki 2d- massivlaR da bo'lgani kabi, 3D massivlaR da ham massivdan alohida biror elementni yoki bir necha elementladan iborat biror to'plamni ajratib ya'ni kesib olish mumkin. Bunda element indeksi yoki elementlar indekslari bizga tanish bo'lgan kvadrat qavslar `[]` ichiga kiritiladi. Yuqoridagi rasmda misol qilib keltirilgan massiv shape = (3, 4, 2) shakl yoki formatga ega. Buni R dagi `dim(array)` va Python dagi `array.shape` funksiyalari orqali aniqlash mumkin. Qavs ichidagi sonlar: 3 - qator, 4 - ustun va 3 - o'lchamni bildiradi. Bu degani, misolda keltirilgan massiv 3 ta qator va 4 ta ustundan iborat ikkita matrisadan tashkil topgan. Indekslashda to'g'ri pozitsiyani kiritish kerak bo'ladi, ya'ni (R da) kvadrat qavsga birinchi qator positsiyasi, ikkinchi ustun va uchunchi matrisa positsiyani berish kerak. Masalan, `arr_r[, , 2]` barcha satr va ustunlar bilan ikkinchi matritsani qaytaradi. Matrisalarni arraydagi qatlam deb tasavvur qilsayam bo'ladi, misoldagi array demak 2 ta qatlam yani matrisalaR dan iborat (3 qator 4 ustun bilan).\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\n# Create 3d-array\narr_r <- array(c(0:23), dim = c(4,3,2))\narr_r <- aperm(arr_r, perm = c(2,1,3))\ncat(\"3d-Array:\")\narr_r\ncat(\"Shape: \",dim(arr_r), \"\\n\")\ncat(\"\\n1st matrix/2d-Array of the 3d-Array (arr_r):\\n\")\narr_r[, , 1]\ncat(\"\\nElement in 2nd row and 1st col of the 2nd matrix from 3d-Array (arr_r):\\n\")\narr_r[2, 1, 2]\ncat(\"\\n3rd column elements of the 2nd matrix from 3d-Array (arr_r):\\n\")\narr_r[, c(3), 2]\ncat(\"\\n2nd row elements of the 1st matrix from 3d-Array (arr_r):\\n\")\narr_r[c(2), , 1]\ncat(\"\\nCheck if elemnt (9) exist in the array:\\n\")\n9 %in% arr_r\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 3d-Array:, , 1\n#> \n#>      [,1] [,2] [,3] [,4]\n#> [1,]    0    1    2    3\n#> [2,]    4    5    6    7\n#> [3,]    8    9   10   11\n#> \n#> , , 2\n#> \n#>      [,1] [,2] [,3] [,4]\n#> [1,]   12   13   14   15\n#> [2,]   16   17   18   19\n#> [3,]   20   21   22   23\n#> \n#> Shape:  3 4 2 \n#> \n#> 1st matrix/2d-Array of the 3d-Array (arr_r):\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    0    1    2    3\n#> [2,]    4    5    6    7\n#> [3,]    8    9   10   11\n#> \n#> Element in 2nd row and 1st col of the 2nd matrix from 3d-Array (arr_r):\n#> [1] 16\n#> \n#> 3rd column elements of the 2nd matrix from 3d-Array (arr_r):\n#> [1] 14 18 22\n#> \n#> 2nd row elements of the 1st matrix from 3d-Array (arr_r):\n#> [1] 4 5 6 7\n#> \n#> Check if elemnt (9) exist in the array:\n#> [1] TRUE\n```\n:::\n:::\n\n:::\n\n**Operations** <br>\nR dagi massivlar yig'indisini hisoblash uchun `rowSums()` - satrlar yig'indisi, `colSums()` - ustunlar yig'indisi, funksiyalaridan foydalanish mumkin. R da ham Python dagi kabi `sum()` funksiyasi mavjud, lekin bu yeR da buni `apply` funksiyasi bilan birga qo'llash kerak.\n\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\ncat(\"3d-Array:\")\narr_r\ncat(\"Sum by row-wise with rowSums:\\n\")\nrowSums(arr_r)\ncat(\"\\nSum by row-wise with apply, same like rowSums:\\n\")\napply(arr_r, c(1), sum)\ncat(\"\\nSum by column-wise with colSums:\\n\")\ncolSums(arr_r)\ncat(\"\\nSum by column-wise with apply\\n\")\napply(arr_r, c(2), sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 3d-Array:, , 1\n#> \n#>      [,1] [,2] [,3] [,4]\n#> [1,]    0    1    2    3\n#> [2,]    4    5    6    7\n#> [3,]    8    9   10   11\n#> \n#> , , 2\n#> \n#>      [,1] [,2] [,3] [,4]\n#> [1,]   12   13   14   15\n#> [2,]   16   17   18   19\n#> [3,]   20   21   22   23\n#> \n#> Sum by row-wise with rowSums:\n#> [1]  60  92 124\n#> \n#> Sum by row-wise with apply, same like rowSums:\n#> [1]  60  92 124\n#> \n#> Sum by column-wise with colSums:\n#>      [,1] [,2]\n#> [1,]   12   48\n#> [2,]   15   51\n#> [3,]   18   54\n#> [4,]   21   57\n#> \n#> Sum by column-wise with apply\n#> [1] 60 66 72 78\n```\n:::\n:::\n\n:::\n\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n\n![3d Array with twice 3x4 2d-Arrays](pics/arr3d.png){fig-alt=\"Click for zooming\"}\n\n**Slicing** <br>\n`array.shape` funksiyasi yuqoridagi misoldagi massivdan = (2, 3, 4) shaklini qaytaradi. Ya'ni, birinchi son - 2, o'lchamni, ikkinchi son - 3, qatorni va uchinchi son - 4, ustunni qaytariyapti. Bu massivda har birida 3 ta satr va 4 ta ustundan iborat 2 ta matritsa borligini bildiradi. Tasavvur qiling, bitta kubik bor. Agar biz shu kubikni o'rtasidan kessak, ikkita matrisa yoki 2d_massivga ajraladi. Har bir matrisani massivning qatlami yoki jadvali (layer/sheet) deb tasavvur qisa bo'ladi. Indekslashda to'g'ri pozitsiyani kiritish kerak bo'ladi, ya'ni (Python da) kvadrat qavsga birinchi matrisa positsiyani, ikkinchi qator va uchunchi ustun positsiyani berish kerak (Shu yeR da ahamiyat berilgan bo'lsa R da boshqacharoq edi: 1chi - qator, 2chi - ustun va 2chi - qatlam, ya'ni matrisa positsiyasi). Masalan, bu yeR da `arr_r[1, :, :]` barcha satr va ustunlar bilan ikkinchi matritsani qaytaradi.\n\n::: {.callout-warning collapse=\"true\"}\n## Shape is displayed differently in R and Python\n\nEtibor berilgan bo'lsa, bir xil massiv uchun *shape* qaytaradigan qiymatlar taridib R bilan Python da farq qilayapti: shape in R = (3, 4, 2), shape in Python = (2, 3, 4). R da birinchi qatorlar soni, ikkinchi ustunlar soni va uchinchi matrisalar soni ko'rsatilayapti. Python da esa birinchi o'lcham ya'ni matrisalar soni, ikkinchi qatorlar soni va uchinchi ustunlar soni kelayapti.\n:::\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\n# create 3d-Array\narr3d = np.arange(24).reshape(2,3,4)\nprint(\"3d-Array\")\narr3d\nprint(f\"\\nShape: {arr3d.shape}\")\nprint(f\"\\n1st 2d-Array (sheet,matrix, layer) of the 3d-Array (arr3d):\")\narr3d[0, :, :] # or arrd[0]\nprint(f\"\\n3rd column elements of the 2nd sheet from 3d-Array (arr3d):\")\narr3d[1, :, 2]\nprint(f\"\\n2nd row elements of the 1st sheet from 3d-Array (arr3d):\")\narr3d[0, 1, :]\nprint(f\"\\nElement (20) in 3rd row and 1st col of the 2nd sheet\\nfrom 3d-Array (arr3d):\")\narr3d[1, 2, 0]\nprint(f\"\\nElements (22, 23) from 3rd row and columns 3 and 4\\nin the 2nd sheet:\")\narr3d[0, 2, 2:]\nprint(f\"\\nElement (9) in 3rd row and 2nd col of the 1st sheet\\nfrom 3d-Array (arr3d):\")\narr3d[0, 2, 1]\nprint(f\"\\nElement (11) in 3rd row and last col of the 1st sheet\\nfrom 3d-Array (arr3d):\")\narr3d[0, 2, 3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 3d-Array\n#> array([[[ 0,  1,  2,  3],\n#>         [ 4,  5,  6,  7],\n#>         [ 8,  9, 10, 11]],\n#> \n#>        [[12, 13, 14, 15],\n#>         [16, 17, 18, 19],\n#>         [20, 21, 22, 23]]])\n#> \n#> Shape: (2, 3, 4)\n#> \n#> 1st 2d-Array (sheet,matrix, layer) of the 3d-Array (arr3d):\n#> array([[ 0,  1,  2,  3],\n#>        [ 4,  5,  6,  7],\n#>        [ 8,  9, 10, 11]])\n#> \n#> 3rd column elements of the 2nd sheet from 3d-Array (arr3d):\n#> array([14, 18, 22])\n#> \n#> 2nd row elements of the 1st sheet from 3d-Array (arr3d):\n#> array([4, 5, 6, 7])\n#> \n#> Element (20) in 3rd row and 1st col of the 2nd sheet\n#> from 3d-Array (arr3d):\n#> 20\n#> \n#> Elements (22, 23) from 3rd row and columns 3 and 4\n#> in the 2nd sheet:\n#> array([10, 11])\n#> \n#> Element (9) in 3rd row and 2nd col of the 1st sheet\n#> from 3d-Array (arr3d):\n#> 9\n#> \n#> Element (11) in 3rd row and last col of the 1st sheet\n#> from 3d-Array (arr3d):\n#> 11\n```\n:::\n:::\n\n:::\n\n**Operations** <br>\nPaython da massivlar yig'indisini hisoblash uchun yig'indini qay tarzda hisoblashga qarab, o'qni ya'ni `axis` kiritish kerak bo'ladi. Axis = 0 da, yig'indi massivning n matritsalari bo'yicha hosil bo'ladi. Axis = 1 holatda yig'indi ustunlar bo'ylab va axis = 2 holatda  qatorlar bo'yicha hisoblanadi(Buni yuqorida keltirilgan rasmda ko'rish mumkin).\n\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nprint(\"a 3d-array - arr3d:\")\narr3d\nprint(\"\\nShape:\")\narr3d.shape\nprint(f\"\\nSum by sheets (axis =0):\")\nnp.sum(arr3d, axis = 0) # or arr3d.sum(axis=0)\nprint(f\"\\nSum by column-wise (axis = 1):\")\narr3d.sum(axis=1)\nprint(f\"\\nSum by row-wise (axis = 2):\")\nnp.sum(arr3d, axis = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> a 3d-array - arr3d:\n#> array([[[ 0,  1,  2,  3],\n#>         [ 4,  5,  6,  7],\n#>         [ 8,  9, 10, 11]],\n#> \n#>        [[12, 13, 14, 15],\n#>         [16, 17, 18, 19],\n#>         [20, 21, 22, 23]]])\n#> \n#> Shape:\n#> (2, 3, 4)\n#> \n#> Sum by sheets (axis =0):\n#> array([[12, 14, 16, 18],\n#>        [20, 22, 24, 26],\n#>        [28, 30, 32, 34]])\n#> \n#> Sum by column-wise (axis = 1):\n#> array([[12, 15, 18, 21],\n#>        [48, 51, 54, 57]])\n#> \n#> Sum by row-wise (axis = 2):\n#> array([[ 6, 22, 38],\n#>        [54, 70, 86]])\n```\n:::\n:::\n\n:::\n::::\n\n# Heterogeneous data structure\n\nGeterogen ma'lumotlar tuzilmalari elementlari har xil bo'lgan objectlarni anglatadi. Masalan, har xil turdagi ma'lumotlarga ega elementlarni ro'yxat sifatidagi objectda saqlanishi mumkin.\n\n## `list`s in R and `list`s & `dict`s in Python\n\n### `list`s in R\n\nR dagi ro'yxatning vektorga nisbatan farqi shundaki, ro'yxat elementlari bir hil turda bo'lishi shart emas va elementlarning uzunligi har xil bo'lishi mumkin. Ro'yxat yaratish uchun R da `list()` funksiyasi mavjud. Indekslashda R da ro'yxat uchun qo'sh (двойной) kvadrat qavs `[[]]` ishlatiladi (VektoR da bitta kvadrat qavs `[]`).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# create a list\nlst_r <- list(1, c(2, 3), \n               c(TRUE, FALSE), \n               c(\"I\", \"love\", \"R\"), \"Hello R\")\n#\nlst_r\n#> [[1]]\n#> [1] 1\n#> \n#> [[2]]\n#> [1] 2 3\n#> \n#> [[3]]\n#> [1]  TRUE FALSE\n#> \n#> [[4]]\n#> [1] \"I\"    \"love\" \"R\"   \n#> \n#> [[5]]\n#> [1] \"Hello R\"\ncat(\"Type: \", class(lst_r), \"\\n\")\n#> Type:  list\n# Atribute of the list:\nstr(lst_r)\n#> List of 5\n#>  $ : num 1\n#>  $ : num [1:2] 2 3\n#>  $ : logi [1:2] TRUE FALSE\n#>  $ : chr [1:3] \"I\" \"love\" \"R\"\n#>  $ : chr \"Hello R\"\n#\n# Check element (Hello R) is in the list\n\"Hello R\" %in% lst_r\n#> [1] TRUE\n#\n# Change the 1st element (1) to 42\nlst_r[[1]] <- 42\nlst_r[[1]]\n#> [1] 42\n#\n# Remove the last element (Hello R) of the list\nlst_r[[length(lst_r)]] <- NULL\nlst_r\n#> [[1]]\n#> [1] 42\n#> \n#> [[2]]\n#> [1] 2 3\n#> \n#> [[3]]\n#> [1]  TRUE FALSE\n#> \n#> [[4]]\n#> [1] \"I\"    \"love\" \"R\"\n#\n# Check element (Hello R) is in the list\n\"Hello R\" %in% lst_r\n#> [1] FALSE\n#\n# Remove the 1st (42) and 2nd elements ([2, 3]) \n(lst_r[-c(1,2)]) # Outer bracket for execute code direct\n#> [[1]]\n#> [1]  TRUE FALSE\n#> \n#> [[2]]\n#> [1] \"I\"    \"love\" \"R\"\n```\n:::\n\n\nR dagi ro'yxatdagi elementlarni ham nomlash mumkin (Python lug'atlarida bo'lgani kabi). Elementlarga `[[]]` yoki `$` operatori (dollar belgisi) yoR damida murojaat qilish mumkin. Yangilanadigan element indeksiga qiymat belgilash orqali ro'yxatni o'zgartirish yoki olib tashlash mumkin.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\nlst_named <- list(\n  \"age\" = 19,\n  \"sex\" = \"m\",\n  \"it_skills\" = c(\"R\", \"Python\", \"Java\")\n)\n#\n# 1st element\nlst_named[[1]]\n#> [1] 19\n#\n# 3rd element\nlst_named[[3]]\n#> [1] \"R\"      \"Python\" \"Java\"\n#\n# 2nd element of the 3rd element\nlst_named[[3]][2]\n#> [1] \"Python\"\n#\n# 2nd element by name\nlst_named[[\"sex\"]]       \n#> [1] \"m\"\n#\n# 3rd element via $\nlst_named$it_skills\n#> [1] \"R\"      \"Python\" \"Java\"\n#\n# 2nd element from 3rd element from the list\nlst_named$it_skills[2]\n#> [1] \"Python\"\n#\n# Names of the list\nnames(lst_named)\n#> [1] \"age\"       \"sex\"       \"it_skills\"\n```\n:::\n\n\n`append()` funksiyasi orqali R roʻyxatiga yangi element qoʻshish mumkin. Bundan tashqari ro'yxatni Vector yoki Data Fareme (agar elementlar *nomlangan* bo'lsa) kabi boshqa maʼlumotlar strukturasiga aylantirish mumkin.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# Add an element(\\\"Python\\\" and \\\"C++\\\") into the list(lst_r):\nappend(lst_r, c(\"Python\", \"C++\"))\n#> [[1]]\n#> [1] 42\n#> \n#> [[2]]\n#> [1] 2 3\n#> \n#> [[3]]\n#> [1]  TRUE FALSE\n#> \n#> [[4]]\n#> [1] \"I\"    \"love\" \"R\"   \n#> \n#> [[5]]\n#> [1] \"Python\"\n#> \n#> [[6]]\n#> [1] \"C++\"\n#\n# Convert to vector\nunlist(lst_r)\n#> [1] \"42\"    \"2\"     \"3\"     \"TRUE\"  \"FALSE\" \"I\"     \"love\"  \"R\"\n#\n# Create alist\nemp_list <- list(\n  emp_name = c(\"Max\", \"Ali\", \"Vali\"),\n  emp_age = c(45, 34, 27),\n  emp_salary = c(5.300, 3.700, 3.300)\n)\n# \n# Type of emp_list:\nclass(emp_list)\n#> [1] \"list\"\n#\n# Convert to data frame\nemp_df <- data.frame(emp_list); emp_df\n#>   emp_name emp_age emp_salary\n#> 1      Max      45        5.3\n#> 2      Ali      34        3.7\n#> 3     Vali      27        3.3\n#\n# Type of emp_df\nclass(emp_df)\n#> [1] \"data.frame\"\n```\n:::\n\n\n\n### `list`s in Python\n\nR dagi ro'yxatdagi kabi, Python dagi ro'yxatdagi elementlar/objectlar har xil uzunlik va turlarga ega bo'lishi mumkin. Agar Python dagi ro'yxatning barcha elementlari bir xil turga ega bo'lsa, buni R dagi vektor bilan solishtirish mumkin.\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# Create a list\nlst_py = [1, [1, 2], True, [\"I\", \"love\", \"Python\"], \"Hello Python\"]\nprint(lst_py)\n#> [1, [1, 2], True, ['I', 'love', 'Python'], 'Hello Python']\nprint(\"\\nType: \", type(lst_py))\n#> \n#> Type:  <class 'list'>\n#\n# Check element (Hello Python) is in the list\n\"Hello Python\" in lst_py\n#> True\n#\n# Change the 1st element (1) to 42\nlst_py[0] = 42; lst_py\n#> [42, [1, 2], True, ['I', 'love', 'Python'], 'Hello Python']\n#\n# Remove the last element (Hello Python) from the list\nlst_py.pop(); lst_py  # pop() removes the last element in the list!!\n#> 'Hello Python'\n#> [42, [1, 2], True, ['I', 'love', 'Python']]\n#\n# Remove the 2nd element ([1, 2]) with pop()\nlst_py.pop(1); lst_py\n#> [1, 2]\n#> [42, True, ['I', 'love', 'Python']]\n#\n# Remove the 1st element (42) with del\ndel lst_py[-0]\n#\n# Remove by name\nlst_py.remove(True)\nlst_py\n#> [['I', 'love', 'Python']]\n```\n:::\n\n\nPython da ro'yxatga yangi elementni `append()` funktsiyasi (R kabi) orqali qo'shish mumkin. R da bo'lganidek, Python da ham ro'yxatlar boshqa ma'lumotlar tuzilmalariga, NumPy massiviga, Pandas seriyasiga yoki Pandas DataFrame siga aylantirilishi mumkin.\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# Create a list\nls1 = [\"Ali\", \"Vali\", \"Gani\"]; ls1\n#> ['Ali', 'Vali', 'Gani']\n#\n# Add a new element (Max) into the list\n# append() adds the new item to the end of the list\nls1.append(\"Max\"); ls1\n#> ['Ali', 'Vali', 'Gani', 'Max']\n#\n# insert() adds an element to the list at the specified index\nls1.insert(1, \"Ivan\") # inserted at index 1 (2nd position)\n#\n# Conver to a Pandas Series\nls_pd = pd.Series(ls1); ls_pd\n#> 0     Ali\n#> 1    Ivan\n#> 2    Vali\n#> 3    Gani\n#> 4     Max\n#> dtype: object\ntype(ls_pd)\n#> <class 'pandas.core.series.Series'>\n#\n# Conver to a A Numpy 1d-Ayrray\nls_np = np.array(ls1); ls_np\n#> array(['Ali', 'Ivan', 'Vali', 'Gani', 'Max'], dtype='<U4')\ntype(ls_np)\n#> <class 'numpy.ndarray'>\n#\n# Convert to a Pandas DataFrame\nls2 = [3, 4, 5, 8, 2]\nls_df = pd.DataFrame(list(zip(ls1,ls2)), columns = [\"ls1\", \"ls2\"])\nls_df\n#>     ls1  ls2\n#> 0   Ali    3\n#> 1  Ivan    4\n#> 2  Vali    5\n#> 3  Gani    8\n#> 4   Max    2\n```\n:::\n\n\n### `dict`s in Python and `list`s in R\n\nYuqorida aytib o'tilganidek, vektorlaR dan farqli ravishda, R da ro'yxat elementlari bir xil turdagi bo'lishi shart emas. R dagi ro'yxat elementlarini ham nomlash mumkin, bu *named list* ya'ni elementlari nomlangan roy'yxat deb ham ataladi. Python da esa ro'yxat elementlarini nomlab bo'lmaydi, lekin Python da R dagi elementlari nomlangan roy'yxat bilan bir xil tuzilmaga ega bolgan lug'atlar *(dictionanries)* mavjud. Python tilidagi lug'at `d = {key : value}` tuzilishidan iborat. Lug'atlaR dagi Kalit *unique* va *immutable*, ya'ni unikalniy va o'zgarmasdir. Kalitlar uchun odatda satrlar *(strings)*  ishlatiladi. Agar R dagi vektor elementlari nomlansa Python dagi lug'at strukturasiga ega bo'ladi `d = list(name = value)`. Lug'atdagi elementlarga `d[\"key\"]` orqali, nomlangan vektor/ro'yxatdagi elementlarga `vector[\"name\"]` yoki `vector$name` orqali murojaat qilinadi.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## named list vs vector in R\n\nR da elementlar ro'yxatda ham (`l <- list(\"a\" = 1, \"b\" = b, \"c\" = c(\"a\", \"b\", \"c\"))`), vektoR da ham (`v <- c(\"a\" = 1, \"b\" = 2, \"c\" = 3)`) nomlanishi mumkin. Farqi vektoR dagi elementlar bi xil turga ega bo'lishi kerak.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\ncat(\"Named vector with values of the same type:\\n\")\nv <- c(\"a\" = 1, \"b\" = 2, \"c\" = 3); v\ncat(\"Type: \", class(v))\ncat(\"\\n\\nNamed list with values of different types:\\n\")\nl <- list(\"a\" = 1, \"b\" = \"b\", \"c\" = c(\"a\", \"b\", \"c\")); l\ncat(\"Type: \", class(l))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Named vector with values of the same type:\n#> a b c \n#> 1 2 3 \n#> Type:  numeric\n#> \n#> Named list with values of different types:\n#> $a\n#> [1] 1\n#> \n#> $b\n#> [1] \"b\"\n#> \n#> $c\n#> [1] \"a\" \"b\" \"c\"\n#> \n#> Type:  list\n```\n:::\n:::\n\n\nMisol tariqasida, yuqoridagi vektor \"v\" ga turli xil turdagi qiymatlar berilsa, masalan satr, son aralsh (1, \"b\", 3), bu holatda R hamma elementlarni matn sifatida saqlaydi ya'ni qabul qiladi, bu degani 1 va 3 sonlari turi *character*, ya'ni matnga o'zgartiriladi.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\nv1 <- c(\"a\" = 1, \"b\" = \"b\", \"c\" = 3); v1\n#>   a   b   c \n#> \"1\" \"b\" \"3\"\nclass(v1)\n#> [1] \"character\"\n```\n:::\n\n\nQiziqishga man vektorning 3 ta elementlariga quyidagi qiymatlarni berdim: a = 1, b = b und c = c(1, 2, 3). Demak vektorimiz 5 ta qiymatga ega bo'lgan 3 ta nomlanagna elementdan iborat boladi. Ajablanarlisi shundaki, R avtomatik ravishda c elementni barcha qiymatlar nomlanguncha kengaytirdi va c1, c2, c3 qilib nomladi. Shunaqa paytlada R ni yanayam yaxschi korib ketasanda kishi;).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\nv2 <- c(\"a\" = 1, \"b\" = \"b\", \"c\" = c(1, 2, 3)); v2\n#>   a   b  c1  c2  c3 \n#> \"1\" \"b\" \"1\" \"2\" \"3\"\n```\n:::\n\n:::\n\nQuyida aksiyalar narxlari lug'atlar va nomlangan vektorlarga misol tqariqasida (2024 yil 27 aprel holatiga ko'ra, OnVista'dan) keltirilgan.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n:::{.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nshare_name <- c(\"AMZN\", \"AAPL\", \"MBG\", \"TSLA\", \"BYD\", \"BABA\", \"SAP\")\nshare_value <- c(179.62, 169.30, 74.36, 168.29, 25.36, 75.55, 174.00)\n#\ncat(\"Create a named list from vectors:\\n\")\ndic_r <- setNames(as.list(share_value), share_name); dic_r\ncat(\"\\nshare price from BYD. slice with [[]]:\\n\")\ndic_r[[\"BYD\"]]\ncat(\"\\nshare price from Tesla. slice with $\\n\")\ndic_r$TSLA\ncat(\"\\nTyp from dic_r: \", class(dic_r))\ncat(\"\\nAdd an element (BMW3) to the list(dic_r[['BMW3']] <- 99.15):\\n\")\ndic_r[[\"BMW3\"]] <- 99.15\ncat(\"Is BMW3 there?\\n\")\ndic_r[\"BMW3\"] %in% dic_r\ndic_r[[\"BMW3\"]]\n#\ncat(\"\\nRemove an element (MBG) from the list (dic_r$MBG <- NULL):\\n\")\ndic_r$MBG <- NULL\ncat(\"Is MBG there?\\n\")\ndic_r[\"MBG\"] %in% dic_r\n# convert to python\ncat(\"\\nConvert the list (dic_r) to Python object (dic_py)\\n\")\ndic_py <- r_to_py(dic_r)\ndic_py\ncat(\"\\nType from dic_py:\\n\")\nclass(dic_py)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Create a named list from vectors:\n#> $AMZN\n#> [1] 179.62\n#> \n#> $AAPL\n#> [1] 169.3\n#> \n#> $MBG\n#> [1] 74.36\n#> \n#> $TSLA\n#> [1] 168.29\n#> \n#> $BYD\n#> [1] 25.36\n#> \n#> $BABA\n#> [1] 75.55\n#> \n#> $SAP\n#> [1] 174\n#> \n#> \n#> share price from BYD. slice with [[]]:\n#> [1] 25.36\n#> \n#> share price from Tesla. slice with $\n#> [1] 168.29\n#> \n#> Typ from dic_r:  list\n#> Add an element (BMW3) to the list(dic_r[['BMW3']] <- 99.15):\n#> Is BMW3 there?\n#> [1] TRUE\n#> [1] 99.15\n#> \n#> Remove an element (MBG) from the list (dic_r$MBG <- NULL):\n#> Is MBG there?\n#> [1] FALSE\n#> \n#> Convert the list (dic_r) to Python object (dic_py)\n#> {'AMZN': 179.62, 'AAPL': 169.3, 'TSLA': 168.29, 'BYD': 25.36, 'BABA': 75.55, 'SAP': 174.0, 'BMW3': 99.15}\n#> \n#> Type from dic_py:\n#> [1] \"python.builtin.dict\"   \"python.builtin.object\"\n```\n:::\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nprint(\"share price at 27.04.2024:\")\nfor k,v in r.dic_py.items():\n  print(f\"{k} : {v}\")\nprint(\"\\nKeys:\", r.dic_py.keys())\nprint(\"Values:\", r.dic_py.values())\nprint(f\"\\nShare of Tesla: {r.dic_py[\"TSLA\"]}\")\nprint(\"\\nAdd MBG to the dictionary(r.dic_py['MBG'] = 74.36):\")\nr.dic_py[\"MBG\"] = 74.36\nprint(\"\\nIs MBG in the dictionary?\")\n\"MBG\" in r.dic_py\nprint(\"\\nDelete BYD from dictionary(del r.dic_py['BYD']):\")\ndel r.dic_py[\"BYD\"]\nprint(\"\\nIs BYD in the dictionary?\")\n\"BYD\" in r.dic_py\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> share price at 27.04.2024:\n#> AMZN : 179.62\n#> AAPL : 169.3\n#> TSLA : 168.29\n#> BYD : 25.36\n#> BABA : 75.55\n#> SAP : 174.0\n#> BMW3 : 99.15\n#> \n#> Keys: dict_keys(['AMZN', 'AAPL', 'TSLA', 'BYD', 'BABA', 'SAP', 'BMW3'])\n#> Values: dict_values([179.62, 169.3, 168.29, 25.36, 75.55, 174.0, 99.15])\n#> \n#> Share of Tesla: 168.29\n#> \n#> Add MBG to the dictionary(r.dic_py['MBG'] = 74.36):\n#> \n#> Is MBG in the dictionary?\n#> True\n#> \n#> Delete BYD from dictionary(del r.dic_py['BYD']):\n#> \n#> Is BYD in the dictionary?\n#> False\n```\n:::\n:::\n\n:::\n::::\n\n\nPython da lug'at elementlariga murojaat qilgandan `dict[\"key\"]` bilan birga `dict.get(\"key\", \"default\")` metodi ham mavjud. Ikkala usul ham bir xil natija beradi. Farqi shundaki, izlanayotgan kalit lug'atda mavjudmi yoki yo'qmi. Agar Key mavjud bo'lmasa birinchi usul *KeyError* hatoligini beradi. *get()* usuli bu hatolikni oldini oladi. Kalit bmavjud bo'lmagan holatda get odatda *None* qaytaradi, lekin qaytarilishi kerak bulgan qiymatni o'zgartirsa ham bo'ladi, masalan `dict.get(\"key\", \"Mavjud emas!\")` holatda, agar kalit mavjut bo'lmasa, \"Mavjud emas!\" qqqaytariladi.\n\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nbsp_dic = {\n  \"Ali\" : 25,\n  \"Max\" : 44,\n  \"Vali\": 33\n}; bsp_dic\nprint(\"With []:\")\nprint(f\"Alini yoshi: {bsp_dic[\"Ali\"]}\")\nprint(\"\\nWith get():\")\nprint(f\"Alini yoshi: {bsp_dic.get(\"Ali\")}\")\nlstName = [\"Ali\", \"Gani\", \"Max\", \"Vali\", \"Brandon\"]; lstName\nprint(\"\\nIterate with devault value, if key not exis\")\nfor n in lstName:\n  # for k, v in bsp_dic.items():\n  print(f\"{n} - {bsp_dic.get(n, 'Mavjud emas!')}\" )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> {'Ali': 25, 'Max': 44, 'Vali': 33}\n#> With []:\n#> Alini yoshi: 25\n#> \n#> With get():\n#> Alini yoshi: 25\n#> ['Ali', 'Gani', 'Max', 'Vali', 'Brandon']\n#> \n#> Iterate with devault value, if key not exis\n#> Ali - 25\n#> Gani - Mavjud emas!\n#> Max - 44\n#> Vali - 33\n#> Brandon - Mavjud emas!\n```\n:::\n:::\n\n\n## `set`s and `tuple`s in Python\n\nPython da `set{}` va `tuple()` kabi boshqa ma'lumotlar tuzilmalari ham mavjud.\n\n### `set{}` in Python\n\nTurlari bo'yicha guruhlangan elementlarni Python da *set*, ya'ni to'plam yoR damida ham ifodalash mumkin. Buning uchun elementlarni skobka `{}`ga kiritiladi yoki ularni `set()` funksiyasiga beriladi. Ushbu kontseptsiyaning o'ziga xos xususiyati shundaki, elementlar *unique*dir, ya'ni har bir object to'plamda faqat bir marta uchraydi. R da ham vektoR dagi takroriy elementlarni olib tashlaydigan `unique()` funksiyasi mavjud. Bundan tashqari, elementlar tartiblanmagan va ular indekslarga ega emas. *set* dagi to'plamlar - *mutable*, ya'ni o'zgaruvchan va *frozenset* dagi to'plamlar - *immutable*, ya'ni o'zgarmasdir.\n\nPython da to'plamlar uchun qo'llaniladigan `union`, `intersection` va `difference` metodlar R da ham mavjud, ular vektorlarga qo'llaniladi.\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# set() - returns the vector without duplicate values\nmy_lst = [2, 3, 1, 5, 3, 9, 3, 2, 7]; my_lst\n#> [2, 3, 1, 5, 3, 9, 3, 2, 7]\nmy_set = set(my_lst); my_set\n#> {1, 2, 3, 5, 7, 9}\n#\n# Create a set\nx = {1, 2, 3, 4, 5, 6}; x\n#> {1, 2, 3, 4, 5, 6}\ny = set([4, 5, 6, 7, 8, 9]); y\n#> {4, 5, 6, 7, 8, 9}\nprint(type(x), type(y))\n#> <class 'set'> <class 'set'>\n#\n# union() - combine x and y without duplicates\nx.union(y)\n#> {1, 2, 3, 4, 5, 6, 7, 8, 9}\n#\n# intersection() - which obj in both sets\nx.intersection(y)\n#> {4, 5, 6}\n#\n# difference() - objects in x, but not in y\nx.difference(y)\n#> {1, 2, 3}\n#\n# difference() - objects in y, but not in x\ny.difference(x)\n#> {8, 9, 7}\n```\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n:::{.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# Typ of python sets\nclass(py$x)\n#> [1] \"python.builtin.set\"    \"python.builtin.object\"\nclass(py$y)\n#> [1] \"python.builtin.set\"    \"python.builtin.object\"\n#\n# unique() - returns the vector without duplicate values\nmy_vec <- c(2, 3, 1, 5, 3, 9, 3, 2, 7); my_vec\n#> [1] 2 3 1 5 3 9 3 2 7\nuniq_vec <- unique(my_vec); uniq_vec\n#> [1] 2 3 1 5 9 7\n#\n# create vectros\nx_r <- c(1, 2, 3, 4, 5, 6); x_r\n#> [1] 1 2 3 4 5 6\ny_r <- c(4, 5, 6, 7, 8, 9); y_r\n#> [1] 4 5 6 7 8 9\n#\n# union() - combine x_r and y_r without duplicates\nunion(x_r, y_r)\n#> [1] 1 2 3 4 5 6 7 8 9\n#\n# intersection() - which obj in both vectors\nintersect(x_r, y_r)\n#> [1] 4 5 6\n#\n# setdiff() - objects in x_r, but not in y_r\nsetdiff(x_r, y_r)\n#> [1] 1 2 3\n#\n# setdiff() - objects in y_r, but not in x_r\nsetdiff(y_r, x_r)\n#> [1] 7 8 9\n```\n:::\n\n:::\n::::\n\n### `tuple()` in Python\n\nTuple yoki kortej bir objectga bir nechta (turli turdagi) elementlarni birlashtiradi. Ularni vergul bilan ajratilgan elementlarni qavslar ichiga `t = (obj1, obj2, ...)` yoki qavslarsiz `t = obj1, obj2, ...` kiritish bilan yoki `tuple(obj)` funksiyasi orqali yaratish mumkin. Ro'yxatlaR dan farqli ravishda, tupellar **immutable** dir, shunga ular o'zgarmas ro'yxat deb ham ataladi. Tupellar yaratilganidan so'ng, elementlarni o'zgartirib bo'lmaydi (qaysi manodaki, elementlariga boshqa qiymat berib bolmaydi, alashtirib bolmaydi, lekin yangi element qo'shsa bo'ladi), agar o'zgartirish zarur bo'lsa, ularni ro'yxatga aylantirib o'zgartirish kiritib, keyin ularni qayta tupelga aylantirib olish mumkin. Tupellarni lug'atlaR da ham ishlatish mumkin.\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# create a tuple\nt1 = 1, 5, 6, 6, 3; print(\"t1: \", t1)\n#> t1:  (1, 5, 6, 6, 3)\nt2 = (2, 4, 2, 5, 6); print(\"t2: \", t2)\n#> t2:  (2, 4, 2, 5, 6)\nt3 = tuple([3, 4, 5, 6, 1]); print(\"t3: \", t3)\n#> t3:  (3, 4, 5, 6, 1)\n#\n# tuples in dict keys\nkoordinat = {\n  (0,0) : 100,\n  (1,1) : 200,\n  (0,1) : 75\n}; koordinat\n#> {(0, 0): 100, (1, 1): 200, (0, 1): 75}\n# add istem\nkoordinat[(1,0)] = 125; koordinat\n#> {(0, 0): 100, (1, 1): 200, (0, 1): 75, (1, 0): 125}\n#\n# tuples in dict values\ngreats = {\n  \"Navoi\" : (\"Hirot\", 1441),\n  \"Bobur\" : (\"Andijon\",1483),\n  \"Temur\" : (\"Shahrisabz\", 1336)\n}; greats\n#> {'Navoi': ('Hirot', 1441), 'Bobur': ('Andijon', 1483), 'Temur': ('Shahrisabz', 1336)}\n#\n# iterate dict\nfor great, (place, year) in greats.items():\n  print(f\"{great} - was born in {place} in {year}.\")\n#> Navoi - was born in Hirot in 1441.\n#> Bobur - was born in Andijon in 1483.\n#> Temur - was born in Shahrisabz in 1336.\n```\n:::\n\n\n\n\n## `data.frame`s in R and `pandas.DataFrame` in Python\n\nDataframelar, ehtimol, R va Python da ma'lumotlarni saqlash, qayta ishlash va tahlil qilishning eng keng tarqalgan usullaridan bo'lsa kerak. DF (DataFrame) ni to'rtta burchakli (satrlar va ustunlar) jadval sifatida tasavvur qilish mumkin, misol tariqasida eng keng tarqalgani Excel tablolarini (sheets) misol qilib keltirish mumkin. Qatorlar holatlar yoki kuzatishlarni (*ingl. observations*), ustunlar esa o'zgaruvchilarni yoki statistika tili bilan aytganda xarakteristikalarni (*ingl. futures*) ifodalaydi. O'ng tomonda Data Frame kichik jadval shaklda misol tariqasida keltirilgan. Jadvalda 10 ta satr (kuzatishlar - bular shaxslar, Navoi, Bobur, ...) va 3 ustun (o'zgaruvchi = ism, tug'ilgan yili va tug'ilgan joyi, bular shaxslarning xarakteristikasi, ya'ni shaxslar haqida ma'lumotlar desayam bo'ladi) mavjud.\n\n\n::: {.cell .column-margin}\n::: {.cell-output-display}\n|names    | byear|bplace     |\n|:--------|-----:|:----------|\n|Navoi    |  1441|Hirot      |\n|Bobur    |  1483|Andijon    |\n|Temur    |  1336|Shahrisabz |\n|Cholpon  |  1898|Andijon    |\n|Qodiriy  |  1894|Toshkent   |\n|Ulugbek  |  1394|Samarqand  |\n|Xorazmi  |   783|Xiva       |\n|Beruniy  |  1048|Xorazm     |\n|Termiziy |   824|Termiz     |\n|Buxoriy  |   810|Buxoro     |\n:::\n:::\n\n\nR dagi dataframelar boshqacha aytganda bir xill uzunlikka egan bo'lgan nom berilgan vektorlar ro'yxatidir (Paythondagi pandas.Series lar kabi). Bunda har bir vektor (Series) dataframelar ya'ni jadvallarning ustunini ifodalaydi. Python va R dagi dataframelari dataframe talabini qondirishi kerak bo'lgan ko'pchillik umumiy xususiyatlarga [@rp_DA] ega.\n\n  - har bir ustunning uzunligi bir xil bo'lishi kerak\n  - ustundagi barcha elementlar bir xil turga ega bo'lishi kerak\n  - SatR dagi elementlar har xil turlaR da bo'lishi mumkin\n  - Satrlar va ustunlar boshqacha nomlanishi mumkin\n  \nDataframelar R da `data.frame()` funksiya orqali va Python da pandas modulidagi `pandas.DataFrame()` funksiya yoR damida yaratiladi. \n\n\n### Create a DF\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}  \n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\nnames <- c(\"Navoi\", \"Bobur\", \"Temur\", \"Cholpon\", \"Qodiriy\", \n           \"Ulugbek\", \"Xorazmi\", \"Beruniy\", \"Termiziy\", \"Buxoriy\")\nbyear <- c(1441, 1483, 1336, 1898, 1894, 1394, 783, 1048, 824, 810) \nbplace <- c(\"Hirot\", \"Andijon\", \"Shahrisabz\", \"Andijon\", \"Toshkent\",\n            \"Samarqand\", \"Xiva\", \"Xorazm\", \"Termiz\", \"Buxoro\")\n# Create a DataFrame -----------------------------------------\ndf <- data.frame(names, byear, bplace)\n# Type -------------------------------------------------------\nclass(df)\n#> [1] \"data.frame\"\n# nums of rows and cols --------------------------------------\ndim(df)  # like shape in pandas\n#> [1] 10  3\n# num of rows ------------------------------------------------\nnrow(df)\n#> [1] 10\n# num of columns ---------------------------------------------\nncol(df)\n#> [1] 3\n# structur of DataFrame --------------------------------------\n# str(df) or\npillar::glimpse(df) # like pandas.DataFrame.info()\n#> Rows: 10\n#> Columns: 3\n#> $ names  <chr> \"Navoi\", \"Bobur\", \"Temur\", \"Cholpon\", \"Qodiriy\", \"Ulugbek\", \"Xo…\n#> $ byear  <dbl> 1441, 1483, 1336, 1898, 1894, 1394, 783, 1048, 824, 810\n#> $ bplace <chr> \"Hirot\", \"Andijon\", \"Shahrisabz\", \"Andijon\", \"Toshkent\", \"Samar…\n# First n lines, default = 6 ---------------------------------\nhead(df, n = 3)\n#>   names byear     bplace\n#> 1 Navoi  1441      Hirot\n#> 2 Bobur  1483    Andijon\n#> 3 Temur  1336 Shahrisabz\n# Last n lines -----------------------------------------------\ntail(df, n=2)\n#>       names byear bplace\n#> 9  Termiziy   824 Termiz\n#> 10  Buxoriy   810 Buxoro\n# colnames ---------------------------------------------------\ncolnames(df)\n#> [1] \"names\"  \"byear\"  \"bplace\"\n# rows -------------------------------------------------------\nrownames(df)\n#>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n```\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# create pandas DataFrame from created df in r -------\ndf_pd = pd.DataFrame(r.df)\ndf_pd[\"byear\"] = df_pd[\"byear\"].astype(int)\n# Type -----------------------------------------------\ntype(df_pd)\n#> <class 'pandas.core.frame.DataFrame'>\n# nums of rows and cols ------------------------------\ndf_pd.shape   # like dim() in r\n#> (10, 3)\n# num of rows ----------------------------------------\nlen(df_pd)\n#> 10\n# num of columns -------------------------------------\nlen(df_pd.columns)\n#> 3\n# structur of DataFrame ------------------------------\ndf_pd.info()   # like str() in r\n#> <class 'pandas.core.frame.DataFrame'>\n#> RangeIndex: 10 entries, 0 to 9\n#> Data columns (total 3 columns):\n#>  #   Column  Non-Null Count  Dtype \n#> ---  ------  --------------  ----- \n#>  0   names   10 non-null     object\n#>  1   byear   10 non-null     int32 \n#>  2   bplace  10 non-null     object\n#> dtypes: int32(1), object(2)\n#> memory usage: 332.0+ bytes\n# First n lines, default = 5 -------------------------\ndf_pd.head(n = 3)\n#>    names  byear      bplace\n#> 0  Navoi   1441       Hirot\n#> 1  Bobur   1483     Andijon\n#> 2  Temur   1336  Shahrisabz\n# Last n lines ---------------------------------------\ndf_pd.tail(n = 2)\n#>       names  byear  bplace\n#> 8  Termiziy    824  Termiz\n#> 9   Buxoriy    810  Buxoro\n# colnames -------------------------------------------\ndf_pd.columns\n#> Index(['names', 'byear', 'bplace'], dtype='object')\n# rows -----------------------------------------------\ndf_pd.index\n#> RangeIndex(start=0, stop=10, step=1)\n```\n:::\n\n:::\n::::\n\n### Access a (the) element(s)\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}  \n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# 1st row, 1st col -------------------------------\ndf[1,1]\n#> [1] \"Navoi\"\n# 1-3 rows, all cols -----------------------------\ndf[1:3, ]\n#>   names byear     bplace\n#> 1 Navoi  1441      Hirot\n#> 2 Bobur  1483    Andijon\n#> 3 Temur  1336 Shahrisabz\n# all rows, 1-2 cols -----------------------------\ndf[, 1:2]\n#>       names byear\n#> 1     Navoi  1441\n#> 2     Bobur  1483\n#> 3     Temur  1336\n#> 4   Cholpon  1898\n#> 5   Qodiriy  1894\n#> 6   Ulugbek  1394\n#> 7   Xorazmi   783\n#> 8   Beruniy  1048\n#> 9  Termiziy   824\n#> 10  Buxoriy   810\n# 3 rows, col bplace -----------------------------\ndf[1:3, 3]\n#> [1] \"Hirot\"      \"Andijon\"    \"Shahrisabz\"\n# rows where col bplace = \"Andijon\" --------------\ndf[df$bplace == \"Andijon\", ]\n#>     names byear  bplace\n#> 2   Bobur  1483 Andijon\n#> 4 Cholpon  1898 Andijon\n# rows where col byear < 1000 -------------------\ndf[df$byear < 1000, ]\n#>       names byear bplace\n#> 7   Xorazmi   783   Xiva\n#> 9  Termiziy   824 Termiz\n#> 10  Buxoriy   810 Buxoro\n```\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\" code-line-numbers=\"true\"}\n# 1st row, 1st col -------------------------------------\ndf_pd.iloc[0,0]         # iloc by postion(s)\n#> 'Navoi'\n# 1-3 rows, all cols -----------------------------------\ndf_pd.iloc[:3, ]\n#>    names  byear      bplace\n#> 0  Navoi   1441       Hirot\n#> 1  Bobur   1483     Andijon\n#> 2  Temur   1336  Shahrisabz\n# all rows, 1-2 cols -----------------------------------\ndf_pd.iloc[:, :2]\n#>       names  byear\n#> 0     Navoi   1441\n#> 1     Bobur   1483\n#> 2     Temur   1336\n#> 3   Cholpon   1898\n#> 4   Qodiriy   1894\n#> 5   Ulugbek   1394\n#> 6   Xorazmi    783\n#> 7   Beruniy   1048\n#> 8  Termiziy    824\n#> 9   Buxoriy    810\n# 3 rows, col bplace -----------------------------------\ndf_pd.loc[:3, \"bplace\"]  # loc by labels(s)\n#> 0         Hirot\n#> 1       Andijon\n#> 2    Shahrisabz\n#> 3       Andijon\n#> Name: bplace, dtype: object\n# 1-2 rows, cols names and bplace ----------------------\ndf_pd.loc[:2, [\"names\",\"byear\"]] # or df_pd.bplace\n#>    names  byear\n#> 0  Navoi   1441\n#> 1  Bobur   1483\n#> 2  Temur   1336\n# rows where col bplace = \"Andijon\" --------------------\ndf_pd.loc[df_pd[\"bplace\"] == \"Andijon\"]\n#>      names  byear   bplace\n#> 1    Bobur   1483  Andijon\n#> 3  Cholpon   1898  Andijon\n# rows where col byear < 1000 --------------------------\ndf_pd.loc[df_pd.byear < 1000]\n#>       names  byear  bplace\n#> 6   Xorazmi    783    Xiva\n#> 8  Termiziy    824  Termiz\n#> 9   Buxoriy    810  Buxoro\n# ------------------------------------------------------\n```\n:::\n\n:::\n::::\n\n### Change Row- and Colnames\n\n:::: {.panel-tabset}\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\ncat(\"Rownames:\\n\", rownames(df))  # rownames \ncat(\"\\nColnames:\", colnames(df)) # colnames\n#\nnew_rname <- paste(\"person\",1:10, sep=\"_\", collapse= \",\")\nnew_rname <- unlist(strsplit(new_rname, \",\"))\ncat(\"\\n\\nNew Rowsname:\\n\", new_rname)\n\ncat(\"\\nDF with modified rownames:\\n\")\n# change the rownames\nrownames(df) <- (new_rname)\nhead(df, n = 2)\n# change the colnames\n# Method1: colnames(c(names of new columns))\n# Method2: setNames(df, c(names of new columns)) \n# Here will be used Method2\n# change colname\ndf <- setNames(df, c(\"Ism\", \"Tug\\'ilgan yil\", \"Tug\\'ilgan joy\"))\ncat(\"\\n\\nDF with modified colnames:\\n\")\nhead(df, n = 2)\n#\ncat(\"\\n\\nSet key in DF with data.table:\\n\")\ndt <- data.table(df)\nsetkey(dt, Ism)      # Like Index in pandas\n#call(\"Key: \", key(dt))\nhead(dt, n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rownames:\n#>  1 2 3 4 5 6 7 8 9 10\n#> Colnames: names byear bplace\n#> \n#> New Rowsname:\n#>  person_1 person_2 person_3 person_4 person_5 person_6 person_7 person_8 person_9 person_10\n#> DF with modified rownames:\n#>          names byear  bplace\n#> person_1 Navoi  1441   Hirot\n#> person_2 Bobur  1483 Andijon\n#> \n#> \n#> DF with modified colnames:\n#>            Ism Tug'ilgan yil Tug'ilgan joy\n#> person_1 Navoi          1441         Hirot\n#> person_2 Bobur          1483       Andijon\n#> \n#> \n#> Set key in DF with data.table:\n#> Key: <Ism>\n#>        Ism Tug'ilgan yil Tug'ilgan joy\n#>     <char>         <num>        <char>\n#> 1: Beruniy          1048        Xorazm\n#> 2:   Bobur          1483       Andijon\n```\n:::\n:::\n\n:::\n\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## data.frame() vs data.table()\n\nR da dataframelar uchun turli funktsiyalar mavjud. Umumiy olganda, data.frame() va data.table bir xil. Biz `data.table` kengaytirilgan funksiyalarga ega `data.frame` sifatida tasavvur qilishimiz mumkin. *data.frame()* funksiyasi R ning base ya'ni asosiy(bazaviy, fundamental) funksiyalari qatoriga kiradi. Bu degani, R ni komputerga install qilgandan, R ning asosiy funksiyalari sifatida data.frame ham bo'ladi. Buni telefonni zaryadkasiga taqqoslash mumkin, chunki telefon sotib olsak zaryadkasi birga bo'ladi. Ko'pchillik telefonlaR da esa naushniklarini alohida sotib olish kerak. A *data.table* easa naushnik, R da alohida paket hisoblanadi, uni funksiyalarini ishlatish uchun avval yuklab olib keyin R ga o'qish kerak, xuddi Python da pandas modulini import qilish kerak bo'lganidek.  Bundan tashqari R da jadvallarni tahrirlashda ko'proq qulaylik va funksionallikni ta'minlaydigan boshqa paketlar mavjud, masalan, *tibble*, *tidyverse*, *dplyr*  va boshqalar.\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell}\n\n```{.python .cell-code  code-summary=\"show the code\" code-line-numbers=\"true\"}\nprint(f\"Rownames(index):\\n{list(df_pd.index)}\")\nprint(f\"\\nColnames: {list(df_pd.columns)}\")\n#\nnew_pname = [\"user_\" + str(idx) for idx in list(df_pd.index)]\nprint(f\"\\nNew Rowsname:\\n{new_pname}\")\nprint(\"\\nDF with modified rownames:\")\ndf_pd.index = new_pname\ndf_pd.head(n = 2)\nprint(\"\\nDF with modified colnames:\")\ndf_pd.columns = [\"Ism\", \"Tug\\'ilgan yil\", \"Tug\\'ilgan joy\"]\ndf_pd.head(n = 2)\nprint(\"\\n\\nSet a column as index:\")\n# like key in data.table in r\ndf_pd.set_index(\"Ism\", inplace = True, append = True)\ndf_pd.head(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rownames(index):\n#> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n#> \n#> Colnames: ['names', 'byear', 'bplace']\n#> \n#> New Rowsname:\n#> ['user_0', 'user_1', 'user_2', 'user_3', 'user_4', 'user_5', 'user_6', 'user_7', 'user_8', 'user_9']\n#> \n#> DF with modified rownames:\n#>         names  byear   bplace\n#> user_0  Navoi   1441    Hirot\n#> user_1  Bobur   1483  Andijon\n#> \n#> DF with modified colnames:\n#>           Ism  Tug'ilgan yil Tug'ilgan joy\n#> user_0  Navoi           1441         Hirot\n#> user_1  Bobur           1483       Andijon\n#> \n#> \n#> Set a column as index:\n#>               Tug'ilgan yil Tug'ilgan joy\n#>        Ism                               \n#> user_0 Navoi           1441         Hirot\n#> user_1 Bobur           1483       Andijon\n```\n:::\n:::\n\n:::\n::::\n\nDataframelar, yuqorida aytib o'tilganidek, R va Python da eng ko'p ishlatiladigan ma'lumotlar tuzilmalaridandir. Shuning uchun, bu mavzuga am'lumotla tizimini bir qismi sifatida qisqacha yoritildi va diqqat faqat asosiy funktsiyalarga qaratildi. Buning uchun alohida mavzu bo'ladi, xudo xohlasa. \n\n# References\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}