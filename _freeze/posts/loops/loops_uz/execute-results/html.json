{
  "hash": "76a3a824d6bfde8410cf59bc53fcf9ff",
  "result": {
    "markdown": "---\ntitle: |\n  R & Python: Control flows and loops\\\n  {{< fa language >}} in Uzbek\ndescription: | \n  \\\"If you always do what you can already do, you will always remain what you already are.\\\"  <br> ~ Henry Ford.\nauthor: \"Fazliddin Sultonov\"\ndate: \"2024-05-09\"\ndate-format: \"MMM D, YYYY\"\n\nfilters:\n  - lightbox\nlightbox: \n  match: auto\n  effect: none\n  desc-position: top\n\npage-layout: full\n#reference-location: margin\ncategories: [R, Python, Uzbek, Loop, Control flow]\n# Code execute options\nexecute: \n  echo: true    # Input anzeigen\n  eval: true    # Code ausfÃ¼hren\n  freeze: true  # never re-render during project render\n\n# Output\nformat: \n  html:\n    theme: cosmo\n  # Sections\n    toc: true\n    #toc-location: body\n  # codeb block\n    code-line-numbers: true\n    code-block-border-left: true\n    code-overflow: scroll\n    #ode-annotations: below\n    engine: knitr\n    css: /customs/style.css\n\n# Chunk Options\nknitr:\n  opts_chunk:\n    comment: \"#>\" \n\n  opts_knit: \n    warning: false\n    error: false\n    \n# bibliography\nbibliography: reference.bib\nnocite: |\n  @*\n---\n\n\n\n![](pictures/decide.png){.nolightbox}\n\n::: {.cell}\n\n:::\n\n\n\n# Control flows\n\n**Control flows**, ya'ni Google akani tarjimasi bo'yicha *boshqaruv tuzilmalar* - ma'lum buyruqlarni ketma-ket tarzda *shartli* ravishda bajarilishini nazorat qilish imkonini beradi. Boshqacha aytganda biror bir buyruq, ifoda yoki funksiya ishlaydi, qachonki berilgan ma'lum bir shart qanoatlantirilsa. Shartni tekshirish ko'pincha bir nechta elementlardan iborat ma'lumotlar tuzilmasida yoki funksia ichida **sikllar** orqali amalga oshiriladi.\n\n# `if` & `if-else` & `else if/elif`\n\nFaqat bitta shart berilgan bo'lsa `if` ishlatiladi. Misol uchun biror son, aytaylik baho berilgan: `son = 4`, (4 - yaxshi baho deb hisoblaymiz). Agar shart bo'yicha bahoni  tekshirish kerak bo'lsa if - ni o'zini qo'llaymiz. Agar birinchi shart qanoatlantirilmagan *aksincha holat* uchun ham shart qo'llasak, else ham ishlatiladi. Misoldagi shart boyicha, [*Agar (if)* berilgan *son 4 ga teng (son == 4) bo'lsa (shart)* ekranga *yaxshi (buyruq)* deb, *aks holda (else)* ekranga *yaxshi emas (buyruq)* deb chiqaramiz]{style=\"background-color:honeydew;\"}. \n\nAgar bittadan ko'p yani bir necha shartlar tekshirilganda R uchun  `else if` va Python uchun`elif` ifodasini ishlatishimiz mumkin. Agar *if*- blok yoki *else if/elif*- blokda shartlar qanoatlantirilmasa, *else* - blok har doim bajariladi. Misol tariqasida yuqoridagi misolga bir dan ko'p shartlarini qo'shamiz. Shartlar quyidagicha bo'lishi mumkin: Agar baho == 3 -> qoniqarli, baho == 4 -> yaxshi, baho == 5 -> a'lo, aks holda -> qoniqarsiz (imtihondan o'tilmadi). \n\n:::: {column-left}\n::: {.code-r}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n::: {.cell}\n\n```{.r .cell-code}\n\nbaho <- 4               # berilgan son\nif (baho == 3) {        # 1- shart\n  cat(\"qoniqarli\")      # bajariladi, agar 1-shart == TRUE\n} else if (baho == 4) { # 2-shart\n  cat(\"yaxshi\")         # bajariladi, agar 2-shart == TRUE\n} else if (baho == 5) { # 3- shart\n  cat(\"a'lo\")           # bajariladi, agar 3-shart == TRUE\n} else {                # aks holda\n  cat(\"qoniqarsiz\")     # bajariladi, hech qaysi shart qanoatlantirilmasa\n}\n#> yaxshi\n```\n:::\n\n:::\n::::\n\n:::: {column-right}\n::: {.code-py}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n::: {.cell}\n\n```{.python .cell-code}\nbaho = 5              # berilgan son\nif baho == 3:         # 1- shart\n  print(\"qoniqarli\")  # bajariladi, agar 1-shart == TRUE\nelif baho == 4:       # 2-shart\n  print(\"yaxshi\")     # bajariladi, agar 2-shart == TRUE\nelif baho == 5:       # 3- shart\n  print(\"a'lo\")       # bajariladi, agar 3-shart == TRUE\nelse:                 # aks holda\n  print(\"qoniqarsiz\") # bajariladi, hech qaysi shart qanoatlantirilmasa\n#> a'lo\n```\n:::\n\n:::\n::::\n\n:::: {layout-ncol=2}\nR da *else* if-sharti yopuvchi qavsi `}` bilan bir qatorda turishi kerak ya'ni:\n\n::: {.text-border-frame}\n\n*if (shart) {* <br> *buyruq* <br> *[} else]{style=\"background-color:lightcyan;\"} {* <br> *buyruq }*<br>*}* \n:::\n\n\nPython da if-shartidan keyin ikki nuqta `:` qo'yiladi va bajariladigan kod yangi qator boshidan (odatda) 4 marta bo'sh o'rin qoldirib yoziladi:\n\n::: {.text-border-frame}\n\n*if shart:*<br>*[.... ]{style=\"background-color:yellow;\"} buyruq*<br>*else:*<br>\n*[.... ]{style=\"background-color:yellow;\"} buyruq*\n:::\n::::\n\n\n# `for` - loop\n\nSikllar odatda biror bir amalni biror ketma-ketlikda joylashgan elementlar ustidan (masalan ro'yxat, vektor) bir necha marta bajarish uchun ishlatiladi. `for`- va `while`- sikldan R va Pythonda yuqoridagi if-shatidagi ko'rinishga ega. Bundan tashqari R da `repeat`- sikli ham bor.\n\n`for`- siklini agar ifoda nechi marta bajarilishi kerakligi oldindan aniq bo'lsa ishlatishimiz mumkin, boshqacha aytganda dasturga siklni nechi marta aylanishi kerkaligi oldindan belgilab beriladi. Ko'pincha biror bir ifoda masalan biror ro'yxat ichidagi hamma elementlar uchun qo'llanishilshi kerak bo'lganda for ishlatilsa boladi. Bunda shu to'plam ichida biror bir ifodani/amalni iteratsiya qilib ya'ni, takrorlab chiqiladi. Bunday holllaga hayotimizdanam ko'plab misollar keltirish mumkin.\n\n| Takrorlanuvchi shart| Takrorlanuvchi harakat/ifoda| To'plam (masalan ro'yxat)|\n|:-|:-|:-|\n|Lagandagi 5 somsani yeyish kerak | Somsa yeyish | lagandagi 5 somsalar|\n|To'yga mehmonlaga taklifnoma|taklifnoma yozish|Mehmonlar|\n|1 dan 10 gacha sana|10 gacha bo'lgan har bir sonni nomini aytish|[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]|\n|Uch marta \"Urraa!\" deb qichqirish | \"Urraa!\" deb qichqirish|[1, 2, 3]|\n\n::::{layout-ncol=2}\n\n::: {.text-border-frame}\n\n***R:***<br>\n*for (element in sequence) {* <br>\n*$~~~~$ code* <br>\n*}*\n:::\n\n::: {.text-border-frame}\n\n***Python:***<br>\n*for element in sequence:* <br>\n*$~~~~$ code* <br><br>\n:::\n::::\n\n\n:::: {layout-ncol=2}\n## `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.0em;width:1.0em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell .code-input}\n\n```{.r .cell-code  code-fold=\"true\"}\nelement <- 7  # vektor uzunligi\nvec <- vector(\n  mode = \"numeric\", \n  length = element)\nfor (i in seq_len(element)){\n  vec[i] <-i\n}\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 1 2 3 4 5 6 7\n```\n:::\n:::\n\n:::\n\n## `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.0em;width:1.0em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell .code-output}\n\n```{.python .cell-code  code-fold=\"true\"}\nuzunlik = 7\nlst = []\nfor i in range(1, uzunlik + 1):\n  lst.append(i)\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1, 2, 3, 4, 5, 6, 7]\n```\n:::\n:::\n\n:::\n::::\n\nFor- sikli *qiymatlarga* yoki *indexlarga* asoslanib alanishi mumkin. Indexga asoslansa Pythonda `range(startIncl, endExl)`, R da `start:end` yoki `seq(satrt, end)` metodlari qo'llaniladi. Masalan biror ro'yxat elementlari ustida for-siklini qiymat va indeks asosida qo'llab ko'ramiz.\n\n::: {.code-r}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n::: {.cell}\n\n```{.r .cell-code}\ncities <- c(\"Qarshi\", \"Toshkent\", \"Xiva\", \"Denov\",\"Shahrisabz\", \"Fargona\")\n# qiymat asosisda ----------------------------\nfor (city in cities){\n  cat(paste0(city, \", \"))\n}\n#> Qarshi, Toshkent, Xiva, Denov, Shahrisabz, Fargona,\ncat(\"tugadi\")\n#> tugadi\n# indeks asosisa -----------------------------\nfor (i in seq_along(cities)){\n  cat(paste(i, \"-nchi ism:\", cities[i], \"\\n\"))\n}\n#> 1 -nchi ism: Qarshi \n#> 2 -nchi ism: Toshkent \n#> 3 -nchi ism: Xiva \n#> 4 -nchi ism: Denov \n#> 5 -nchi ism: Shahrisabz \n#> 6 -nchi ism: Fargona\ncat(\"sikl tugadi\")\n#> sikl tugadi\n```\n:::\n\n:::\n\n::: {.code-py}\n`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n::: {.cell}\n\n```{.python .cell-code}\ncities = [\"Qarshi\", \"Toshkent\", \"Xiva\", \"Denov\",\"Shahrisabz\", \"Fargona\"]\n# qiymat asosisda ----------------------------\nfor city in cities:\n  print(city, end = \", \")\n#> Qarshi, Toshkent, Xiva, Denov, Shahrisabz, Fargona,\nprint(\"tugadi\")\n#> tugadi\n# indeks asosisa -----------------------------\nfor i in range(len(cities)):\n  print(f\"{i}-chi ism: {cities[i]}\")\n#> 0-chi ism: Qarshi\n#> 1-chi ism: Toshkent\n#> 2-chi ism: Xiva\n#> 3-chi ism: Denov\n#> 4-chi ism: Shahrisabz\n#> 5-chi ism: Fargona\nprint(\"sikl tugadi\")\n#> sikl tugadi\n```\n:::\n\n:::\n\n\n# `while` - loop\n\nFor-sikli kabi *while*- siklida ham biror ifoda siklda takroran bajariladi. For- sikldan farqli ravishda bu yerda siklni nechi marta aylanish kerakligi aniq bo'lmaydi. Toki shart qanoatlantirlgan kean, siklda ifoda takrorlanaveradi, yani qachonki shart bajarilmasa dastur sikl ichidagi amalni bajarishdan toxtaydi. Masalan \"To'ymaginimizcha ovqatni yeyaveramiz\" - ya'ni toki bu yerdagi shart (hali to'ymadim) qanoatlantrilsa, ovqat yeyishdan toxtamaymiz. Qachonki shart qanoatlantrililmasa (tOydim) ovqat yeyishdan to'xtaymiz. Yoki boshqa misol, chanqog bosilmaguncha suv(bir stakan, ikki stakan,...) suv ichuramiz. \n\nWhile siklida nechi marta aylanishi aniq bolmagani uchun, unga qachondir shartni qanoatlantirmaydigan logika qurisch kerak. Bunig uchun boshida, initial (boshlovchi) son belgilanadi, bu son takroryi harakatni ifodalaydi va kupincha `i` bilan belgilanadi (lekin qanday nomlash ixtiyoriy). Keyin sikl ichida ham shu son oshirilib (yoki kamaytirilib, agar oxiridan boshiga yurish kerak bolsa) boriladi.<br> *[Aks holda, tugallanmaydigan sikga tushib qolinadi, va buni kuch bilan toxtatish kwerak boladi!! Agar shunday hol bo'lib qolsa klaviaturada `strg` + `C` tugmalarni bosish dasturni majburiy to'xtadai]{style=\"color:red;\"}*\n\nQuyidagi misolda berilgan songacha bo'lgan raqamlar yigindisini hisoblaymiz. Masalan berilgan son n = 8, Summa = 1+2+3+4+5+6+7+8 = 36.\n\n:::: {.panel-tabset}\n## `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell .code-input}\n\n```{.r .cell-code  code-fold=\"true\"}\n##| classes: code-input\nn <- 8                # Berilgan son\ns <- 0                # boshlangich yigindi\ncount <- 0            # siklni sanash uchun initial son\nx <- 1                # harakat boshlanishi ozgaruvchiga uatiladi\nwhile(x <= n){        # har aylangada shart(i<8) tekshiriladi, false bolsa toxtaydi\n  count <- count + 1  # sikl sanovchi son har aylanganda 1 taga oshiriladi\n  s <- s + x          # ayni paytda uzgaruvchi qabul qilgan qiymat yigindiga qoshiladi\n  cat(x,\"-nchi aylanish: yigindi =\", s,  \"\\n\")\n  x <- x +1           # harakatni ifodalovchi son 1 taga oshiriladi\n}\ncat(\"1 dan 8 gach bo'lgan raqamlar yigindisi: \", s)\ncat(\"\\nSikl\", count, \"marta aylandi\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 1 -nchi aylanish: yigindi = 1 \n#> 2 -nchi aylanish: yigindi = 3 \n#> 3 -nchi aylanish: yigindi = 6 \n#> 4 -nchi aylanish: yigindi = 10 \n#> 5 -nchi aylanish: yigindi = 15 \n#> 6 -nchi aylanish: yigindi = 21 \n#> 7 -nchi aylanish: yigindi = 28 \n#> 8 -nchi aylanish: yigindi = 36 \n#> 1 dan 8 gach bo'lgan raqamlar yigindisi:  36\n#> Sikl 8 marta aylandi\n```\n:::\n:::\n\n:::\n\n## `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell .code-output}\n\n```{.python .cell-code  code-fold=\"true\"}\nn = 8\nsumma = 0\nsana = 0\ni = 1\nwhile i <= 8:   # har bir aylanganda shart tekshiriladi\n  sana += 1     # sana = sana + 1 ning qisqartmasi\n  summa += i\n  print(f\"{i}-chi aylanish: yigindi = {summa}\")\n  i += 1        # isteration nummerni bittaga oshirishni unutmaslik kerak!\nprint(f\"1 dan 8 gach bo'lgan raqamlar yigindisi: {summa}\")\nprint((f\"Sikl {sana} marta aylandi\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 1-chi aylanish: yigindi = 1\n#> 2-chi aylanish: yigindi = 3\n#> 3-chi aylanish: yigindi = 6\n#> 4-chi aylanish: yigindi = 10\n#> 5-chi aylanish: yigindi = 15\n#> 6-chi aylanish: yigindi = 21\n#> 7-chi aylanish: yigindi = 28\n#> 8-chi aylanish: yigindi = 36\n#> 1 dan 8 gach bo'lgan raqamlar yigindisi: 36\n#> Sikl 8 marta aylandi\n```\n:::\n:::\n\n:::\n::::\n\n# `break` & `continue`\n\n*break* va *continue* lar biror bir shart qanoatlantriliganda siklni ertaroq tark etish imkonini beradi. `break` orqali, agar biror shart qanoatlantirilsa butunlay sikldan chiqib ketiladi. Agar siklda joriy takrorlanish, ya'ni faqat biror qadam tashlab ketilishi kerak bolsa unda `continue` (Python) yoki `next` (R) foydalaniladi. \n\n**break** - misol uchun 10 gacha bolgan sonlarni yigindisini faqat yigindi 15 ga teng bolguncha hisoblaymiz, agar yigindi 15 ga yetsa sikldan chiqib ketiladi \n\n\n:::: {layout-ncol=2}\n## `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell .code-input}\n\n```{.r .cell-code  code-fold=\"true\"}\nsonlar <- 1:10\n# for -----------------------------------------\ny = 0                  # yigindi (boshlangich)\nfor (son in sonlar){\n  y <- y + son\n  if (y == 15){\n    break\n  }\n}\ncat(\"Yigindi for- siklda: \", y)\n\n# while ---------------------------------------\nsuma <- 0\niter <- 1\nwhile(iter <= length(sonlar)){\n  suma <- suma + iter\n  if (suma == 15){\n    break\n  }\n  iter <- iter +1\n}\ncat(\"\\nYigindi while- siklda: \", suma)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Yigindi for- siklda:  15\n#> Yigindi while- siklda:  15\n```\n:::\n:::\n\n:::\n\n## `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell .code-output}\n\n```{.python .cell-code  code-fold=\"true\"}\nnumbers = [son for son in range(1, 11)]\n# for ------------------------------------\ntotal = 0\nfor num in numbers:\n  if total == 15:\n    break\n  total += num\n\nprint(\"Yigindi for- siklda: \", total)\n# while ---------------------------------\nsum_son = 0\nqadam = 0\nwhile qadam <= len(numbers):\n  if sum_son == 15:\n    break\n  sum_son += qadam\n  qadam += 1\nprint(\"Yigindi while- siklda: \", sum_son)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Yigindi for- siklda:  15\n#> Yigindi while- siklda:  15\n```\n:::\n:::\n\n:::\n::::\n\n**continue** - bunga misol qilib yana 10 gacha bolgan sonlar ketma ketligini olamiz, va shu qatordagi rqamalr yigindisini hisoblaymiz. Agar ro'yxatda sonlar *mavjud bo'lmasa*( R da `NA`, Pythonda `None` yoki `NaN`), bu sonlar uchun siklda aylanayotganda yigindi hisoblash amalni qo'llamaymiz, boshqacha aytganda bu yerdan *hakalab* utib ketiladi.\n\n:::: {layout-ncol=2}\n## `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n::: {.code-r}\n\n::: {.cell .code-input}\n\n```{.r .cell-code  code-fold=\"true\"}\nruyhat_na <- 1:10\nruyhat_na[c(5,8, 9)]<-NA\nruyhat_na\n# for ------------------------------------------\nsum_na <- 0\nfor (m in ruyhat_na){\n\n  if (is.na(m)) { # is.na(x) Na ni tekshiradi\n    next\n  }\n  sum_na <- sum_na + m\n}\ncat(\"Yigindi by for: \", sum_na)\n# while -----------------------------------------\nna_sum <- 0\nk <- 1\nwhile(k <= length(ruyhat_na)){\n  \n  if (is.na(ruyhat_na[k])){\n    k <- k + 1\n    next\n  }\n  na_sum <- na_sum + ruyhat_na[k]\n  k <- k + 1\n}\ncat(\"\\nYigindi by while: \", na_sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1]  1  2  3  4 NA  6  7 NA NA 10\n#> Yigindi by for:  33\n#> Yigindi by while:  33\n```\n:::\n:::\n\n:::\n\n## `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1.5em;width:1.5em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n::: {.code-py}\n\n::: {.cell .code-output}\n\n```{.python .cell-code  code-fold=\"true\"}\n#import math\nruyxat = list(range(1, 11))\npos = [4, 7, 8]; target = [None, None, None]\nfor idx, val in zip(pos, target):\n  ruyxat[idx] = val\nprint(ruyxat)\n# for -----------------------------------------------\ntot_sum = 0\nfor r in ruyxat:\n  if r is None:\n    continue\n  tot_sum += r\nprint(f\"Yigindi by for: {tot_sum}\")\n# while ---------------------------------------------\nsum_total = 0\nelmt = 0\nwhile elmt < len(ruyxat):\n  if ruyxat[elmt] is None:\n    elmt += 1\n    continue\n  sum_total += ruyxat[elmt]\n  elmt += 1\nprint(f\"Yigindi by while: {sum_total}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1, 2, 3, 4, None, 6, 7, None, None, 10]\n#> Yigindi by for: 33\n#> Yigindi by while: 33\n```\n:::\n:::\n\n:::\n::::\n\n\n*While*- siklda etibor berilish kerak bolgan narsa, while da sikl index asosida aylanadi. For-siklda *for element in ruyxat* qilib shu element ustida sikl ichida biror amal bajarish mumkin, masalan *summe = summe + element*. Lekin while- siklidigi iteratsiya son, siklni aylanishini taminlovchi yoki sanab boruvchi son hisoblanadi va sikl har bir aylanganda tartibli ravishda o'sib boradi. Ushanchun sikl ichida biror ro'yxat elementiga murojat qilish uchun bu sonni ro'xatni indeksi sifatida qo'llab, shu indeksdagi bo'yicha joylashgan ro'yxat elementiga murojaat qilish mumkin, masalan sikl *while element < len(ro'yxat)* sharti bo'yicha aylansa, royxatdagfi elementga sikl ichida *ro'yxat[element]* kurinishda murojaat qilish kerak\n\nAgar qandaydir muammo for- sikli bilan yoki boshqa funksiya bilan yechiladigan bolsa, while- siklini shaxsan man ko'p ishlatishni tavsiya qilmagan bo'lardim. Chunki while- siklda tez tugallanmas siklga tushib qolish oson, agar bazi narsalar etiborga olinmasa, yoki esdan chiqarilsa, masalan iteratsiya sonini sikl ichida birga oshirish, yoki notugri joyda oshirib quyish va hokozo.\n\nQuyidagi rasmda for- va while- sikli sexemasi tasvirlangan (Grafik [@py_Rot] dan o'zlashtirilgan).\n![For- and While- Loop](pictures/loop.png){fig-alt=\"Click for zooming\"}\n\n\n# `repeat` - loop in R\n\nBiror bir blokni/ifodani bir necha marta sikl orqali takrorlash uchun yuqoridagi sikl turlaridan tashqari R da yana `repeat`- sikli mavjud. Boshqalardan bu siklni farqi, bunda siklni tugatadiga shartlar bolmaydi. Bu sikl faqat majburiy *if* va *break* orqali toxtatiladi. Masalan biz sonlarni kvadrat darajasi to 150 ga teng yoki bo'liguniga qadar uzini o'ziga kupaytirib chiqamiz. Ya'ni 1 dan boshlab sonlarni kvadrat darajaga oshiramiz, daraja 150 dan oshib ketmasligi kerak.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- 1\ndaraja <- 0\nrepeat {\n  \n  if (daraja >= 150) {\n    break\n  }\n  cat(paste0(daraja, \" \"))\n  daraja <- d*d\n  d <- d+1\n}\n#> 0 1 4 9 16 25 36 49 64 81 100 121 144\n```\n:::\n\n\n\n# `try:` & `except` in Python\n\nDastrurlash dunyosida bir gap (qoida deysayam boladi) bor ekan: `Kutilmagan narsalarni kutish`.  Bu bilan qandaydir dastur yozib, orqaga suyanib *run* qilganda, qayerdandir qandaydir jaloba kelishi nazarda tutilgan. Bunaqa holat, manda ayniqsa endi urganayotgan boshlovchi sifatida deyarli har doim uchraydi;). Objektlar ustida qandaydir ammalr bajarganda hatoliklar (Error) har doim uchrab turadi. Ko'pincha uchraydiganlari masalan:<br>\n  - `ValueError` -- Agar kutilgan qiymat berilmasa, masalan yoshni hisoblash uchun tug'ilgan yil kerak va bu butun son shaklidan bo'lishi kerak. Buni uchun foydalanuvchidan tugilgan yili suralganda, bilmasdan butun son emas, o'nli qilib kiritib qo'ysa, yoki matn shaklida, bu hatolik kelib chiqadi.\n  \n  - `TypeError` -- Sonlar sutida amal bajargand, ularni turi bir-biriga mis kelmasa, malasan ikki sonni bo'lganda, ularni biri boshqa turga ega bo'lsa, masalan matn shaklida: x = 40, y = \"10\" -> x / y.\n  \n  - `KeyError` -- bu asosan Python lug'atlarida (dictionaries) uchraydi, agar mavjud bo'lmagan kalit chaqirilganda.\n  \n  - `ZeroDivisionError:` -- Bu hatolik sonni 0 ga bo'lish amali bajarilganda kelib chiqadi, chunki sonni 0 ga bolib bolmaydi.\n  - `NameError:` -- bu dastur paytida qandaydir mavjud bo'lmagan o'zgaruvchi nomi bilan biror bir o'zgaruvchiga murojaat qilingada kelib chiqadi.\n  \n  - *va hokozo ...*\n  \nBunday hatoliklarda, dastur ishga tushirilganda shu hatoliklar uchragan joygacha kod bajarilada, hatolik yuz bersa u yogiga o'tmaydi, demak dastur to'xtab qoladi. Shunday hatoliklarni oldini olish uchun Python da `try:` va `except` lardan foydalaniladi. `try`- iofasini ishlash prinsipi quyidagicha:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntry:\n  \n  # Bu yerda bajarilishi kerak bolgan kod\n  \nexcept ZeroDivisionError:\n  # Bu yerda ZeroDivisionError hatosini tugrilaydigan kod\n\nexcept TypeError:\n  # Buy erda TypeError ni haytosini tugrilaydigan kod\n```\n:::\n\n\nQuyidagi misolda vazifa quyidagicha: ikkita *a* va *b* ro'yxat berilgan. Ro'yxat (a) elementlarini ro'yxatdagi (b) elementlaga bo'lish kerak. Buni uchun for- sikldan foydalaniladi. Ro'yxat elementÃ¶ari ichida 0 va matn shaklidagilari ham bo'lgani sababli yuqoridagi hatoliklar uchrashi aniq. Buni try- va except bilan oldini olish kerak.\n\n\n::: {.cell}\n\n```{.python .cell-code}\na = [1, 0, 4, 5, 4, 8]   \nb = [2, 1, 3, 0, \"3\", 4]\nprint(\"a: \", a)\nprint(\"a: \", b)\nprint(\"----------------------------------\")\nfor x, y in zip(a,b):\n  \n  try:\n    z = x/y\n    print(f\"{x} / {y} = {z}\")\n  except ZeroDivisionError:\n    print(f\"{x} / {y} = ZeroDivisionError: Sonni 0 ga bo'lib bo'lmaydi!\")\n    x = 0\n    y = 0\n  except TypeError:\n    print(f\"{x} / {y} = TypeError: Sonlar bir xil turda (int) bo'lishi kerak!\")\n    x = int(x)\n    y = int(y)\n    \nprint(\"\\nTugadi, topshiriq muvaffaqiyatli bajarildi.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> a:  [1, 0, 4, 5, 4, 8]\n#> a:  [2, 1, 3, 0, '3', 4]\n#> ----------------------------------\n#> 1 / 2 = 0.5\n#> 0 / 1 = 0.0\n#> 4 / 3 = 1.3333333333333333\n#> 5 / 0 = ZeroDivisionError: Sonni 0 ga bo'lib bo'lmaydi!\n#> 4 / 3 = TypeError: Sonlar bir xil turda (int) bo'lishi kerak!\n#> 8 / 4 = 2.0\n#> \n#> Tugadi, topshiriq muvaffaqiyatli bajarildi.\n```\n:::\n:::\n\n\n\n# References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}