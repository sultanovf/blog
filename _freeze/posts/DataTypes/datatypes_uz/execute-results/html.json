{
  "hash": "74faa20d8972248c5d33aea331e5519f",
  "result": {
    "markdown": "---\ntitle: |\n  R & Python: Types of Data\\\n  {{< fa language >}} in Uzbek\n\ndescription: | \n  \\\"Data is like garbage. Youâ€™d better know what you are going to do with it before you collect it.\\\" <br> ~ Mark Twain.\n\nauthor: \"Fazliddin Sultonov\"\ndate: \"2024-01-13\"\ndate-format: \"MMM D, YYYY\"\ntitle-block-banner: true\nhighlight-style: pygments\ncategories: [R, Python, Data Types, Uzbek]\n\n# Code execute options\nexecute: \n  echo: true\n  eval: true   # Include cell source code in rendered output\n\n# Output\nformat: \n  html:\n    # Links\n    link-external-icon: false\n    link-external-newwindow: true\n    #code-tools:\n    #  toggle: true\n    # Sections\n    toc: true\n    toc-location: left\n    toc-title: \"Table of Contents\"\n    toc_float: true\n    theme: spacelab\n    highlight-style: github\n    engine: knitr\n    css: custom.css\n\n# Chunk Options\nknitr:\n  opts_chunk:\n    comment: \"#>\" \n    class-output: \"code-output\"\n    # class-source: \"code-output\"\n  opts_knit: \n    warning: false\n    error: false\n# bibliography\nbibliography: references.bib\nnocite: |\n  @*\n---\n\n\n![](datatype_uz.png)\n\n\n::: {.cell}\n\n:::\n\n\n---\n\nBu yerda ma'lumotlar turi (Data Type) hamda ular bilan R va Python da ishlash haqida o'qigan/o'rgangan/tushunganlarimni qisqacha tushuntirishga harakat qilaman, demak bu kontentni mani konspektim desayam boladi;). Avvalo, bu artikelning tuzilishi, `Input(Codeblock)`, `Output(Natija)`, eslatma va shunga o'hshash narsalar qanday kurinishdaligi haqida qisqacha tushunchadan boshlamoqchiman, yan'i yozilmaning  tuzilishi,\n\n::: {.column-margin}\n**Input(Codeblock)**- Quyida shunchaki *Input* deb ketilade va konsolga kiritilgan R yoki Python kodlari nazarda tutiladi, **Output(Result)**- Quyida shunchaki *Output* deb ketiladi va kiritlgan kodning konsoldagi natijasi nazarda tutiladi.\n:::\n\n## Struktur\n\nR va Python uchun kiritilgan kod yonma-yon yoki tabsetlarda ko'rsatilishi mumkin. [R-Sourse ochiq ko'k]{style=\"background-color: lightcyan\"} rangda va [Python-Sourse sariq]{style=\"background-color: yellow\"} rangda ko'rsatiladi. Output natijalarining satrlari `#>` belgisi bilan boshlanadi. Quyida R va Pythonda oddiy textni ekranga chiqarish kodining natijasi tabset sifadida ko'rsatilgan:\n\n::: panel-tabset\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n::: code-r\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"Hallo R Lover!\")\n#> Hallo R Lover!\n```\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n::: code-py\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(\"Hallo Python Lover!\")\n#> Hallo Python Lover!\n```\n:::\n\n:::\n:::\n\nMuhim narsalar rang bilan ajratib ko'rsatilgan va mos ravishda belgilangan:\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## Batafsil ma'lumot uchun bu yerga bosing\n\nR va Pythondagi Input va Output taqqoslanmagan hollarda, masalan faqat o'zgaruvchi yaratilsa va uni ustida qandaydir amallar bajarilsa kod blocklari, ya'ni yuqorida aytilganidek, Pyton sariq va R och ko'k rangda alohida ranglarda ajratib kursatilmaydi:\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"show the code\"}\n# Python engine\n# a va b o'zgaruvchilariga 42, 13 qiymatlarini biriktirish va ularni yigindisini hisoblash\na = 42\nb = 13\na + b\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-output}\n#> 55\n```\n:::\n:::\n\n\n`reticulate` paketi yoki bibliotekasi Python da yaratilgan o'zgaruvchilar bilan R da ishlashni davom etishni taminlaydi, ya'ni man R da bu o'zgaruvchini boshqatdan yaratishim shart emas.\n\n::: {.column-margin}\n`reticulate`- paketi (R da malum funksiyalarga ega bo'lgan to'plam yoki biblioteka, Pythonda modul deyiladi), R va Python o'rtasida o'zaro ishlashni taminlaydigan vosita. Bu paket orqali Pythonni R da chaqirish, Python modullarini import qilish va R da Python-dan interaktiv foydalanish imkonini beradi. Buning uchun avval u ishhga tushirilishi kerak ya'ni yuklab olishi kerak. Masalan Pythonda pandas modulidan foydalanish uchun yuklash y'ani import qilisch kerak: `mport pandas as pd`, keyin esa modul ichidagi funksiyalarni ishlatisch imkoniyati boladi, R da ham shunday, ular Paket engl. *Package* deyiladi, ulardan foydalanish uchun, avval kerakli paketni yuklash kerak, R da esa masalan retikulate paketi `library(retikulate)` tarzda yuklanadi yani ishga tushiriladi, undan oldin esa paketni tushirib olish kerak: `install.packages(\"reticulate\")`. Ko'proq malumotni reticulate [saytidan](https://rstudio.github.io/reticulate/) olish mumkin.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show the code\"}\n# R engine\n# a und b o'zgaruvchilari qiymatlarini ko'paytirish \n# (R da, o'zgaruvchilar yuqorida Pythonda yaratilgan)\npy$a * py$b\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-output}\n#> [1] 546\n```\n:::\n:::\n\n:::\n\n\nBiror bir ifodaning tushunchasi yoki eslatmalar yon tomonda (o'ngda) izoh kabi keltiriladi. Masalan tekst davomida Variable ishlatilsa, u haqdagi ma'lumotni o'ng tomonda keltirilgan izohdan olish mumkin\n\n::: {.column-margin}\n**Variable** - o'zgaruvchi bo'lib, bunda har xil ko'rinishdagi qiymatlarga, ma'lumotlarga, data frame yani jadvallarga berilgan nom nazarda tutiladi.\n:::\n\nYuqorida ta'kidlanganidek, biror narsa o'qish va o'rganish jarayonida o'zimga konspekt qilib olaman, shunda tushunishim osonrog', bu mandagi ko'nikma, lekin hammada har xil. Bu yerda es shu jarayonda o'rgangan va tushunganlarimni baham ko'rmoqchiman va umid qilamanki, bu R yoki Python tillarini manga o'xshab boshidan o'rganmoqchi bo'lhganlar uchun qiziqarli va foydali boladi. Grammatik, imloviy va/yoki orfografik xatolar uchun oldindan uzr so'raladi;). \\n\nBirinchi navbatda gap nima qadilagi to'g'risida ikki og'iz:\n\n## What is it about\n\nBu konspektda ma'lumotlarning turlari engl. **Data Types**, ularning nima uchun va qanday farqlanishi undan tashqari R va Pythonda ular bilan ishlash haqida gap boradi. Bunda e'tibor ko'proq muhim bolgan ya'ni kundalik hayotda biz ko'p duch keladigan, ishlatadigan va ko'pincha ular bilan shug'ullanishimiz mumkin bo'lgan ma'lumotlar turlarini yoritishga harakat qilinadi.Birinchi marta o'qib turgan yoki eshitgan kalajakda karak bolmasligi mumkin bolgan m'lumot turlariga fokus qaratilmaydi, masalan murakkab ma'lumot turlari (Complex Data Types) yoki shunga o'xshagan R-dagi Raw Data Types, Python-dagi Bytes Data Types. Aytilgandek fokus kerakli deb hisoblangan ma'lumot turlariga qaratiladi. \\n\\n\n\nAvvaliga shuni oydinlashtirmoqchimanki,\n\n## What the data types are\n\nHar xil turdagi ma'lumotlar o'rtasida qanday farqlar mavjudligi va nima uchun ma'lumotlar turlari umuman farqlanishi haqida gap ketganda hayolimizga ma'lumotlar bilan ishlashda kundalik hayotda eng ko'p duch keladigan raqamlar va matnlar o'rtasidagi farq kelishi mumkin. Biz ma'lumotlar bilan ishlashni davom ettirmoqchi bo'lganda va ular ustida qandaydir amallarni bajarmoqchi, hisob-kitoblarni amalga oshirmoqchi bo'lganda, ular o'rtasidagi farqning ham muhimligi kelib chiqadi. Bunda ma'lumotlar o'zgaruvchilarda saqlanadi, shunda dastur ushbu ma'lumotlarga murojaat qilishi mumkin. Demak kompyuter ham birinchi navbatda tushunishi kerak, masalan ma'lumot raqammi yoki matnmi, ayniqsa u bu ma'lumot ustida qandaydir amal bajarishi kerak bolsa. Bu o'zgaruvchilarni biz R yoki Python-da **`object`**lar deb atashimiz mumkin. Eslab qolish kerak bolgan muhim narsa shuki, aynan ushbu *objektlarning turi ma'lumotlar qay tarzda saqlanishi va taqdim etilishini belgilaydi.* Masalan, *Integer* turi butun son 42 ni misol uchun *var_son* sifatida saqlashga imkon beradi, va bu raqam *var_son* objekti bilan ifodalanadi. Ko'p dasturlash tillaridan farqli ravishda, Python va R o'zgaruvchi yaratislishida turni ko'rsatishni yoki aniq tur bilan belgilashni talab qilmaydi. Ob'ektni yaratishda ular avtomatik ravishda uning turini aniqlaydi. Shuning uchun ular **OOP**(*Object Oriented Programming*)-Dasturlash tillariga kiradilar.\\n\n\n::: {.column-margin}\n**Object** - R yoki Python-da biz ma'lumotlarni object sifatida saqlashimiz mumkin, masalan bir yoki bir necha qiymatlarni, jadvallarni, modellarni, biror bir amalning natijalarini, funksiyalar etc.\n:::\n\nUmid qilamanki, ma'lumotlar turi nima ekanligi haqida kengroq tasavvurga ega boldik `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:indianred;overflow:visible;position:relative;\"><path d=\"M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm177.6 62.1C192.8 334.5 218.8 352 256 352s63.2-17.5 78.4-33.9c9-9.7 24.2-10.4 33.9-1.4s10.4 24.2 1.4 33.9c-22 23.8-60 49.4-113.6 49.4s-91.7-25.5-113.6-49.4c-9-9.7-8.4-24.9 1.4-33.9s24.9-8.4 33.9 1.4zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm165.8 21.7c-7.6 8.1-20.2 8.5-28.3 .9s-8.5-20.2-.9-28.3c14.5-15.5 35.2-22.3 54.6-22.3s40.1 6.8 54.6 22.3c7.6 8.1 7.1 20.7-.9 28.3s-20.7 7.1-28.3-.9c-5.5-5.8-14.8-9.7-25.4-9.7s-19.9 3.8-25.4 9.7z\"/></svg>`{=html}. Quyida R va Python-da ko'p ishlatiladigan asosiy ma'lumot turlarini ko'rib chiqamiz:\n\n## Frequently used basic data types in Python and R\n\nYuqorida aytilganidek, ma'lumotlar R va Python-da ob'ektlar sifatida saqlanadi. Har bir ob'ekt shu nomga qiymat berish orqali nom oladi. Masalan, 42 raqamini *var_numb* nomi bilan yoki \"world\" so'zini *var_txt* nomi bilan saqlashim mumkin. R yoki Python masalan 42 ni son ya'ni raqam sifatida qabul qiladi. Ammo bu raqamni saqlashda Python va R boshqacha yo'l tutadi, R uni *numeric* ya'ni o'nlink son sifatida saqlaydi. Agar raqam butun son sifatida bo'lishi kerak bolsa, R ni bu sonni butun son sifatida saqlashiga majburlash kerak boladi. Python buning aksini qiladi, bu raqamni *int* sifatida saqlaydi, agar men uni o'nlik son (engl. float) sifatida xohlasam, turni belgilashim yoki shu turga aylantirishim kerak.\\\n\nBu erda R va Python-da umumiy asosiy ma'lumotlar turlarining umumiy ko'rinishi [@WouterCo ga asoslangan] qisqcha jadval sifatida tasvirlangan:\n\n| `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:2em;width:2em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} | Example                            | `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:2em;width:2em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html} | Example                            |                Description |\n|:--------------|:--------------|:--------------|:--------------|--------------:|\n| [integer]{style=\"color: blue;\"}                                                | [42L]{style=\"color: red;\"}         | [int]{style=\"color: blue;\"}                                                | [42]{style=\"color: red;\"}          |               Butun Sonlar |\n| [double]{style=\"color: blue;\"}                                                | [42.33]{style=\"color: red;\"}       | [float]{style=\"color: blue;\"}                                              | [42.33]{style=\"color: red;\"}       | Real/O'nlik sonlar |\n| [character]{style=\"color: blue;\"}                                              | [\"Text\"]{style=\"color: red;\"}      | [str]{style=\"color: blue;\"}                                                | [\"Text\"]{style=\"color: red;\"}      |       Satrlar, Matnlar |\n| [logical]{style=\"color: blue;\"}                                                | [TRUE, FALSE]{style=\"color: red;\"} | [bool]{style=\"color: blue;\"}                                               | [True, False]{style=\"color: red;\"} |               Mantiqiy qiymatlar |\n\n: {tbl-colwidths=\"\\[14,18,12,17,39\\]\"}\n\nR dasturida *integer* va *double* ko'pincha **numeric** sifatida umumlashtirilib tasvirlanadi.  Jadvaldan kelib chiqb aytish mumkinki, bizga R va Pythond-da eng kup kerak boladigan va biz ular bilan eng kup ishlaydigan 3 ta asosiy ma'lumotlar turi bor. Bular: **numeric** - ya'ni butun (*integer*) va o'nlik (*float*) sonlaridan tashkil topgan raqamli ma'lumot turlari, **logical** - ya'ni mantiqiy ma'lumot turlari va **textual** - ya'ni matnli (*strings*) malumot turlaridan tashkil topgan.\\n\n\nEndi alohida turlarni ko'rib chiqamiz.\n\n### integer/int\n\nInteger - butun sonni ifodalaydi masalan, 7, -7. R da orqasida `L` qoyilgan raqamlar butun son sifatida ifodalanadi. Nima uchun \"L\" turishi kerakligini man ham aniq bilmayman;). Ma'lumki R bu C dasturlash tiliga asoslanib yaratilgan dastur. C dasturlash tilida L *long integer* ma'nosini bergani uchun, R-da ham shunchaki o'zlashtirib olingan bolsa kerak. Python-da butun sonlar odatdagidek *integer* sifatida saqlanadi.\n\n::: {layout=\"[[50,50], [100]]\"}\n::: code-r\n***R***\n\n\n::: {.cell}\n\n```{.r .cell-code}\nri1 <- 11L\nri2 <- -12L\nri3 <- 13.0\nri4 <- \"123\"\nprint(class(ri1))\n#> [1] \"integer\"\nprint(class(ri2))\n#> [1] \"integer\"\nprint(class(ri3))\n#> [1] \"numeric\"\nprint(class(ri4))\n#> [1] \"character\"\n```\n:::\n\n:::\n\n::: code-py\n***Python***\n\n\n::: {.cell}\n\n```{.python .cell-code}\npi1 = 11\npi2 = -12\npi3 = 13.0\npi4 = \"123\"\nprint(type(pi1))\n#> <class 'int'>\nprint(type(pi2))\n#> <class 'int'>\nprint(type(pi3))\n#> <class 'float'>\nprint(type(pi4))\n#> <class 'str'>\n```\n:::\n\n:::\n:::\n\nOb'ektning qaysi turiga ega ekanligini bilish yoki ko'rsatish uchun R-da ***`class()`*** va Pythonda ***`type()`*** funksiyasi mavjud. R dasturida obyektlar **`<-`** va Python-da **`=`** bilan biriktiriladi. Umuman olganda, R `=` bilan ham ishlaydi, lekin strelka keng tarqalgan, va R-da strelka orqali biriktirish tavsiosa qilinadi.\n\n::: {.callout-note collapse=\"true\"}\n## More about assignment in R: `<-` or `=` ?\n\nR-da ob'ektlarni `<-` bilan belgilash odatiy hol, Pythonda esa `=` bilan biriktiriladi. Umuman olganda, R ham teng belgisi bilan ishlaydi. Lekin strelkani ishlatish afzalroq va hatodan holiroq boladi. Tenglik belgisi biror bir funksiya ichida biriktirish uchun ishlatiladi. Misol tariqasida kichkina demonstartsiya:\\\nBu yerda man 1 dan 15 gacha sonlarga ega bolgan vektorni *vec* variabliga biriktiraman va vektor (1 dan 15 gacha sonlar) yigindisini hisoblaayman:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(vec = 1:15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-output}\n#> [1] 120\n```\n:::\n:::\n\n\nAgar man *vec* ob'ektini yana chaqirsam hatolik yuz beradi, chunki bu objekt faqat funksiya ichida mavjud :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(vec)\n```\n\n::: {.cell-output .cell-output-error}\n```\n#> Error in eval(expr, envir, enclos): Objekt 'vec' nicht gefunden\n```\n:::\n:::\n\n\nEndi shu narsani `<-` bilan qilib koraman:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(vec <- 1:15)\n#> [1] 120\nprint(vec)\n#>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n```\n:::\n\n\nShuning uchun biriktirishda kopincha strelka tavsiya qilinadi va ishlatiladi. Koproq ma'lumotlarni buy erdan: [Style guide von Hadley Wickham](http://adv-r.had.co.nz/Style.html) va bu yerdan: [Googleâ€™s R Style Guide](https://google.github.io/styleguide/Rguide.html) olish mumkin\n:::\n\n**`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:2em;width:2em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} $~$ -- $~$ Check for integer**\\\nR-da ***`is.integer()`*** yoki ***`inherits(object, \"type\")`*** unksiyasidan foydalanib ob'ekt turini tekshirishingiz mumkin.\n\n::: code-r\n***R***\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check in R if a number is integer\nis.integer(ri1)            # Is 11L integer?\n#> [1] TRUE\ninherits(ri2, \"integer\")   # Is -12 integer?\n#> [1] TRUE\nis.integer(ri3)            # Is 13.0 integer?\n#> [1] FALSE\nis.integer(ri4)            # Is \"123\" integer?\n#> [1] FALSE\ninherits(ri4, \"character\") # Is \"123\"character?\n#> [1] TRUE\n```\n:::\n\n:::\n\n**-- Convert to integer in R**\\\nAytilganidek, sonlarni orqasida L bolmasa, R bu objektni numeric, ya'ni o'nlik son yoki float *(yuqoridagi misoldagi ri3 ob'ektiga qarang)*. Men R buyurishim kerakki, u sonni butun son sifatida saqlasin. Buning uchun ***`as.integer()`*** funksiyasidan foydalanishim mumkin.\n\n::: code-r\n***R***\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show the code\" code-line-numbers=\"true\"}\n# Making R treat the object as an integer\nprint(class(ri3))              # Type of 13.0\nprint(class(ri4))              # Type of \"123\"\nprint(class(as.integer(ri3)))  # Forsing 13.0 to integer\nprint(class(as.integer(ri3)))  # Forsing \"123\" to integer\nprint(class(FALSE))            # Type of FALSE\nprint(class(TRUE))             # Type of True\nprint(as.integer(FALSE))       # FALSE as Integer\nprint(as.integer(TRUE))        # TRUE as Integer\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-output}\n#> [1] \"numeric\"\n#> [1] \"character\"\n#> [1] \"integer\"\n#> [1] \"integer\"\n#> [1] \"logical\"\n#> [1] \"logical\"\n#> [1] 0\n#> [1] 1\n```\n:::\n:::\n\n:::\n\n**`<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:2em;width:2em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html} $~$ -- $~$ Check for int**\\\nPython-da tekshirishning bir necha yo'llari mavjud: ***`isinstance(ob'ekt, turi)`*** funksiyasi orqali huddi, R-dagi `inherits(ob'ekt, \"\"turi\")` kabi yoki ob'ekt turini ma'lumot turi bilan tenglashtirib ham tekshirish mumkin. , masalan, ***`type(object) ==/is int()`***. Shuningdek, ***`is_integer()`*** funksiyasi ham mavjud. Bu funksiya *float*-o'nlik nnni *int*-butun songa tekshirishda ishlaydi, boshqa turlarida ishlamaydi. Boshqa turlari uchun manimcha *sumpy* moduli kerak. Uni ishlatib kurmadim, chunki yuqorida keltirilgan funksiyalarni uzi ham yetadi, boshqacha aytganda Rimga olib boradigan boshqa yo'llar ham bor. `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:indianred;overflow:visible;position:relative;\"><path d=\"M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm177.6 62.1C192.8 334.5 218.8 352 256 352s63.2-17.5 78.4-33.9c9-9.7 24.2-10.4 33.9-1.4s10.4 24.2 1.4 33.9c-22 23.8-60 49.4-113.6 49.4s-91.7-25.5-113.6-49.4c-9-9.7-8.4-24.9 1.4-33.9s24.9-8.4 33.9 1.4zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm165.8 21.7c-7.6 8.1-20.2 8.5-28.3 .9s-8.5-20.2-.9-28.3c14.5-15.5 35.2-22.3 54.6-22.3s40.1 6.8 54.6 22.3c7.6 8.1 7.1 20.7-.9 28.3s-20.7 7.1-28.3-.9c-5.5-5.8-14.8-9.7-25.4-9.7s-19.9 3.8-25.4 9.7z\"/></svg>`{=html}\n\n::: code-py\n***Python***\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Check in Python if a number is integer\nisinstance(pi1, int) # Is 11 integer?\n#> True\ntype(pi2) == int     # Is -12 integer?\n#> True\nisinstance(pi3, int) # Is 13.0 integer?\n#> False\ntype(pi4) is int     # Is '123' integer?\n#> False\n```\n:::\n\n:::\n\n**-- Convert to int in Python**\\\nPython raqamlarni butun sonlar sifatida saqlaydi. Agar men uni float ya'ni o'nlik son sifatida xohlasam, men float turiga o'tkazishim kerak. Agar menda matn(matn sifatida saqlangan sonlar), Float yoki Logical kabi turdagi ma'lumotlarim bo'lsa, men ob'ektni ***`int()`*** funksiyasiga o'tkazish orqali uni Python-da Integerga aylantira olaman.\n\n::: code-py\n***Python***\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"show the code\" code-line-numbers=\"true\"}\n# Making Python treat the object as an integer\nprint(type(pi3))        # Type of 13.0\nprint(type(pi4))        # Type of \"123\"\nprint(type(int(pi3)))   # Forsing 13.0 to integer\nprint(type(int(pi3)))   # Forsing \"123\" to integer\nprint(type(False))      # Type of FALSE\nprint(type(True))       # Type of True\nprint(int(False))       # FALSE as Integer\nprint(int(True))        # TRUE as Integer\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-output}\n#> <class 'float'>\n#> <class 'str'>\n#> <class 'int'>\n#> <class 'int'>\n#> <class 'bool'>\n#> <class 'bool'>\n#> 0\n#> 1\n```\n:::\n:::\n\n:::\n\n### numeric/float\n\nFloat bu aniqligi uncha katta bo'lmagan suzuvchi nuqtali sonlar, *Floating point numbers*, Python-da float sifatida ifodalanadi. R odatda (orqasiga L harfi quo'yilmagan) sonlarni *float* () sifatida saqlaydi. Umuman olganda R sonlarni `numeric` sifatida ifodalaydi. Ular integer yoki float bo'lishi mumkin. Misol uchun R 12 sonini float, ya'ni 12.0 sifatida saqlaydi, `class()` funksiyasi bilan u turni *`numeric`* sifatida ifodalaydi. R-da ma'lumot turni tekshirish uchun ishlatilishi mumkin bo'lgan yana bir funksiya ham mavjud: ***`typeof()`***. Bu funksiya orqali 12 sonini `double` sifatida kursatadi, ehtimol bu C dasturlash tilidan. O'ylaymanki, quyidagi misol nimani nazarda tutayotganimni aniqroq qiladi;).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show the code\" code-line-numbers=\"true\"}\n# class() und typeof()\nclass(10)    # numeric\ntypeof(10)   # double\nclass(10L)   # integer\ntypeof(10L)  # integer\nclass(10.0)  # numeric\ntypeof(10.0) # double\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-output}\n#> [1] \"numeric\"\n#> [1] \"double\"\n#> [1] \"integer\"\n#> [1] \"integer\"\n#> [1] \"numeric\"\n#> [1] \"double\"\n```\n:::\n:::\n\n\n**-- Check numeric/float**\\\nBu yerda ham yuqorida Integer uchun keltirilgan funksiyalardan foydalanish mumkin, R-da *is.*-dan keyin integerni o'rniga *numeric* yoku *double* qoyiladi: **`is.numeric(*obj*)`** yoki **`is.double(*obj*)`** yoki **`inherits(*obj*, \"numeric\")`**. Python-da ham yuqoridagi integer uchun qollangan funksiyadan foydalanish mumkin: **`type(*obj*)`**, yoki mantiqiy taqqoslash orqali: **`type(*obj*) is float`** yoki **`type(*obj*) == float`** yoki **`isinstance(*obj*, float)`**.\n\n::: {layout=\"[[50,50], [100]]\"}\n::: code-r\n***R***\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf1 <- 3.14\nrf2 <- 17\nrf3 <- 20L\nprint(class(rf2))  # class()-Type of 17\n#> [1] \"numeric\"\nprint(class(rf3))  # class()-Type of 20L\n#> [1] \"integer\"\nprint(typeof(rf2)) # typeof()-Type of 17\n#> [1] \"double\"\nprint(typeof(rf3)) # typeof()-Type of 20L\n#> [1] \"integer\"\nis.numeric(rf1)    # Is 3.14 numeric?\n#> [1] TRUE\nis.double(rf2)     # Is 17 double?\n#> [1] TRUE\nis.numeric(rf3)    # Is 20L numeric?\n#> [1] TRUE\nis.integer(rf3)    # Is 20L integer?\n#> [1] TRUE\n```\n:::\n\n:::\n\n::: code-py\n***Python***\n\n\n::: {.cell}\n\n```{.python .cell-code}\npf1 = 3.14\npf2 = 17\npf3 = 20\nprint(type(pf1))      # Type of 3.14\n#> <class 'float'>\nprint(type(pf2))      # Type of 17\n#> <class 'int'>\nprint(type(pf3))      # Type of 20\n#> <class 'int'>\nisinstance(pf1, float)# Is 3.14 float?\n#> True\nisinstance(pf1, int)  # Is 3.14 int?\n#> False\ntype(pf2) is float    # Is 17 float?\n#> False\ntype(pf3) == float    # Is 20 float?\n#> False\nisinstance(pf2, float)# Is 17 float?\n#> False\n```\n:::\n\n:::\n:::\n\n**-- Convert to numeric/float**\\\nO'nlik sonlar, ya'ni R-da numeric yoki float hosil qilish uchun yuqoridagi *as.* funksiyani bu yerda ham qollaymiz, buning uchun funksiyani shunday yozamiz: **`as.numeric(*obj*)`** oder **`as.double(*obj*)`**.\n\n::: code-r\n***R***\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show the code\" code-line-numbers=\"true\"}\n# Making R treat the object as an integer\nprint(class(rf2))              # Type of 17\nprint(class(rf3))              # Type of 20L\nprint(class(as.numeric(rf2)))  # Forsing 17 to nomeric\nprint(class(as.double(rf3)))   # Forsing 20L to nomeric\nprint(as.numeric(FALSE))       # FALSE as numeric\nprint(as.double(TRUE))         # TRUE as numeric\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-output}\n#> [1] \"numeric\"\n#> [1] \"integer\"\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] 0\n#> [1] 1\n```\n:::\n:::\n\n:::\n\nPythonda buni **`float(*obj*)`** funksiyasi yordamida amalga oshirishim mumkin.\n\n::: code-py\n***Python***\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"show the code\" code-line-numbers=\"true\"}\n# Making Python treat the object as an integer\nprint(type(pf2))        # Type of 17\nprint(type(pf3))        # Type of 20\nprint(type(float(pf2))) # Forsing 17 to float\nprint(type(float(pf3))) # Forsing 20 to float\nprint(float(False))     # FALSE as float\nprint(float(True))      # TRUE as float\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-output}\n#> <class 'int'>\n#> <class 'int'>\n#> <class 'float'>\n#> <class 'float'>\n#> 0.0\n#> 1.0\n```\n:::\n:::\n\n:::\n\n### character/str\n\nNomidan ko'rinib turibdiki, bunday ma'lumotlar belgilar, harflarni, satr va matnlarni o'z ichiga olgan ma'lumot turlaridir. R-da ular `character` va Python-da `str` sifatida tavsiflanadi. Amalda, matnli ma'lumotlar raqamli ma'lumotlar ya'ni sonlar kabi ko'p qo'llaniladigan ma'lumot turlaridandir. Masalan, tahlil qilinadigan ma'lumotlar to'plamida kategorik o'zgaruvchilar misol uchun \"erkak' yoki \"ayol\" bo'lishi mumkin va hokozo\\\n\nWie der Name schon sagt, solche Daten sind Strings, die Zeichen, Buchstaben enthalten. In R werden sie als `character` und in Python als `str` charakteresiert. Mit Strings hat man in der Praxis auch wie mit numerischen Daten hÃ¤ufig zu tun. Beispielweise kÃ¶nnen im zu analysierenden Datensatz auch kategoriale Variablen: \"mÃ¤nnlich\", \"weiblich\" vorhanden sein usw.\\\nSatrlar yoki matn ko'rinishidagi ma'lumotlar R va Python-da qo'sh apostrof ichida `'matn'` yoki qo'shtirnoq ichida `\"matn\"` ko'rsatilishi mumkin. Satr uzunligi funksiyasi R uchun: ***`nchar()`*** va Python ***`len()`*** uchun. R-da *stringr* paketidan `str_lenght(\"matn\")` funksiyasini ham ishlatisch mumkin.\n\n::: panel-tabset\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}\n\n::: code-r\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\n# Examples for Characters\nrt1 <- \"123\"\nrt2 <- \"Hello\" \nrt3 <- \"World\"\nglue::glue(\"Class of rt1: {class(rt1)}\")\n# Adding Strings \nglue::glue(\"glue() funksiyasi orqali: {rt2} {rt3}\")\npaste(\"paste() funksiyasi orqali:\", rt2, rt3, sep = \" \")\n# Compare Strings\nrt2 == \"Hello\"\nrt2 == \"HELLO\"\nrt1 == 123\n# Length of String\nglue(\"\\\"123\\\" satrining uzunligi: {nchar(rt1)}\")\nglue(\"\\\"Hello\\\" satrining uzunligi: {nchar(rt2)}\")\nlength(rt1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-output}\n#> Class of rt1: character\n#> glue() funksiyasi orqali: Hello World\n#> [1] \"paste() funksiyasi orqali: Hello World\"\n#> [1] TRUE\n#> [1] FALSE\n#> [1] TRUE\n#> \"123\" satrining uzunligi: 3\n#> \"Hello\" satrining uzunligi: 5\n#> [1] 1\n```\n:::\n:::\n\n:::\n\nMatnlarni bir-biriga qo'shish yoki matnlarni sonla bilan kopaytirish R uchun qiyinchilik tugdiradi\n\n::: {.callout-note collapse=\"true\"}\n## More about string operations in R\n\nAgar biz ikkita matnni birga qo'shmoqchi bo'lsak yoki satr yoki matnni raqamga ko'paytirmoqchi bo'lsak, R hatolik qaytaradi. Ehtimol, bunga imkon beradigan ba'zi paketlar bordir, qarab/izlab korish kerak. Shunday qilib, Python-da ikkita matnni bir biriga qoshish yoki matnni songa kopaytirish ishlagani kabi, R da bu ishlamaydi. *glue* paketidagi **`glue(*obj*)`** funksiyasi yoki `paste` funksiyasi orqali matnlarni bir biriga qoshib korsatish mumkin. Bu funksiya `stringr` paketida ham mavjud va uni quyidagicha ishlatish mumkin: `stringr::str_glue()`. `glue(\"The value of text is {text})` funksiyasi Python-dagi `print(f\"The value of text is {text}\")` funksiyaga o'xshaydi.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R engine\n# Satrlarni bir biriga qo'shish yoki ularni songa ko'paytirish\n# Ishlamaydi!\nsatr1 <- \"Assalomu\"\nsatr2 <- \"Alaykum\"\nsatr1 + satr2\n#> Error in satr1 + satr2: nicht-numerisches Argument fÃ¼r binÃ¤ren Operator\nsatr1 * 3\n#> Error in satr1 * 3: nicht-numerisches Argument fÃ¼r binÃ¤ren Operator\n```\n:::\n\n:::\n\n# `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html}\n\n::: code-py\n\n::: {.cell}\n\n```{.python .cell-code  code-line-numbers=\"true\"}\n# Python engine\n# Examples for Characters\npt1 = \"123\"\npt2 = \"Hello\" \npt3 = \"world\"\nprint(f\"Type of pt1: {type(pt1)}\")\n# Adding Strings / matnlarni qoshish\nprint(pt2 + \" \" + pt3) # or\nprint(f\"{pt2} {pt3}\")\n# Multiply a string by 3 / matnlarni songa kopaytirish\npt3*3\n# Compare\npt2 == \"Hello\"\npt2 == \"HELLO\"\npt1 == 123\n# Length of String\nprint(f\"LÃ¤nge von \\\"123\\\": {len(pt1)}\")\nprint(f\"LÃ¤nge von \\\"Hallo\\\": {len(pt2)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-output}\n#> Type of pt1: <class 'str'>\n#> Hello world\n#> Hello world\n#> 'worldworldworld'\n#> True\n#> False\n#> False\n#> LÃ¤nge von \"123\": 3\n#> LÃ¤nge von \"Hallo\": 5\n```\n:::\n:::\n\n:::\n:::\n\nStrings - bu keng mavzu. Bu erda faqat ma'lumotlar turi bilan bog'liq tomonlari qaraldi. Balki alohida content ham bo'lar `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:indianred;overflow:visible;position:relative;\"><path d=\"M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm177.6 62.1C192.8 334.5 218.8 352 256 352s63.2-17.5 78.4-33.9c9-9.7 24.2-10.4 33.9-1.4s10.4 24.2 1.4 33.9c-22 23.8-60 49.4-113.6 49.4s-91.7-25.5-113.6-49.4c-9-9.7-8.4-24.9 1.4-33.9s24.9-8.4 33.9 1.4zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm165.8 21.7c-7.6 8.1-20.2 8.5-28.3 .9s-8.5-20.2-.9-28.3c14.5-15.5 35.2-22.3 54.6-22.3s40.1 6.8 54.6 22.3c7.6 8.1 7.1 20.7-.9 28.3s-20.7 7.1-28.3-.9c-5.5-5.8-14.8-9.7-25.4-9.7s-19.9 3.8-25.4 9.7z\"/></svg>`{=html}.\n\n### logical/bool\n\nMantiqiy turdagi ob'ektlar TRUE/FALSE yoki 1/0 qiymatlarini olishi mumkin. Bular R da `logical` va Pythonda `bool` sifatida saqlanadi. Ofodalash tarsi ham R va Python-da farq qiladi: R-da ular katta harflarda yoziladi: [TRUE/FALSE]{style=\"color: red;\"}, Python-da esa birinchisi katta va qolganlari kichik harflarda boladi:[True/False]{style=\"color: red;\"}. \n\n::: {layout=\"[[50,50], [100]]\"}\n::: code-r\n***R***\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R engine\nrt <- TRUE\nrf <- FALSE\nclass(rt)        # Type of TRUE\n#> [1] \"logical\"\nclass(rf)        # Type of FALSE\n#> [1] \"logical\"\nis.logical(rt)   # Is TRUE logical\n#> [1] TRUE\nas.character(rt) # TRUE as character\n#> [1] \"TRUE\"\nas.character(rf) # FALSE as character\n#> [1] \"FALSE\"\nas.integer(rt)   # TRUE as integer\n#> [1] 1\nas.integer(rf)   # FALSE as integer\n#> [1] 0\nrt & rf          # rt AND rf\n#> [1] FALSE\nrt | rf          # rt OR rf\n#> [1] TRUE\n!rt              # Is not TRUE\n#> [1] FALSE\n```\n:::\n\n:::\n\n::: code-py\n***Python***\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Python engine\npt = True\npf = False\ntype(pt)  # Type of True\n#> <class 'bool'>\ntype(pf)  # Type of False\n#> <class 'bool'>\ntype(pt) is bool # Is bool\n#> True\nstr(pt)   # True as String\n#> 'True'\nstr(pf)   # False as String\n#> 'False'\nint(pt)   # True as Integer\n#> 1\nint(pf)   # False as Integer\n#> 0\npt and pf # pt AND pf\n#> False\npt or pf  # pt OR pf\n#> True\nnot pt    # Is not True\n#> False\n```\n:::\n\n:::\n:::\n\nKimgadir qayerdadir qaysidir manoda qanchadir yordami tegkan bo'lsa, bundan faqat xursand bolaman.`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:indianred;overflow:visible;position:relative;\"><path d=\"M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm177.6 62.1C192.8 334.5 218.8 352 256 352s63.2-17.5 78.4-33.9c9-9.7 24.2-10.4 33.9-1.4s10.4 24.2 1.4 33.9c-22 23.8-60 49.4-113.6 49.4s-91.7-25.5-113.6-49.4c-9-9.7-8.4-24.9 1.4-33.9s24.9-8.4 33.9 1.4zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm192-32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>`{=html} Keyingi mavzu ma'lumotlar tuzilmasi haqida bo'ladi.\n\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}