---
title: |
  R & Python: Types of Data\
  {{< fa language >}} in Uzbek

description: | 
  \"Data is like garbage. You’d better know what you are going to do with it before you collect it.\" <br> ~ Mark Twain.

author: "Fazliddin Sultonov"
date: "2024-01-13"
date-format: "MMM D, YYYY"
title-block-banner: true
highlight-style: pygments
categories: [R, Python, Data Types, Uzbek]

# Code execute options
execute: 
  echo: true
  eval: true   # Include cell source code in rendered output

# Output
format: 
  html:
    # Links
    link-external-icon: false
    link-external-newwindow: true
    #code-tools:
    #  toggle: true
    # Sections
    toc: true
    toc-location: left
    toc-title: "Table of Contents"
    toc_float: true
    theme: spacelab
    highlight-style: github
    engine: knitr
    css: /customs/style.css

# Chunk Options
knitr:
  opts_chunk:
    comment: "#>" 
    class-output: "code-output"
    # class-source: "code-output"
  opts_knit: 
    warning: false
    error: false
# bibliography
bibliography: references.bib
nocite: |
  @*
---

![](datatype_uz.png)

```{r}
#| echo: false           # R-Input NICHT anzeigen      
#| output: false         # R-Output NICHT anzeigen 
#| eval: true            # Code ausführen

# library pacman to loading and installing packages which are not installed
if(!require("pacman")){
    install.packages("pacman")
    library(pacman)
}
# Load Packages
pacman::p_load(
  "tidyverse",   # tidyverse 
  "knitr",       # knitter
  "fontawesome", # icons
  "reticulate",  # python
  "glue"         # String
  )     
#


```

---

Bu yerda ma'lumotlar turi (Data Type) hamda ular bilan R va Python da ishlash haqida o'qigan/o'rgangan/tushunganlarimni qisqacha tushuntirishga harakat qilaman, demak bu kontentni mani konspektim desayam boladi;). Avvalo, bu artikelning tuzilishi, `Input(Codeblock)`, `Output(Natija)`, eslatma va shunga o'hshash narsalar qanday kurinishdaligi haqida qisqacha tushunchadan boshlamoqchiman, yan'i yozilmaning  tuzilishi,

::: {.column-margin}
**Input(Codeblock)**- Quyida shunchaki *Input* deb ketiladi va konsolga kiritilgan R yoki Python kodlari nazarda tutiladi, **Output(Result)**- Quyida shunchaki *Output* deb ketiladi va kiritlgan kodning konsoldagi natijasi nazarda tutiladi.
:::

## Struktur

R va Python uchun kiritilgan kod yonma-yon yoki tabsetlarda ko'rsatilishi mumkin. [R-Sourse ochiq ko'k]{style="background-color: lightcyan"} rangda va [Python-Sourse sariq]{style="background-color: yellow"} rangda ko'rsatiladi. Output natijalarining satrlari `#>` belgisi bilan boshlanadi. Quyida R va Pythonda oddiy textni ekranga chiqarish kodining natijasi tabset sifadida ko'rsatilgan:

::: panel-tabset
# `r fa(name = "r-project",  height = "1em", width = "1em", fill = "steelblue")`

::: code-r
```{r}
#| collapse: true

cat("Hallo R Lover!")
```
:::

# `r fa(name = "python",  height = "1em", width = "1em",fill = "steelblue")`

::: code-py
```{python}
#| collapse: true

print("Hallo Python Lover!")
```
:::
:::

Muhim narsalar rang bilan ajratib ko'rsatilgan va mos ravishda belgilangan:

::: {.callout-caution icon="false" collapse="true"}
## Batafsil ma'lumot uchun bu yerga bosing

R va Pythondagi Input va Output taqqoslanmagan hollarda, masalan faqat o'zgaruvchi yaratilsa va uni ustida qandaydir amallar bajarilsa kod blocklari, ya'ni yuqorida aytilganidek, Pyton sariq va R och ko'k rangda alohida ranglarda ajratib kursatilmaydi:

```{python}
#| code-fold: true
#| code-summary: "show the code"

# Python engine
# a va b o'zgaruvchilariga 42, 13 qiymatlarini biriktirish va ularni yigindisini hisoblash
a = 42
b = 13
a + b
```

`reticulate` paketi yoki bibliotekasi Python da yaratilgan o'zgaruvchilar bilan R da ishlashni davom etishni taminlaydi, ya'ni man R da bu o'zgaruvchini boshqatdan yaratishim shart emas.

::: {.column-margin}
`reticulate`- paketi (R da malum funksiyalarga ega bo'lgan to'plam yoki biblioteka, Pythonda modul deyiladi), R va Python o'rtasida o'zaro ishlashni taminlaydigan vosita. Bu paket orqali Pythonni R da chaqirish, Python modullarini import qilish va R da Python-dan interaktiv foydalanish imkonini beradi. Buning uchun avval u ishhga tushirilishi kerak ya'ni yuklab olishi kerak. Masalan Pythonda pandas modulidan foydalanish uchun yuklash y'ani import qilisch kerak: `mport pandas as pd`, keyin esa modul ichidagi funksiyalarni ishlatisch imkoniyati boladi, R da ham shunday, ular Paket engl. *Package* deyiladi, ulardan foydalanish uchun, avval kerakli paketni yuklash kerak, R da esa masalan retikulate paketi `library(retikulate)` tarzda yuklanadi yani ishga tushiriladi, undan oldin esa paketni tushirib olish kerak: `install.packages("reticulate")`. Ko'proq malumotni reticulate [saytidan](https://rstudio.github.io/reticulate/) olish mumkin.
:::

```{r}
#| code-fold: true
#| code-summary: "show the code"

# R engine
# a und b o'zgaruvchilari qiymatlarini ko'paytirish 
# (R da, o'zgaruvchilar yuqorida Pythonda yaratilgan)
py$a * py$b
```
:::


Biror bir ifodaning tushunchasi yoki eslatmalar yon tomonda (o'ngda) izoh kabi keltiriladi. Masalan tekst davomida Variable ishlatilsa, u haqdagi ma'lumotni o'ng tomonda keltirilgan izohdan olish mumkin

::: {.column-margin}
**Variable** - o'zgaruvchi bo'lib, bunda har xil ko'rinishdagi qiymatlarga, ma'lumotlarga, data frame yani jadvallarga berilgan nom nazarda tutiladi.
:::

Yuqorida ta'kidlanganidek, biror narsa o'qish va o'rganish jarayonida o'zimga konspekt qilib olaman, shunda tushunishim osonrog', bu mandagi ko'nikma, lekin hammada har xil. Bu yerda es shu jarayonda o'rgangan va tushunganlarimni baham ko'rmoqchiman va umid qilamanki, bu R yoki Python tillarini manga o'xshab boshidan o'rganmoqchi bo'lhganlar uchun qiziqarli va foydali boladi. Grammatik, imloviy va/yoki orfografik xatolar uchun oldindan uzr so'raladi;). \n
Birinchi navbatda gap nima qadilagi to'g'risida ikki og'iz:

## What is it about

Bu konspektda ma'lumotlarning turlari engl. **Data Types**, ularning nima uchun va qanday farqlanishi undan tashqari R va Pythonda ular bilan ishlash haqida gap boradi. Bunda e'tibor ko'proq muhim bolgan ya'ni kundalik hayotda biz ko'p duch keladigan, ishlatadigan va ko'pincha ular bilan shug'ullanishimiz mumkin bo'lgan ma'lumotlar turlarini yoritishga harakat qilinadi.Birinchi marta o'qib turgan yoki eshitgan kalajakda karak bolmasligi mumkin bolgan m'lumot turlariga fokus qaratilmaydi, masalan murakkab ma'lumot turlari (Complex Data Types) yoki shunga o'xshagan R-dagi Raw Data Types, Python-dagi Bytes Data Types. Aytilgandek fokus kerakli deb hisoblangan ma'lumot turlariga qaratiladi. \n\n

Avvaliga shuni oydinlashtirmoqchimanki,

## What the data types are

Har xil turdagi ma'lumotlar o'rtasida qanday farqlar mavjudligi va nima uchun ma'lumotlar turlari umuman farqlanishi haqida gap ketganda hayolimizga ma'lumotlar bilan ishlashda kundalik hayotda eng ko'p duch keladigan raqamlar va matnlar o'rtasidagi farq kelishi mumkin. Biz ma'lumotlar bilan ishlashni davom ettirmoqchi bo'lganda va ular ustida qandaydir amallarni bajarmoqchi, hisob-kitoblarni amalga oshirmoqchi bo'lganda, ular o'rtasidagi farqning ham muhimligi kelib chiqadi. Bunda ma'lumotlar o'zgaruvchilarda saqlanadi, shunda dastur ushbu ma'lumotlarga murojaat qilishi mumkin. Demak kompyuter ham birinchi navbatda tushunishi kerak, masalan ma'lumot raqammi yoki matnmi, ayniqsa u bu ma'lumot ustida qandaydir amal bajarishi kerak bolsa. Bu o'zgaruvchilarni biz R yoki Python-da **`object`**lar deb atashimiz mumkin. Eslab qolish kerak bolgan muhim narsa shuki, aynan ushbu *objektlarning turi ma'lumotlar qay tarzda saqlanishi va taqdim etilishini belgilaydi.* Masalan, *Integer* turi butun son 42 ni misol uchun *var_son* sifatida saqlashga imkon beradi, va bu raqam *var_son* objekti bilan ifodalanadi. Ko'p dasturlash tillaridan farqli ravishda, Python va R o'zgaruvchi yaratislishida turni ko'rsatishni yoki aniq tur bilan belgilashni talab qilmaydi. Ob'ektni yaratishda ular avtomatik ravishda uning turini aniqlaydi. Shuning uchun ular **OOP**(*Object Oriented Programming*)-Dasturlash tillariga kiradilar.\n

::: {.column-margin}
**Object** - R yoki Python-da biz ma'lumotlarni object sifatida saqlashimiz mumkin, masalan bir yoki bir necha qiymatlarni, jadvallarni, modellarni, biror bir amalning natijalarini, funksiyalar etc.
:::

Umid qilamanki, ma'lumotlar turi nima ekanligi haqida kengroq tasavvurga ega boldik `r fa(name = "face-smile-wink", fill = "indianred")`. Quyida R va Python-da ko'p ishlatiladigan asosiy ma'lumot turlarini ko'rib chiqamiz:

## Frequently used basic data types in Python and R

Yuqorida aytilganidek, ma'lumotlar R va Python-da ob'ektlar sifatida saqlanadi. Har bir ob'ekt shu nomga qiymat berish orqali nom oladi. Masalan, 42 raqamini *var_numb* nomi bilan yoki "world" so'zini *var_txt* nomi bilan saqlashim mumkin. R yoki Python masalan 42 ni son ya'ni raqam sifatida qabul qiladi. Ammo bu raqamni saqlashda Python va R boshqacha yo'l tutadi, R uni *numeric* ya'ni o'nlink son sifatida saqlaydi. Agar raqam butun son sifatida bo'lishi kerak bolsa, R ni bu sonni butun son sifatida saqlashiga majburlash kerak boladi. Python buning aksini qiladi, bu raqamni *int* sifatida saqlaydi, agar men uni o'nlik son (engl. float) sifatida xohlasam, turni belgilashim yoki shu turga aylantirishim kerak.\

Bu erda R va Python-da umumiy asosiy ma'lumotlar turlarining umumiy ko'rinishi [@WouterCo ga asoslangan] qisqcha jadval sifatida tasvirlangan:

| `r fa(name = "r-project",  height = "2em", width = "2em", fill = "steelblue")` | Example                            | `r fa(name = "python",  height = "2em", width = "2em",fill = "steelblue")` | Example                            |                Description |
|:--------------|:--------------|:--------------|:--------------|--------------:|
| [integer]{style="color: blue;"}                                                | [42L]{style="color: red;"}         | [int]{style="color: blue;"}                                                | [42]{style="color: red;"}          |               Butun Sonlar |
| [double]{style="color: blue;"}                                                | [42.33]{style="color: red;"}       | [float]{style="color: blue;"}                                              | [42.33]{style="color: red;"}       | Real/O'nlik sonlar |
| [character]{style="color: blue;"}                                              | ["Text"]{style="color: red;"}      | [str]{style="color: blue;"}                                                | ["Text"]{style="color: red;"}      |       Satrlar, Matnlar |
| [logical]{style="color: blue;"}                                                | [TRUE, FALSE]{style="color: red;"} | [bool]{style="color: blue;"}                                               | [True, False]{style="color: red;"} |               Mantiqiy qiymatlar |

: {tbl-colwidths="\[14,18,12,17,39\]"}

R dasturida *integer* va *double* ko'pincha **numeric** sifatida umumlashtirilib tasvirlanadi.  Jadvaldan kelib chiqb aytish mumkinki, bizga R va Pythond-da eng kup kerak boladigan va biz ular bilan eng kup ishlaydigan 3 ta asosiy ma'lumotlar turi bor. Bular: **numeric** - ya'ni butun (*integer*) va o'nlik (*float*) sonlaridan tashkil topgan raqamli ma'lumot turlari, **logical** - ya'ni mantiqiy ma'lumot turlari va **textual** - ya'ni matnli (*strings*) malumot turlaridan tashkil topgan.\n

Endi alohida turlarni ko'rib chiqamiz.

### integer/int

Integer - butun sonni ifodalaydi masalan, 7, -7. R da orqasida `L` qoyilgan raqamlar butun son sifatida ifodalanadi. Nima uchun "L" turishi kerakligini man ham aniq bilmayman;). Ma'lumki R bu C dasturlash tiliga asoslanib yaratilgan dastur. C dasturlash tilida L *long integer* ma'nosini bergani uchun, R-da ham shunchaki o'zlashtirib olingan bolsa kerak. Python-da butun sonlar odatdagidek *integer* sifatida saqlanadi.

::: {layout="[[50,50], [100]]"}
::: code-r
***R***

```{r}
#| collapse: true

ri1 <- 11L
ri2 <- -12L
ri3 <- 13.0
ri4 <- "123"
print(class(ri1))
print(class(ri2))
print(class(ri3))
print(class(ri4))
```
:::

::: code-py
***Python***

```{python}
#| collapse: true

pi1 = 11
pi2 = -12
pi3 = 13.0
pi4 = "123"
print(type(pi1))
print(type(pi2))
print(type(pi3))
print(type(pi4))
```
:::
:::

Ob'ektning qaysi turiga ega ekanligini bilish yoki ko'rsatish uchun R-da ***`class()`*** va Pythonda ***`type()`*** funksiyasi mavjud. R dasturida obyektlar **`<-`** va Python-da **`=`** bilan biriktiriladi. Umuman olganda, R `=` bilan ham ishlaydi, lekin strelka keng tarqalgan, va R-da strelka orqali biriktirish tavsiosa qilinadi.

::: {.callout-note collapse="true"}
## More about assignment in R: `<-` or `=` ?

R-da ob'ektlarni `<-` bilan belgilash odatiy hol, Pythonda esa `=` bilan biriktiriladi. Umuman olganda, R ham teng belgisi bilan ishlaydi. Lekin strelkani ishlatish afzalroq va hatodan holiroq boladi. Tenglik belgisi biror bir funksiya ichida biriktirish uchun ishlatiladi. Misol tariqasida kichkina demonstartsiya:\
Bu yerda man 1 dan 15 gacha sonlarga ega bolgan vektorni *vec* variabliga biriktiraman va vektor (1 dan 15 gacha sonlar) yigindisini hisoblaayman:

```{r}
sum(vec = 1:15)
```

Agar man *vec* ob'ektini yana chaqirsam hatolik yuz beradi, chunki bu objekt faqat funksiya ichida mavjud :

```{r}
#| error: true

print(vec)
```

Endi shu narsani `<-` bilan qilib koraman:

```{r}
#| collapse: true

sum(vec <- 1:15)
print(vec)
```

Shuning uchun biriktirishda kopincha strelka tavsiya qilinadi va ishlatiladi. Koproq ma'lumotlarni buy erdan: [Style guide von Hadley Wickham](http://adv-r.had.co.nz/Style.html) va bu yerdan: [Google’s R Style Guide](https://google.github.io/styleguide/Rguide.html) olish mumkin
:::

**`r fa(name = "r-project",  height = "2em", width = "2em", fill = "steelblue")` $~$ -- $~$ Check for integer**\
R-da ***`is.integer()`*** yoki ***`inherits(object, "type")`*** unksiyasidan foydalanib ob'ekt turini tekshirishingiz mumkin.

::: code-r
***R***

```{r}
#| collapse: true

# Check in R if a number is integer
is.integer(ri1)            # Is 11L integer?
inherits(ri2, "integer")   # Is -12 integer?
is.integer(ri3)            # Is 13.0 integer?
is.integer(ri4)            # Is "123" integer?
inherits(ri4, "character") # Is "123"character?
```
:::

**-- Convert to integer in R**\
Aytilganidek, sonlarni orqasida L bolmasa, R bu objektni numeric, ya'ni o'nlik son yoki float *(yuqoridagi misoldagi ri3 ob'ektiga qarang)*. Men R buyurishim kerakki, u sonni butun son sifatida saqlasin. Buning uchun ***`as.integer()`*** funksiyasidan foydalanishim mumkin.

::: code-r
***R***

```{r}
#| code-line-numbers: true
#| results: hold
#| code-fold: true
#| code-summary: "show the code"

# Making R treat the object as an integer
print(class(ri3))              # Type of 13.0
print(class(ri4))              # Type of "123"
print(class(as.integer(ri3)))  # Forsing 13.0 to integer
print(class(as.integer(ri3)))  # Forsing "123" to integer
print(class(FALSE))            # Type of FALSE
print(class(TRUE))             # Type of True
print(as.integer(FALSE))       # FALSE as Integer
print(as.integer(TRUE))        # TRUE as Integer
```
:::

**`r fa(name = "python",  height = "2em", width = "2em", fill = "steelblue")` $~$ -- $~$ Check for int**\
Python-da tekshirishning bir necha yo'llari mavjud: ***`isinstance(ob'ekt, turi)`*** funksiyasi orqali huddi, R-dagi `inherits(ob'ekt, ""turi")` kabi yoki ob'ekt turini ma'lumot turi bilan tenglashtirib ham tekshirish mumkin. , masalan, ***`type(object) ==/is int()`***. Shuningdek, ***`is_integer()`*** funksiyasi ham mavjud. Bu funksiya *float*-o'nlik nnni *int*-butun songa tekshirishda ishlaydi, boshqa turlarida ishlamaydi. Boshqa turlari uchun manimcha *sumpy* moduli kerak. Uni ishlatib kurmadim, chunki yuqorida keltirilgan funksiyalarni uzi ham yetadi, boshqacha aytganda Rimga olib boradigan boshqa yo'llar ham bor. `r fa(name = "face-smile-wink", fill = "indianred")`

::: code-py
***Python***

```{python}
#| collapse: true

# Check in Python if a number is integer
isinstance(pi1, int) # Is 11 integer?
type(pi2) == int     # Is -12 integer?
isinstance(pi3, int) # Is 13.0 integer?
type(pi4) is int     # Is '123' integer?
```
:::

**-- Convert to int in Python**\
Python raqamlarni butun sonlar sifatida saqlaydi. Agar men uni float ya'ni o'nlik son sifatida xohlasam, men float turiga o'tkazishim kerak. Agar menda matn(matn sifatida saqlangan sonlar), Float yoki Logical kabi turdagi ma'lumotlarim bo'lsa, men ob'ektni ***`int()`*** funksiyasiga o'tkazish orqali uni Python-da Integerga aylantira olaman.

::: code-py
***Python***

```{python}
#| code-line-numbers: true
#| results: hold
#| code-fold: true
#| code-summary: "show the code"

# Making Python treat the object as an integer
print(type(pi3))        # Type of 13.0
print(type(pi4))        # Type of "123"
print(type(int(pi3)))   # Forsing 13.0 to integer
print(type(int(pi3)))   # Forsing "123" to integer
print(type(False))      # Type of FALSE
print(type(True))       # Type of True
print(int(False))       # FALSE as Integer
print(int(True))        # TRUE as Integer
```
:::

### numeric/float

Float bu aniqligi uncha katta bo'lmagan suzuvchi nuqtali sonlar, *Floating point numbers*, Python-da float sifatida ifodalanadi. R odatda (orqasiga L harfi quo'yilmagan) sonlarni *float* () sifatida saqlaydi. Umuman olganda R sonlarni `numeric` sifatida ifodalaydi. Ular integer yoki float bo'lishi mumkin. Misol uchun R 12 sonini float, ya'ni 12.0 sifatida saqlaydi, `class()` funksiyasi bilan u turni *`numeric`* sifatida ifodalaydi. R-da ma'lumot turni tekshirish uchun ishlatilishi mumkin bo'lgan yana bir funksiya ham mavjud: ***`typeof()`***. Bu funksiya orqali 12 sonini `double` sifatida kursatadi, ehtimol bu C dasturlash tilidan. O'ylaymanki, quyidagi misol nimani nazarda tutayotganimni aniqroq qiladi;).

```{r}
#| code-line-numbers: true
#| results: hold
#| code-fold: true
#| code-summary: "show the code"

# class() und typeof()
class(10)    # numeric
typeof(10)   # double
class(10L)   # integer
typeof(10L)  # integer
class(10.0)  # numeric
typeof(10.0) # double
```

**-- Check numeric/float**\
Bu yerda ham yuqorida Integer uchun keltirilgan funksiyalardan foydalanish mumkin, R-da *is.*-dan keyin integerni o'rniga *numeric* yoku *double* qoyiladi: **`is.numeric(*obj*)`** yoki **`is.double(*obj*)`** yoki **`inherits(*obj*, "numeric")`**. Python-da ham yuqoridagi integer uchun qollangan funksiyadan foydalanish mumkin: **`type(*obj*)`**, yoki mantiqiy taqqoslash orqali: **`type(*obj*) is float`** yoki **`type(*obj*) == float`** yoki **`isinstance(*obj*, float)`**.

::: {layout="[[50,50], [100]]"}
::: code-r
***R***

```{r}
#| collapse: true

rf1 <- 3.14
rf2 <- 17
rf3 <- 20L
print(class(rf2))  # class()-Type of 17
print(class(rf3))  # class()-Type of 20L
print(typeof(rf2)) # typeof()-Type of 17
print(typeof(rf3)) # typeof()-Type of 20L
is.numeric(rf1)    # Is 3.14 numeric?
is.double(rf2)     # Is 17 double?
is.numeric(rf3)    # Is 20L numeric?
is.integer(rf3)    # Is 20L integer?
```
:::

::: code-py
***Python***

```{python}
#| collapse: true

pf1 = 3.14
pf2 = 17
pf3 = 20
print(type(pf1))      # Type of 3.14
print(type(pf2))      # Type of 17
print(type(pf3))      # Type of 20
isinstance(pf1, float)# Is 3.14 float?
isinstance(pf1, int)  # Is 3.14 int?
type(pf2) is float    # Is 17 float?
type(pf3) == float    # Is 20 float?
isinstance(pf2, float)# Is 17 float?
```
:::
:::

**-- Convert to numeric/float**\
O'nlik sonlar, ya'ni R-da numeric yoki float hosil qilish uchun yuqoridagi *as.* funksiyani bu yerda ham qollaymiz, buning uchun funksiyani shunday yozamiz: **`as.numeric(*obj*)`** oder **`as.double(*obj*)`**.

::: code-r
***R***

```{r}
#| code-line-numbers: true
#| results: hold
#| code-fold: true
#| code-summary: "show the code"

# Making R treat the object as an integer
print(class(rf2))              # Type of 17
print(class(rf3))              # Type of 20L
print(class(as.numeric(rf2)))  # Forsing 17 to nomeric
print(class(as.double(rf3)))   # Forsing 20L to nomeric
print(as.numeric(FALSE))       # FALSE as numeric
print(as.double(TRUE))         # TRUE as numeric
```
:::

Pythonda buni **`float(*obj*)`** funksiyasi yordamida amalga oshirishim mumkin.

::: code-py
***Python***

```{python}
#| code-line-numbers: true
#| results: hold
#| code-fold: true
#| code-summary: "show the code"

# Making Python treat the object as an integer
print(type(pf2))        # Type of 17
print(type(pf3))        # Type of 20
print(type(float(pf2))) # Forsing 17 to float
print(type(float(pf3))) # Forsing 20 to float
print(float(False))     # FALSE as float
print(float(True))      # TRUE as float
```
:::

### character/str

Nomidan ko'rinib turibdiki, bunday ma'lumotlar belgilar, harflarni, satr va matnlarni o'z ichiga olgan ma'lumot turlaridir. R-da ular `character` va Python-da `str` sifatida tavsiflanadi. Amalda, matnli ma'lumotlar raqamli ma'lumotlar ya'ni sonlar kabi ko'p qo'llaniladigan ma'lumot turlaridandir. Masalan, tahlil qilinadigan ma'lumotlar to'plamida kategorik o'zgaruvchilar misol uchun "erkak' yoki "ayol" bo'lishi mumkin va hokozo\

Wie der Name schon sagt, solche Daten sind Strings, die Zeichen, Buchstaben enthalten. In R werden sie als `character` und in Python als `str` charakteresiert. Mit Strings hat man in der Praxis auch wie mit numerischen Daten häufig zu tun. Beispielweise können im zu analysierenden Datensatz auch kategoriale Variablen: "männlich", "weiblich" vorhanden sein usw.\
Satrlar yoki matn ko'rinishidagi ma'lumotlar R va Python-da qo'sh apostrof ichida `'matn'` yoki qo'shtirnoq ichida `"matn"` ko'rsatilishi mumkin. Satr uzunligi funksiyasi R uchun: ***`nchar()`*** va Python ***`len()`*** uchun. R-da *stringr* paketidan `str_lenght("matn")` funksiyasini ham ishlatisch mumkin.

::: panel-tabset
# `r fa(name = "r-project",  height = "1em", width = "1em", fill = "steelblue")`

::: code-r
```{r}
#| code-line-numbers: true
#| results: hold
#| error: true

# Examples for Characters
rt1 <- "123"
rt2 <- "Hello" 
rt3 <- "World"
glue::glue("Class of rt1: {class(rt1)}")
# Adding Strings 
glue::glue("glue() funksiyasi orqali: {rt2} {rt3}")
paste("paste() funksiyasi orqali:", rt2, rt3, sep = " ")
# Compare Strings
rt2 == "Hello"
rt2 == "HELLO"
rt1 == 123
# Length of String
glue("\"123\" satrining uzunligi: {nchar(rt1)}")
glue("\"Hello\" satrining uzunligi: {nchar(rt2)}")
length(rt1)
```
:::

Matnlarni bir-biriga qo'shish yoki matnlarni sonla bilan kopaytirish R uchun qiyinchilik tugdiradi

::: {.callout-note collapse="true"}
## More about string operations in R

Agar biz ikkita matnni birga qo'shmoqchi bo'lsak yoki satr yoki matnni raqamga ko'paytirmoqchi bo'lsak, R hatolik qaytaradi. Ehtimol, bunga imkon beradigan ba'zi paketlar bordir, qarab/izlab korish kerak. Shunday qilib, Python-da ikkita matnni bir biriga qoshish yoki matnni songa kopaytirish ishlagani kabi, R da bu ishlamaydi. *glue* paketidagi **`glue(*obj*)`** funksiyasi yoki `paste` funksiyasi orqali matnlarni bir biriga qoshib korsatish mumkin. Bu funksiya `stringr` paketida ham mavjud va uni quyidagicha ishlatish mumkin: `stringr::str_glue()`. `glue("The value of text is {text})` funksiyasi Python-dagi `print(f"The value of text is {text}")` funksiyaga o'xshaydi.

```{r}
#| collapse: true
#| error: true

# R engine
# Satrlarni bir biriga qo'shish yoki ularni songa ko'paytirish
# Ishlamaydi!
satr1 <- "Assalomu"
satr2 <- "Alaykum"
satr1 + satr2
satr1 * 3
```
:::

# `r fa(name = "python",  height = "1em", width = "1em",fill = "steelblue")`

::: code-py
```{python}
#| code-line-numbers: true
#| results: hold

# Python engine
# Examples for Characters
pt1 = "123"
pt2 = "Hello" 
pt3 = "world"
print(f"Type of pt1: {type(pt1)}")
# Adding Strings / matnlarni qoshish
print(pt2 + " " + pt3) # or
print(f"{pt2} {pt3}")
# Multiply a string by 3 / matnlarni songa kopaytirish
pt3*3
# Compare
pt2 == "Hello"
pt2 == "HELLO"
pt1 == 123
# Length of String
print(f"Länge von \"123\": {len(pt1)}")
print(f"Länge von \"Hallo\": {len(pt2)}")
```
:::
:::

Strings - bu keng mavzu. Bu erda faqat ma'lumotlar turi bilan bog'liq tomonlari qaraldi. Balki alohida content ham bo'lar `r fa(name = "face-smile-wink", fill = "indianred")`.

### logical/bool

Mantiqiy turdagi ob'ektlar TRUE/FALSE yoki 1/0 qiymatlarini olishi mumkin. Bular R da `logical` va Pythonda `bool` sifatida saqlanadi. Ofodalash tarsi ham R va Python-da farq qiladi: R-da ular katta harflarda yoziladi: [TRUE/FALSE]{style="color: red;"}, Python-da esa birinchisi katta va qolganlari kichik harflarda boladi:[True/False]{style="color: red;"}. 

::: {layout="[[50,50], [100]]"}
::: code-r
***R***

```{r}
#| collapse: true

# R engine
rt <- TRUE
rf <- FALSE
class(rt)        # Type of TRUE
class(rf)        # Type of FALSE
is.logical(rt)   # Is TRUE logical
as.character(rt) # TRUE as character
as.character(rf) # FALSE as character
as.integer(rt)   # TRUE as integer
as.integer(rf)   # FALSE as integer
rt & rf          # rt AND rf
rt | rf          # rt OR rf
!rt              # Is not TRUE
```
:::

::: code-py
***Python***

```{python}
#| collapse: true

# Python engine
pt = True
pf = False
type(pt)  # Type of True
type(pf)  # Type of False
type(pt) is bool # Is bool
str(pt)   # True as String
str(pf)   # False as String
int(pt)   # True as Integer
int(pf)   # False as Integer
pt and pf # pt AND pf
pt or pf  # pt OR pf
not pt    # Is not True
```
:::
:::

Kimgadir qayerdadir qaysidir manoda qanchadir yordami tegkan bo'lsa, bundan faqat xursand bolaman.`r fa(name = "face-smile", fill = "indianred")` Keyingi mavzu ma'lumotlar tuzilmasi haqida bo'ladi.


## References
